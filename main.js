var gsCurrentVersion = "9.2 2021-11-30 02:29"  // 1/5/21 - v5.6 - added the ability to show the current version by pressing shift F12
var gsInitialStartDate = "2020-05-01";

var gbInTestMode = false; //if true will getDataTest.php instead of getData.php

var gsRefreshToken = "";
var gsAccessTokenExpirationTime = "";
var gsBearerCode = "";
var gsTDAPIKey = "";
var gsGetDataSite = "";
var gsRedirectURL = "";
var gbUsingCell = false;
var gbCellWLSpecial = false;
var gsOldBody = "";

String.prototype.toProperCase = function (opt_lowerCaseTheRest) {
    return (opt_lowerCaseTheRest ? this.toLowerCase() : this)
        .replace(/(^|[\s\xA0])[^\s\xA0]/g, function (s) { return s.toUpperCase(); });
};

var giZIndex = 0;

var giSectionHeights = {
    "IndexSelection": { "height": 0, "selected": false, "lastselected": false },
    "Indexes": { "height": 0, "selected": false, "lastselected": false  },
    "TradeHistorySelection": { "height": 0, "selected": false, "lastselected": false  },
    "PriceHistorySelection": { "height": 0, "selected": false, "lastselected": false  }
};

var gsSortOrderFields = {
    "Symbol": "Symbol",
    "SymbolDescription": "SymbolDescription",
    "Qty": "Qty",
    "Price": "Price",
    "ChgDollar": "ChgDollar",
    "ChgPercent": "ChgPercent",
    "Bid": "Bid",
    "Ask": "Ask",
    "High": "High",
    "Low": "Low",
    "DayGain": "DayGain",
    "GainDollar": "GainDollar",
    "GainPercent": "GainPercent",
    "CostPerShare": "CostPerShare",
    "DivPercent": "DivPercent",
    "DivDollar": "DivDollar",
    "Amt": "Amt",
    "DivDate": "DivDate",
    "PE": "PE",
    "PurchaseDate": "PurchaseDate",
    "CatalystDate": "CatalystDate",
    "OldGL": "OldGL",
    "GL": "GL",
    "MktValue": "MktValue"
}
//sortascdesc = 0, asc, 1 = desc
var gsWLColumnsAll = {
    "Symbol": { "name": "Symbol", "displayname": "Symbol", "sortorder": 0, "selected": true, "width": 90, "sortable": true, "aligndata": "left", "alignheading": "left", "selectedtomove": false, "sortonthisfield": true, "sortascdesc": 0},
    "SymbolDescription": { "name": "SymbolDescription", "displayname": "Description", "sortorder": 2, "selected": false, "width": 160, "sortable": true, "aligndata": "left", "alignheading": "center", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "PurchaseDate": { "name": "PurchaseDate", "displayname": "Acquired", "sortorder": 4, "selected": true, "width": 90, "sortable": true, "aligndata": "center", "alignheading": "center", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "CatalystDate": { "name": "CatalystDate", "displayname": "Catalyst", "sortorder": 6, "selected": true, "width": 90, "sortable": true, "aligndata": "center", "alignheading": "center", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "Qty": { "name": "Qty", "displayname": "Qty", "sortorder": 8, "selected": true, "width": 60, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "Price": { "name": "Price", "displayname": "Price", "sortorder": 10, "selected": true, "width": 60, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "ChgPercent": { "name": "ChgPercent", "displayname": "Chg%", "sortorder": 12, "selected": true, "width": 60, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "ChgDollar": { "name": "ChgDollar", "displayname": "Chg$", "sortorder": 14, "selected": true, "width": 60, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "Bid": { "name": "Bid", "displayname": "Bid", "sortorder": 16, "selected": true, "width": 60, "sortable": false, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "Ask": { "name": "Ask", "displayname": "Ask", "sortorder": 18, "selected": true, "width": 60, "sortable": false, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "High": { "name": "High", "displayname": "High", "sortorder": 20, "selected": false, "width": 60, "sortable": false, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "Low": { "name": "Low", "displayname": "Low", "sortorder": 22, "selected": false, "width": 60, "sortable": false, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "DayGain": { "name": "DayGain", "displayname": "Day gain$", "sortorder": 24, "selected": true, "width": 90, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "GainDollar": { "name": "GainDollar", "displayname": "Gain$", "sortorder": 26, "selected": true, "width": 60, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "GainPercent": { "name": "GainPercent", "displayname": "Gain%", "sortorder": 28, "selected": true, "width": 60, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "CostPerShare": { "name": "CostPerShare", "displayname": "Cost", "sortorder": 30, "selected": true, "width": 60, "sortable": false, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "DivPercent": { "name": "DivPercent", "displayname": "Div%", "sortorder": 32, "selected": false, "width": 60, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "DivDollar": { "name": "DivDollar", "displayname": "Div$", "sortorder": 34, "selected": false, "width": 60, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "Amt": { "name": "Amt", "displayname": "Amt", "sortorder": 36, "selected": false, "width": 60, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "DivDate": { "name": "DivDate", "displayname": "Div Date", "sortorder": 38, "selected": false, "width": 90, "sortable": true, "aligndata": "right", "alignheading": "center", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "PE": { "name": "PE", "displayname": "PE", "sortorder": 40, "selected": false, "width": 60, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "GL": { "name": "GL", "displayname": "GL", "sortorder": 42, "selected": true, "width": 80, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "OldGL": { "name": "OldGL", "displayname": "OldGL", "sortorder": 44, "selected": false, "width": 80, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 },
    "MktValue": { "name": "MktValue", "displayname": "Mkt Value", "sortorder": 46, "selected": true, "width": 80, "sortable": true, "aligndata": "right", "alignheading": "right", "selectedtomove": false, "sortonthisfield": false, "sortascdesc": 0 }
}

var gsWLColumnsDefault = [];
var gsWLColumnsAccount = [];
var gsWLColumnsDiv = [];
var gsWLColumnsShared = [];
var gsWLColumnsSharedCurrentTrades = [];
var gsWLColumnsCurrentTrades = [];

var gsSortOrderFieldsO = {
    "Status": "Status",
    "Action": "Action",
    "Quantity": "Quantity",
    "Symbol": "Symbol",
    "Type": "Type",
    "Price": "Price",
    "ActPrice": "ActPrice",
    "TimeInForce": "TimeInForce",
    "TimeEntered": "TimeEntered",
    "Reported": "Reported"
}

var gsSortOrderFieldsSO = {
    "Action": "Action",
    "Quantity": "Quantity",
    "Symbol": "Symbol",
    "Type": "Type",
    "Price": "Price",
    "ActPrice": "ActPrice",
    "TimeInForce": "TimeInForce",
    "TimeEntered": "TimeEntered",
    "Bid": "Bid",
    "Ask": "Ask"
}

function FixedPrice() {
    this.symbol = "";
    this.price = 0.0;
    this.date = ""; //2020-04-13
}
var gaFixedPrices = new Array(); //collection of FixedPrice objects

var xhttpAsync;
var bDoingLookup = false;
var bTimedOut = false;

var iTimerID = 0;

var gsStopLight = "<span style=\"vertical-align: middle;\">&nbsp;&nbsp;<img id=\"imgStopLight\" src=\"TrafficLightStop16px.png\" /></span>"; //TrafficLightGo16px or TrafficLightStop16px

var gbDoingSymbolsSelect = false;
var gbDoingStockPriceHistory = false;
var gbGettingStockPriceHistory = false;
var gbUseEnterToTogglePriceHistory = false;
var gbUseExtended = false;
var gbUseLastTradingDay = false;
var gbCollectDetail = false;
var gbDoingDrag = false;
var gbDoingGetTDData = false;
var gbRegularMarketHours = false;
var gbDoingShowSection = false;

var giMarketOpenRefreshRate = 2000;
var giMarketClosedRefreshRate = 10000;
var giCurrentRefreshRate = 2000;
var giGetTDDataTimeoutId = 0;
var giProgressIntervalId = 0;
var giProgress = 0;
var gbStopProgress = false;
var gsSaveOrdersSummaryMsg = "";
var gdAccountMinimumLiquidationValue = 1000.00;
var giPopupOffset = 50;

var gsNegativeColor = "darkred";

function MarketStatus() {
    this.isInitialized = false;
    this.isOpen = false;
    this.sMarketDate = "";
    this.dtPreStart = new Date();
    this.dtPreEnd = new Date();
    this.dtRegularStart = new Date();
    this.dtRegularEnd = new Date();
    this.dtPostStart = new Date();
    this.dtPostEnd = new Date();

    this.dtLastMarketStatusCheck = new Date();
    this.dtLastWLPriceCheck = new Date();
    this.dtLastIndexCheck = new Date();
}
var gMarketStatus = new MarketStatus();

function AccessToken() {
    this.access_token = "";
    this.refresh_token = "";
    this.token_type = "";
    this.expires_in = 0
    this.scope = "";
    this.refresh_token_expires_in = 0;
    this.access_token_expiration_time = 0;
}

var gAccessToken = new AccessToken();

var giAPIErrorTimeoutId = 0;

var gsLogonUser = ""; //the user id used to log into TD Ameritrade


function Position() {
    this.averagePrice = 0.0; //cost/share
    this.currentDayProfitLoss = 0.0; //day gain
    this.currentDayProfitLossPercentage = 0.0;
    this.marketValue = 0.0;
    this.longQuantity = 0;
    this.shortQuantity = 0;
    this.assetType = "";
    this.symbol = ""; //will contain the watchlist id that contains a new symbol being added
    this.accountId = "";
    this.accountName = "";
}

function Account() {
    this.accountId = "";
    this.accountName = "";
    this.IBliquidationValue = 0.0;
    this.CBliquidationValue = 0.0;
    this.CBcashBalance = 0.0;
    this.totalTrades = 0;
    this.positions = new Array();
}
var gAccounts = new Array(); //collection of Account objects

function PriceInfoPeriod() {
    this.high = 0.0;
    this.low = 0.0;
    this.highTotal = 0.0;
    this.lowTotal = 0.0;
    this.openTotal = 0.0;
    this.closeTotal = 0.0;
    this.volume = 0;
    this.count = 0;
}

function PriceInfo() {
    this.idx = 0;
    this.symbol = "";
    this.shortPIP = new PriceInfoPeriod();
    this.longPIP = new PriceInfoPeriod();
    this.totalVolume = 0;
}
var gPriceInfo = new Array(); //collection of PriceInfo objects

function Symbol() {
    this.accountId = "";
    this.accountName = "";
    this.symbol = "";
    this.cusip = "";
    this.description = "";
    this.currentPrice = 0.0;
    this.fees = 0.0;
    this.buy = 0.0;
    this.sell = 0.0
    this.divAmount = 0.0;
    this.shares = 0.0;
    this.assetType = "";
    this.SymbolPrice = new SymbolPrice();
    this.trades = new Array();
}
var gSymbols = new Array(); //collection of Symbol objects
var gSymbolsTotalDivLong = 0.0;
var gSymbolsTotalDivShort = 0.0;
var gSymbolsAuto = new Array(); //collection of Symbol objects used to update the Old G/L in a watchlist
var gSymbolsGL = []; //will contain all of the symbols that have an OldGL for all of the accounts -- key = accountId + symbol, value = {symbol, symbolDescription, averagePrice}
var gSymbolsGLToImport = []; //will contain all of the symbols that have an OldGL for all of the accounts -- key = accountId + symbol, value = {symbol, symbolDescription, averagePrice}

function SymbolPrice() {
    this.description = "";
    this.price = 0.0;
    this.totalVolume = 0;
    this.tradeTimeInLong = 0;
    this.quoteTimeInLong = 0;
}

function MarketIndex() {
    this.tdName = "";
    this.symbol = "";
    this.description = "";
    this.lastPrice = 0.0;
    this.regularMarketLastPrice = 0.0;
    this.regularMarketNetChange = 0.0;
    this.regularMarketPercentChangeInDouble = 0.0;
    this.netChange = 0.0;
    this.netPercentChangeInDouble = 0.0;
}
var gMarketIndexes = new Array() //collection of MarketIndex objects
var gsMarketsToTrack = new Array("$DJI", "$COMPX", "$SPX.X");
var gsMarketsDJI = "$DJI";
var gsMarketsDJIDesc = "Dow 30";
var gsMarketsNasdaq = "$COMPX";
var gsMarketsNasdaqDesc = "Nasdaq";
var gsMarketsSP = "$SPX.X";
var gsMarketsSPDesc = "S&P 500";
var gsMarketsLargeBio = "IBB";
var gsMarketsLargeBioDesc = "Large Bio";
var gsMarketsSmallBio = "XBI";
var gsMarketsSmallBioDesc = "Small Bio";
var gsMarketsRussell2000 = "$RUT.X";
var gsMarketsRussell2000Desc = "Russell 2K";
var gsMarketsNasdaq100 = "$NDX.X";
var gsMarketsNasdaq100Desc = "Nasdaq 100";
var gsMarkets10yrTreasury = "$TNX.X";
var gsMarkets10yrTreasuryDesc = "10yr Treas";
var gsMarketsOilGas = "$$CL";
var gsMarketsOilGasActual = "/CL";
var gsMarketsOilGasDesc = "Oil & Gas";

var gbMarketShowChangePercentage = false;
var gsMarketsCurrentIndexes = "";
var gsMarketsLastIndexes = "";
var gsMarketWidth = "80";
var gsMarketWidthChange = "70";
var gsMarketCookieName = "tdAppIndexes07"
var gsSectionDisplayCookieName = "tdAppSections01"

function WLItemDetail() {
    this.accountId = "";
    this.accountName = "";
    this.bHidden = false; //9/20/21
    this.bidPrice = 0.0; //Bid
    this.askPrice = 0.0; //Ask
    this.highPrice = 0.0; //High
    this.lowPrice = 0.0; //Low
    this.lastPrice = 0.0; //Last
    this.netChange = 0.0; //Net Chng
    this.netPercentChangeInDouble = 0.0; //Net Chng %
    this.regularMarketLastPrice = 0.0;
    this.regularMarketNetChange = 0.0;
    this.regularMarketPercentChangeInDouble = 0.0;
    this.shares = 0; //number of currently owned shares from Position.longQuantity or Position.shortQuantity
    this.dayGain = 0.0; //daily gain from Position.currentDayProfitLoss
    this.costPerShare = 0.0; //from watchlist averagePrice or Position.averagePrice if it exists
    this.marketValue = 0.0; //from Position.marketValue
    this.gain = 0.0; //total gain = shares * (regularMarketLastPrice - shareCost)
    this.gainPercent = 0.0; // (regularMarketLastPrice / shareCost) - 1 * 100
    this.averagePrice = 0.0; //from WL info - used for GL
    this.GLUpdateDate = 0; //from WL info averagePrice field - the date the GL was automatically updated
    this.GLUpdateStartDate = 0; //from WL info quantity field - the start date used to automatically update the GL
    this.oldgl = 0.0; 
    this.peRatio = 0.0; //only used if WL name contains the word "dividend"
    this.purchasedDate = "";
    this.catalystDate = "";
    this.divAmount = 0.0; //only used if WL name contains the word "dividend"
    this.divYield = 0.0; //only used if WL name contains the word "dividend"
    this.divDate = ""; //only used if WL name contains the word "dividend"
}

function WLDisplayed() {
    this.symbol = "";
    this.symbolDescription = "";
    this.assetType = "";
    this.sSortOrderFields = gsSortOrderFields.Symbol; //look at gsSortOrderFields
    this.iSortOrderAscDesc = 0; //0 - ascending, 1 - descending
    this.WLItemDetails = new Array(); //array of WLItemDetail objects
}
var gWLDisplayed = new Array(); //array of WLDisplayed objects
var goWLDisplayed = []; //will contain the last WL item values to be used to determine if the display should be highlighted

function WLOGLStats() {
    this.WLId = "";
    this.WLName = "";
    this.NumItems = 0;
}

function WLSummaryRank() {
    this.watchlistName = "";
    this.watchlistId = "";
    this.rank = 0;
}

function WLSummaryDayItemDetail() {
    this.watchlistName = "";
    this.watchlistId = "";
    this.up = 0;
    this.down = 0;
    this.cost = 0.0;
    this.gain = 0.0;
    this.gainPercent = 0.0;
    this.rank = 0;
    this.rankTotal = 0;
}

function WLSummaryHoldingItemDetail() {
    this.watchlistName = "";
    this.watchlistId = "";
    this.up = 0;
    this.down = 0;
    this.gain = 0.0;
    this.gainPercent = 0.0;
}

function WLSummaryPortfolioItemDetail() {
    this.watchlistName = "";
    this.watchlistId = "";
    this.gain = 0.0;
}

function WLSummaryDisplayed() {
    this.accountId = "";
    this.accountName = "";
    this.WLSummaryDayItemDetails = new Array(); //array of WLSummaryDayItemDetail objects - sorted by gainPercent
    this.WLSummaryHoldingItemDetails = new Array(); //array of WLSummaryHoldingItemDetail objects - sorted by gainPercent
    this.WLSummaryPortfolioItemDetails = new Array(); //array of WLSummaryPortfolioItemDetail objects - sorted by gain
}

var gWLSummaryDisplayed = new Array(); //array of WLSummaryDisplayed objects
var goWLSummaryDisplayed = []; //will contain the last WLSummary item values to be used to determine if the display should be highlighted

var gisymbolDescriptionMax = 20;
var giwlnameMax = 20;

function WLPurchasedDateHidden() {
    this.bHidden = false;
    this.purchasedDate = "";
}

function WLItem() {
    this.bSelected = true;
    this.bSelectedTemp = true;
    this.bSelectedForOrder = false;
    this.bCheckboxEnabled = true;
    this.bHidden = false; //9/20/21
    this.symbol = "";
    this.symbolDescription = ""; //max gisymbolDescriptionMax characters
    this.assetType = "";
    this.sequenceId = 0;
    this.purchasedDate = "";
    this.catalystDate = "";
    this.priceInfo = new WLItemDetail();
}
var gWatchlistItemsToCopy = new Array(); //array of WLItem objects

function WLItemSavedOrder() {
    this.bSelected = true;
    this.bSelectedTemp = true;
    this.bSelectedForOrder = false;
    this.bCheckboxEnabled = true;
    this.sSortOrderFields = gsSortOrderFieldsSO.TimeEntered; //look at gsSortOrderFieldsSO
    this.iSortOrderAscDesc = 1; //0 - ascending, 1 - descending
    this.savedOrderId = 0;
    this.savedTime = ""; //like "2021-03-04T20:30:01+0000"
    this.orderType = ""; //"MARKET", "LIMIT", or "TRAILING_STOP"
    this.price = 0.0; //the price as a dollar amount
    this.session = ""; //"NORMAL", or "SEAMLESS"
    this.stopPriceOffset = 0; //a number from 1 to 100 
    this.stopPriceLinkType = ""; //'VALUE' or 'PERCENT' or 'TICK'
    this.cancelTime = ""; //as yyyy-mm-dd
    this.duration = ""; //either "DAY" or "GOOD_TILL_CANCEL"
    this.instruction = ""; //"BUY" or "SELL" 
    this.quantity = 0; //a number
    this.bidPrice = 0.0; //Bid
    this.askPrice = 0.0; //Ask
    this.symbol = ""; //like "XYZ"
}

function WLItemOrder() {
    this.bSelected = true;
    this.bSelectedTemp = true;
    this.bSelectedForOrder = false;
    this.bCheckboxEnabled = true;
    this.sSortOrderFields = gsSortOrderFieldsO.Action; //look at gsSortOrderFieldsO
    this.iSortOrderAscDesc = 0; //0 - ascending, 1 - descending
    this.orderId = 0; //int64
    this.status = ""; /* "AWAITING_PARENT_ORDER", "AWAITING_CONDITION",
                        "AWAITING_MANUAL_REVIEW", "ACCEPTED",
                        "AWAITING_UR_OUT", "PENDING_ACTIVATION",
                        "QUEUED", "WORKING",
                        "REJECTED", "PENDING_CANCEL",
                        "CANCELED", "PENDING_REPLACE",
                        "REPLACED", "FILLED",
                        "EXPIRED" 
                      */
    this.enteredTime = ""; //like "2021-06-27T02:32:24+0000"
    this.closeTime = "" //like: "2021-06-27T02:42:06+0000"
    this.orderType = ""; /* "MARKET", "LIMIT",
                            "STOP", "STOP_LIMIT",
                            "TRAILING_STOP", "MARKET_ON_CLOSE",
                            "EXERCISE", "TRAILING_STOP_LIMIT",
                            "NET_DEBIT", "NET_CREDIT",
                            "NET_ZERO" 
                         */
    this.price = 0.0; //the price as a dollar amount
    this.session = ""; // "NORMAL", "AM", "PM", "SEAMLESS"
    this.stopPriceOffset = 0; //a number from 1 to 99  
    this.stopPriceLinkType = ""; //'VALUE' or 'PERCENT' or 'TICK'
    this.cancelTime = ""; //as yyyy-mm-dd
    this.duration = ""; //either "DAY" or "GOOD_TILL_CANCEL or "FILL_OR_KILL""
    this.instruction = ""; //"BUY", "SELL", "BUY_TO_COVER", "SELL_SHORT", "BUY_TO_OPEN", "BUY_TO_CLOSE", "SELL_TO_OPEN", "SELL_TO_CLOSE", "EXCHANGE"
    this.quantity = 0; //a number
    this.filledQuantity = 0; //a number
    this.remainingQuantity = 0; //a number
    this.symbol = ""; //like "XYZ"
    this.activationPrice = 0.0; //a number
}

const gksWLIconShare = "share.png";
const gksWLIconUnShare = "unshare.png";
const gksWLIconShareTitle = "Share";
const gksWLIconUnShareTitle = "Unshare";

const gksWLIconHide = "icons8-hide-30.png";
const gksWLIconShow = "icons8-eye-30.png";
const gksWLIconHideTitle = "Hide Selected Symbols";
const gksWLIconShowTitle = "Show (xx) Hidden Symbols";

const gksWLIconSettings = "settings.png";
const gksWLIconSettingsTitle = "Change Columns Displayed or change the watchlist name to whatever is entered in the Acquired Date field";

var gsAccountWLSummary = "Watchlist Performance";
var gsAccountSavedOrders = "Account Saved Orders";
var gsAccountOrders = "Account Orders";
var gsAccountOldGL = "Account Old GL"; //will contain symbols from all of the OldGL watchlists for the account
var gsAccountOldGLBase = "OldGL"; //the name of the watchlist in each account that contains all of the symbols that need additional values added to the calculated GL
                                  //the actual watchlist name will be this value plus a single digit like "OldGL1"
                                  //each watchlist will contain up to 200 symbols
var gOrdersToDelete = new Array();
var gOrdersToPlace = new Array();
var gOrdersToCancel = new Array();

function WLWatchList() {
    this.bSelected = false;
    this.bSelectedSymbols = false;
    this.bSelectedTemp = false;
    this.bSelectedTempSymbols = false;
    this.bSelectedOGL = false;
    this.bSelectedOGLTemp = false;
    this.bSelectedO = false;
    this.bSelectedOTemp = false;
    this.bSelectedSO = false;
    this.bSelectedSOTemp = false;
    this.bSelectedWLSummary = false;
    this.bSelectedWLSummaryTemp = false;
    this.bShowAllAccountsForEachSymbol = false;
    this.bShowMaximized = false; //11/27/21 default to show all lines
    this.bShared = false;
    this.bViewable = false;
    this.sSortOrderFields = gsSortOrderFields.Symbol; //look at gsSortOrderFields
    this.iSortOrderAscDesc = 0; //0 - ascending, 1 - descending
    this.spanName = "";
    this.name = ""; //"Account" and "Account Saved Orders" are special names
    this.watchlistId = ""; //if name is "Account" this is accountId, if name is "Account Saved Orders" this is accountId + "AccountSavedOrders"
    this.accountId = "";
    this.accountName = "";
    this.defaultUpdateGLDate = "";
    this.wllastupdatedate = 0;
    this.wlcolumnsselected = [];
    this.wlcolumnsselectedtemp = [];
    this.WLItems = new Array(); //array of WLItem objects or WLItemSavedOrder or WLItemOrder objects
}
var gWatchlists = new Array(); //array of WLWatchList objects
var gWatchlistsToImport = new Array(); //array of WLWatchList objects
var gNewWLAccounts = []; //generate new watchlists based on this list

//maximize/restore variables
var giLineLimitInitial = 50;
var giLineLimitInitialCell = 50;
var giLineLimit = 50;
var giLineHeight = 21;
var giTitleHeight = 30;
var gsRestoreWindowImg = "restore-window-19.png";
var gsMaximizeWindowImg = "maximize-window-19.png";
var gsTableHeightWithScrollbar = (giLineLimit * giLineHeight).toString() + "px";
var gsTableHeightWithScrollbarTitle = giTitleHeight.toString() + "px";
var gsTableHeightWithScrollbarTitleCell = (giTitleHeight *2).toString() + "px";
var gsTableHeightOverflow = "height:" + (giLineLimit * giLineHeight).toString() + "px; overflow-y: scroll; ";
var gsTableHeightOverflowTitle = "height:" + giTitleHeight.toString() + "px; overflow-y: scroll; ";
var gsTableHeightOverflowTitleCell = "height:" + (giTitleHeight * 2).toString() + "px; overflow-y: scroll; ";
var gsReplaceTableHeightOverflow = "xxxxtableheightinside";
var gsReplaceTableHeightOverflowTitle = "xxxxtableheighttitle";

var gsReplaceTableHeightOverflowSymbolsLong = "xxxxtableheightlong";
var gsReplaceTableHeightOverflowSymbolsShort = "xxxxtableheightshort";
var gsReplaceImgSymbolsLong = "xxxxImgSymbolsLong";
var gsReplaceImgSymbolsShort = "xxxxImgSymbolsShort";

var gsImgSymbolsLong = "<img height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"" + gsMaximizeWindowImg + "\" id=\"divSymbolsLongImg\" onclick=\"wlDoMaximizeRestoreTblSymbols('divSymbolsLong')\">";
var gsImgSymbolsShort = "<img height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"" + gsMaximizeWindowImg + "\" id=\"divSymbolsShortImg\" onclick=\"wlDoMaximizeRestoreTblSymbols('divSymbolsShort')\">";

var gsSymbolDetailSpanPrefix = "symboldetail";

const lengthsWL = {
    WLWidth: "930px",
    WLWidthDiv: "1120px",
    WLWidthCurrentTrade: "1140px",
    WLTrailingstopPercentWidth: "40px",
    WLColOpenLabelWidth: 80,
    WLColOpenEntryWidth: 60,
    WLColAcquiredDateEntryWidth: 95,
    WLColTitleWidth: 440,
    WLColCloseLabelWidth: 110,
    WLColCloseEntryWidth: 95,
    WLDragXoffsetLeft: 240,
    WLDragXoffsetRight: 700,
    WLCol2Width: 18
}
var lengthsWLWLCol1Width = lengthsWL.WLColOpenLabelWidth + lengthsWL.WLColOpenEntryWidth + lengthsWL.WLColAcquiredDateEntryWidth + lengthsWL.WLColTitleWidth + lengthsWL.WLColCloseLabelWidth + lengthsWL.WLColCloseEntryWidth + 40;

var gsFieldWidthsWL = {
    "Symbol": "width:" + gsWLColumnsAll.Symbol.width.toString() + "px;",
    "Qty": "width:" + gsWLColumnsAll.Qty.width.toString() + "px;",
    "Price": "width:" + gsWLColumnsAll.Price.width.toString() + "px;",
    "ChgDollar": "width:" + gsWLColumnsAll.ChgDollar.width.toString() + "px;",
    "ChgPercent": "width:" + gsWLColumnsAll.ChgPercent.width.toString() + "px;",
    "Bid": "width:" + gsWLColumnsAll.Bid.width.toString() + "px;",
    "Ask": "width:" + gsWLColumnsAll.Ask.width.toString() + "px;",
    "DayGain": "width:" + gsWLColumnsAll.DayGain.width.toString() + "px;",
    "GainDollar": "width:" + gsWLColumnsAll.GainDollar.width.toString() + "px;",
    "GainPercent": "width:" + gsWLColumnsAll.GainPercent.width.toString() + "px;",
    "CostPerShare": "width:" + gsWLColumnsAll.CostPerShare.width.toString() + "px;",
    "PurchaseDate": "width:" + gsWLColumnsAll.PurchaseDate.width.toString() + "px;",
    "GL": "width:" + gsWLColumnsAll.GL.width.toString() + "px;",
    "MktValue": "width:" + gsWLColumnsAll.MktValue.width.toString() + "px;",
    "DivPercent": "width:" + gsWLColumnsAll.DivPercent.width.toString() + "px;",
    "DivDollar": "width:" + gsWLColumnsAll.DivDollar.width.toString() + "px;",
    "Amt": "width:" + gsWLColumnsAll.Amt.width.toString() + "px;",
    "DivDate": "width:" + gsWLColumnsAll.DivDate.width.toString() + "px;",
    "OldGL": "width:" + gsWLColumnsAll.OldGL.width.toString() + "px;",
    "High": "width:" + gsWLColumnsAll.High.width.toString() + "px;",
    "Low": "width:" + gsWLColumnsAll.Low.width.toString() + "px;",
    "PE": "width:" + gsWLColumnsAll.PE.width.toString() + "px;",
    "CatalystDate": "width:" + gsWLColumnsAll.CatalystDate.width.toString() + "px;",
    "SymbolDescription": "width:" + gsWLColumnsAll.SymbolDescription.width.toString() + "px;"
}

var gsFieldWidthsWLBase = {
    "Symbol": "width:" + gsWLColumnsAll.Symbol.width.toString() + "px;",
    "Qty": "width:" + gsWLColumnsAll.Qty.width.toString() + "px;",
    "Price": "width:" + gsWLColumnsAll.Price.width.toString() + "px;",
    "ChgDollar": "width:" + gsWLColumnsAll.ChgDollar.width.toString() + "px;",
    "ChgPercent": "width:" + gsWLColumnsAll.ChgPercent.width.toString() + "px;",
    "Bid": "width:" + gsWLColumnsAll.Bid.width.toString() + "px;",
    "Ask": "width:" + gsWLColumnsAll.Ask.width.toString() + "px;",
    "DayGain": "width:" + gsWLColumnsAll.DayGain.width.toString() + "px;",
    "GainDollar": "width:" + gsWLColumnsAll.GainDollar.width.toString() + "px;",
    "GainPercent": "width:" + gsWLColumnsAll.GainPercent.width.toString() + "px;",
    "CostPerShare": "width:" + gsWLColumnsAll.CostPerShare.width.toString() + "px;",
    "PurchaseDate": "width:" + gsWLColumnsAll.PurchaseDate.width.toString() + "px;",
    "GL": "width:" + gsWLColumnsAll.GL.width.toString() + "px;",
    "MktValue": "width:" + gsWLColumnsAll.MktValue.width.toString() + "px;",
    "DivPercent": "width:" + gsWLColumnsAll.DivPercent.width.toString() + "px;",
    "DivDollar": "width:" + gsWLColumnsAll.DivDollar.width.toString() + "px;",
    "Amt": "width:" + gsWLColumnsAll.Amt.width.toString() + "px;",
    "DivDate": "width:" + gsWLColumnsAll.DivDate.width.toString() + "px;",
    "OldGL": "width:" + gsWLColumnsAll.OldGL.width.toString() + "px;",
    "High": "width:" + gsWLColumnsAll.High.width.toString() + "px;",
    "Low": "width:" + gsWLColumnsAll.Low.width.toString() + "px;",
    "PE": "width:" + gsWLColumnsAll.PE.width.toString() + "px;",
    "CatalystDate": "width:" + gsWLColumnsAll.CatalystDate.width.toString() + "px;",
    "SymbolDescription": "width:" + gsWLColumnsAll.SymbolDescription.width.toString() + "px;"
}

var gsFieldColSpanWL = {
    "Symbol": "",
    "Qty": "",
    "Price": "",
    "ChgDollar": "",
    "ChgPercent": "",
    "Bid": "",
    "Ask": "",
    "DayGain": "",
    "GainDollar": "",
    "GainPercent": "",
    "CostPerShare": "",
    "PurchaseDate": "",
    "CatalystDate": "",
    "High": "",
    "Low": "",
    "PE": "",
    "GL": "",
    "OldGL": "",
    "MktValue": "",
    "DivPercent": "",
    "DivDollar": "",
    "Amt": "",
    "DivDate": "",
    "SymbolDescription": ""
}

var gsFieldColSpanWLBase = {
    "Symbol": "",
    "Qty": "",
    "Price": "",
    "ChgDollar": "",
    "ChgPercent": "",
    "Bid": "",
    "Ask": "",
    "DayGain": "",
    "GainDollar": "",
    "GainPercent": "",
    "CostPerShare": "",
    "PurchaseDate": "",
    "CatalystDate": "",
    "High": "",
    "Low": "",
    "PE": "",
    "GL": "",
    "OldGL": "",
    "MktValue": "",
    "DivPercent": "",
    "DivDollar": "",
    "Amt": "",
    "DivDate": "",
    "SymbolDescription": ""
}

var gsFieldColSpanWLCell = {
    "Symbol": "",
    "Qty": "",
    "Price": "",
    "ChgDollar": "",
    "ChgPercent": "",
    "Bid": "",
    "Ask": "",
    "DayGain": "colspan=\"2\"",
    "GainDollar": "colspan=\"2\"",
    "GainPercent": "",
    "CostPerShare": "",
    "PurchaseDate": "",
    "GL": "",
    "MktValue": "",
    "DivPercent": "",
    "DivDollar": "",
    "Amt": "",
    "DivDate": ""
}

var gsFieldColSpanWLCellDiv = {
    "Symbol": "",
    "Qty": "",
    "Price": "",
    "ChgDollar": "",
    "ChgPercent": "",
    "Bid": "",
    "Ask": "",
    "DayGain": "",
    "GainDollar": "",
    "GainPercent": "",
    "CostPerShare": "colspan=\"3\"",
    "PurchaseDate": "",
    "GL": "colspan=\"4\"",
    "MktValue": "colspan=\"4\"",
    "DivPercent": "",
    "DivDollar": "",
    "Amt": "",
    "DivDate": ""
}

//Status 	Action 	Quantity  Symbol 	Type 	Price  Act.Price  Time-in-Force  Opened Closed
var gsFieldWidthsWLO = {
    "Status": "width:130px;",
    "Action": "width:70px;",
    "Quantity": "width:70px;",
    "Symbol": "width:90px;",
    "Type": "width:90px;",
    "Price": "width:60px;",
    "ActPrice": "width:70px;",
    "Time-in-Force": "width:100px;",
    "Opened": "width:130px;",
    "OpenedCell": "width:140px;",
    "Closed": "width:130px;",
    "ClosedCell": "width:140px;"
}

//Action 	Quantity  Symbol 	Order Type 	Price  Activation  Time-in-Force  Created Bid Ask
var gsFieldWidthsWLSO = {
    "Action": "width:70px;",
    "Quantity": "width:70px;",
    "Symbol": "width:90px;",
    "OrderType": "width:140px;",
    "Price": "width:60px;",
    "ActPrice": "width:70px;",
    "Time-in-Force": "width:100px;",
    "Created": "width:130px;",
    "CreatedCell": "width:140px;",
    "Bid": "width:60px;",
    "Ask": "width:60px;"
}

//const lengthsWLOGL = {
//    WLWidth: "500px",
//    WLWidthCell: "500px",
//    WLTitleWidth: 480,
//    WLDragXoffsetLeft: 20,
//    WLDragXoffsetRight: 450,
//    WLCloseTableWidth: 18
//}

const lengthsWLSO = {
    WLWidth: "920px",
    WLWidthCell: "930px",
    WLColOpenLabelWidth:  80,
    WLColOpenEntryWidth: 80,
    WLColAcquiredDateEntryWidth: 80,
    WLColTitleWidth: 480,
    WLColCloseLabelWidth: 110,
    WLColCloseEntryWidth: 60,
    WLDragXoffsetLeft: 220,
    WLDragXoffsetRight: 700,
    WLCol2Width: 18
}

const lengthsWLO = {
    WLWidth: "940px",
    WLWidthCell: "960px",
    WLColOpenLabelWidth: 80,
    WLColOpenEntryWidth: 110,
    WLColAcquiredDateEntryWidth: 80,
    WLColTitleWidth: 500,
    WLColCloseLabelWidth: 80,
    WLColCloseEntryWidth: 60,
    WLDragXoffsetLeft: 220,
    WLDragXoffsetRight: 700,
    WLCol2Width: 18
}

var gsBodyBackgroundColor = "#99CCFF";
var gsWLTableHeadingBackgroundColor = "#99CCFF";
var gsWLTableBackgroundColor = "#e8f4ff";
var gsWLTableOddRowBackgroundColor = "#ffffff";
var gsWLTableEvenRowBackgroundColor = "#e8f4ff";
var gsWLTableSelectedRowBackgroundColor = "#99CCFF";
//var gsWLTableBackgroundColor = "#ffffff";
//var gsWLTableOddRowBackgroundColor = "#ffffff";
//var gsWLTableEvenRowBackgroundColor = "#e8e9eb";

var gbShowingSelectWatchlists = false;

function Trade() {
    this.accountId = "";
    this.accountName = "";
    this.symbol = "";
    this.date = "";
    this.amount = 0.0;
    this.price = 0.0;
    this.cost = 0.0;
    this.netAmount = 0.0;
    this.fees = 0.0;
    this.divAmount = 0.0;
    this.transactionSubType = "";
    this.assetType = "";
    this.type = "";
    this.cusip = "";
    this.rFee = 0.0;
    this.transactionId = "";
}
var gTrades = new Array(); //collection of Trade objects
var gTradesAuto = new Array(); //collection of Trade objects used to update the Old G/L in a wastchlist
var gsLastStartDate = "";
var gsLastEndDate = "";
var gsStartDates = new Array();
var gsEndDates = new Array();

function GetTradesContext() {
    this.sServerUrlBase = "";
    this.sServerUrlBaseAllSymbols = "";
    this.sStartDate = ""; //just date
    this.sEndDate = ""; //just date
    this.iEndDate = 0; //sEndDate with seconds
    this.iLastUpdateDateTime = 0; //sStartDate with seconds
    this.bUseOnlySelectAccount = false;
    this.sFilter = ""; //will contain <span>&nbsp;(Filter - account name)</span>
    this.OldGLAccountId = "";
    this.OldGLAccountName = "";

    this.sSymbolToLookup = "";
    this.sSymbolsToLookupTmp = "";

    this.sSymbolsToLookup = "";
    this.sSymbolsToLookupServer = "";

    this.bEndDateISTodaysDate = false;
    this.idxDatesStart = 0;
    this.idxStart = 0;

    this.bDoneGettingSymbolData = false;
    this.bNeedToAddSymbol = false;
    this.bOk = false;

    this.iProgressIncrement = 0;
}
var gGetTradesContext = new GetTradesContext();
var gGetTradesContextAuto = new GetTradesContext();

function TDOrder() {
    this.bProcessed = false;
    this.sError = "";
    this.iRetryCnt = 0;
    this.symbol = "";
    this.a00complexOrderStrategyTypeStart = "{ ";
    this.a01complexOrderStrategyType = "\"complexOrderStrategyType\": \"NONE\", ";
    this.a02orderType = "\"orderType\": "; //"MARKET", "LIMIT", or "TRAILING_STOP" followed by a comma
    this.a02Aprice = "\"price\": "; //the price as a dollar amount in quotes followed by a comma
    this.a03Asession = "\"session\": \"NORMAL\", ";
    this.a03AsessionSeamless = "\"session\": \"SEAMLESS\", ";
    this.a03BstopPriceLinkBasis = "\"stopPriceLinkBasis\": \"MARK\", ";
    this.a03CstopPriceLinkType = "\"stopPriceLinkType\": \"PERCENT\", ";
    this.a03DstopPriceOffset = "\"stopPriceOffset\": "; //a number from 1 to 100 followed by a comma
    this.a03EstopType = "\"stopType\": \"MARK\", ";
    this.a03FcancelTime = "\"cancelTime\": "; //as yyyy-mm-dd - 4 months from now followed by a comma
    this.a04duration = "\"duration\": "; //either "DAY" or "GOOD_TILL_CANCEL" followed by a comma
    this.a05orderStrategyType = "\"orderStrategyType\": \"SINGLE\", ";
    this.a06orderLegCollectionStart = "\"orderLegCollection\": [";
    this.a07instructionStart = "{\"instruction\": "; //"BUY" or "SELL" followed by a comma
    this.a08quantity = "\"quantity\": "; //a number followed by a comma
    this.a09instrumentStart = "\"instrument\": {";
    this.a10symbol = "\"symbol\": "; //like "XYZ" followed by a comma
    this.a11assetType = "\"assetType\": \"EQUITY\"";
    this.a12instrumentEnd = " }";
    this.a13instructionEnd = " }";
    this.a14orderLegCollectionEnd = " ]";
    this.a15complexOrderStrategyTypeEnd = " }";
}
var gTDOrders = new Array();

function TDSavedOrder() {
    this.bProcessed = false;
    this.sError = "";
    this.iRetryCnt = 0;
    this.symbol = "";
    this.orderType = "";
    this.instruction = "";
    this.a00complexOrderStrategyTypeStart = "{ ";
    this.a01complexOrderStrategyType = "\"complexOrderStrategyType\": \"NONE\", ";
    this.a02orderType = "\"orderType\": "; //"MARKET", "LIMIT", or "TRAILING_STOP" followed by a comma
    this.a02Aprice = "\"price\": "; //the price as a dollar amount in quotes followed by a comma
    this.a03Asession = "\"session\": \"NORMAL\", ";
    this.a03AsessionSeamless = "\"session\": \"SEAMLESS\", ";
    this.a03BstopPriceLinkBasis = "\"stopPriceLinkBasis\": \"MARK\", ";
    this.a03CstopPriceLinkType = "\"stopPriceLinkType\": \"PERCENT\", ";
    this.a03DstopPriceOffset = "\"stopPriceOffset\": "; //a number from 1 to 100 followed by a comma
    this.a03EstopType = "\"stopType\": \"MARK\", ";
    this.a03FcancelTime = "\"cancelTime\": "; //as yyyy-mm-dd - 4 months from now followed by a comma
    this.a04duration = "\"duration\": "; //either "DAY" or "GOOD_TILL_CANCEL" followed by a comma
    this.a05orderStrategyType = "\"orderStrategyType\": \"SINGLE\", ";
    this.a06orderLegCollectionStart = "\"orderLegCollection\": [";
    this.a07instructionStart = "{\"instruction\": "; //"BUY" or "SELL" followed by a comma
    this.a08quantity = "\"quantity\": "; //a number followed by a comma
    this.a09instrumentStart = "\"instrument\": {";
    this.a10symbol = "\"symbol\": "; //like "XYZ" followed by a comma
    this.a11assetType = "\"assetType\": \"EQUITY\"";
    this.a12instrumentEnd = " }";
    this.a13instructionEnd = " }";
    this.a14orderLegCollectionEnd = " ]";
    this.a15complexOrderStrategyTypeEnd = " }";
    this.savedOrderId = 0;
}

function TDCancelOrder() {
    this.bProcessed = false;
    this.sError = "";
    this.iRetryCnt = 0;
    this.orderId = 0;
}


var gbDoingCreateOrders = false;

function TDWLOrder() {
    this.bProcessed = false;
    this.bDoingAddNewSymbols = false;
    this.bDoingPurchasedDateClear = false;
    this.bDoingPurchasedDateUpdate = false;
    this.bDoingCreateWL = false;
    this.bDoingDeleteWL = false;
    this.bDoingHide = false;
    this.bDoingUnHide = false;
    this.sWLId = "";
    this.sWLName = "";
    this.sequenceId = "";
    this.sError = "";
    this.iRetryCnt = 0;
    this.symbol = "";
    this.symbolDescription = "";
    this.aWL00Start = "{ ";
    this.aWL01name = "\"name\": "; //watchlist name "wl name" followed by a comma
    this.aWL02watchlistId = "\"watchlistId\": "; //watchlist id like "1577682940" followed by a comma
    this.aWL03watchlistItemsStart = "\"watchlistItems\": [ ";
    this.aWL03watchlistItemStart = "{";
    this.aWL04sequenceId = "\"sequenceId\": "; //a number followed by a comma - only used when closing a symbol
    this.aWL05Aquantity = "\"quantity\": "; //will contain the start date in milliseconds used to update the Old G/L - need to add 5 zeros to the end
    this.aWL05quantity = "\"quantity\": 0, ";
    this.aWL06AaveragePrice = "\"averagePrice\": "; //will contain the date in milliseconds that the Old G/L was updated - need to add 5 zeros to the end
    this.aWL06averagePrice = "\"averagePrice\": 0, ";
    this.aWL07commission = "\"commission\": "; //a money amount like 123.54 followed by a comma - set to commission when closing, 0 when adding
    this.aWL07purchasedDate = "\"purchasedDate\": "; //like "2021-02-01" followed by a comma
    this.aWL08instrumentStart = "\"instrument\": {";
    this.aWL09symbol = "\"symbol\": "; //like "XYZ" followed by a comma
    this.aWL10assetType = "\"assetType\": \"EQUITY\"";
    this.aWL11instrumentEnd = " }";
    this.aWL12watchlistItemEnd = " }";
    this.aWL12watchlistItemsEnd = " ]";
    this.aWL13end = " }";
}
var gTDWLOrders = new Array();
var gTDWLOrdersDeleteWL = new Array();
var gsWLAutoGLUpdateNoAccountError = "No trades found.";

function TDOrderSummary() {
    this.symbol = "";
    this.shares = 0;
}

var giTDPostOrderRetryCnt = 0;

var gPriceMinutes = new Array(); //collection innerHTML strings for last set of price data for each symbol

var gsLastError = "";
var gsLastErrors = new Array();
var gsAllSuccess = new Array();
var gbDoResetWatchlists = false;
var gbDoingGetTrades = false;
var gbStopGetTrades = false;
var gbWLShowAllAccountsForSymbol = false;

//socket variables
var gLoginRequest;
var gQuoteRequest;
var gbLoggedIn = false;
var mySock = new Array();
var gimySockIdx = -1;
var gsSysmbolsThatNeedQuotes = "";
var giRequestId = 0;

var oDBAllData;
/*
 	`WLName` varchar(30) NOT NULL,
	`WLAccountName` varchar(30) NOT NULL,
	`SaveDate` varchar(30) NOT NULL,
	`Symbol` varchar(20) NOT NULL,
	`WLAccountID` varchar(30) NOT NULL,
	`SymbolDescription` varchar(50) NULL,
	`SymbolAcquiredDate` varchar(50) NULL,
	`Viewable` int NULL,

 */

var oACC;
/*-----------------------------------------------------------------------
[
//Account:
{
  "securitiesAccount": "The type <securitiesAccount> has the following subclasses [MarginAccount, CashAccount] descriptions are listed below"
}
]
 
//The class <securitiesAccount> has the
//following subclasses:
//-MarginAccount
//-CashAccount
//JSON for each are listed below:
 
//MarginAccount:
{
  "type": "'CASH' or 'MARGIN'",
  "accountId": "string",
  "roundTrips": 0,
  "isDayTrader": false,
  "isClosingOnlyRestricted": false,
  "positions": [
    {
      "shortQuantity": 0,
      "averagePrice": 0,
      "currentDayProfitLoss": 0,
      "currentDayProfitLossPercentage": 0,
      "longQuantity": 0,
      "settledLongQuantity": 0,
      "settledShortQuantity": 0,
      "agedQuantity": 0,
      "instrument": "The type <Instrument> has the following subclasses [Equity, FixedIncome, MutualFund, CashEquivalent, Option] descriptions are listed below\"",
      "marketValue": 0
    }
  ],
  "orderStrategies": [
    {
      "session": "'NORMAL' or 'AM' or 'PM' or 'SEAMLESS'",
      "duration": "'DAY' or 'GOOD_TILL_CANCEL' or 'FILL_OR_KILL'",
      "orderType": "'MARKET' or 'LIMIT' or 'STOP' or 'STOP_LIMIT' or 'TRAILING_STOP' or 'MARKET_ON_CLOSE' or 'EXERCISE' or 'TRAILING_STOP_LIMIT' or 'NET_DEBIT' or 'NET_CREDIT' or 'NET_ZERO'",
      "cancelTime": {
        "date": "string",
        "shortFormat": false
      },
      "complexOrderStrategyType": "'NONE' or 'COVERED' or 'VERTICAL' or 'BACK_RATIO' or 'CALENDAR' or 'DIAGONAL' or 'STRADDLE' or 'STRANGLE' or 'COLLAR_SYNTHETIC' or 'BUTTERFLY' or 'CONDOR' or 'IRON_CONDOR' or 'VERTICAL_ROLL' or 'COLLAR_WITH_STOCK' or 'DOUBLE_DIAGONAL' or 'UNBALANCED_BUTTERFLY' or 'UNBALANCED_CONDOR' or 'UNBALANCED_IRON_CONDOR' or 'UNBALANCED_VERTICAL_ROLL' or 'CUSTOM'",
      "quantity": 0,
      "filledQuantity": 0,
      "remainingQuantity": 0,
      "requestedDestination": "'INET' or 'ECN_ARCA' or 'CBOE' or 'AMEX' or 'PHLX' or 'ISE' or 'BOX' or 'NYSE' or 'NASDAQ' or 'BATS' or 'C2' or 'AUTO'",
      "destinationLinkName": "string",
      "releaseTime": "string",
      "stopPrice": 0,
      "stopPriceLinkBasis": "'MANUAL' or 'BASE' or 'TRIGGER' or 'LAST' or 'BID' or 'ASK' or 'ASK_BID' or 'MARK' or 'AVERAGE'",
      "stopPriceLinkType": "'VALUE' or 'PERCENT' or 'TICK'",
      "stopPriceOffset": 0,
      "stopType": "'STANDARD' or 'BID' or 'ASK' or 'LAST' or 'MARK'",
      "priceLinkBasis": "'MANUAL' or 'BASE' or 'TRIGGER' or 'LAST' or 'BID' or 'ASK' or 'ASK_BID' or 'MARK' or 'AVERAGE'",
      "priceLinkType": "'VALUE' or 'PERCENT' or 'TICK'",
      "price": 0,
      "taxLotMethod": "'FIFO' or 'LIFO' or 'HIGH_COST' or 'LOW_COST' or 'AVERAGE_COST' or 'SPECIFIC_LOT'",
      "orderLegCollection": [
        {
          "orderLegType": "'EQUITY' or 'OPTION' or 'INDEX' or 'MUTUAL_FUND' or 'CASH_EQUIVALENT' or 'FIXED_INCOME' or 'CURRENCY'",
          "legId": 0,
          "instrument": "\"The type <Instrument> has the following subclasses [Equity, FixedIncome, MutualFund, CashEquivalent, Option] descriptions are listed below\"",
          "instruction": "'BUY' or 'SELL' or 'BUY_TO_COVER' or 'SELL_SHORT' or 'BUY_TO_OPEN' or 'BUY_TO_CLOSE' or 'SELL_TO_OPEN' or 'SELL_TO_CLOSE' or 'EXCHANGE'",
          "positionEffect": "'OPENING' or 'CLOSING' or 'AUTOMATIC'",
          "quantity": 0,
          "quantityType": "'ALL_SHARES' or 'DOLLARS' or 'SHARES'"
        }
      ],
      "activationPrice": 0,
      "specialInstruction": "'ALL_OR_NONE' or 'DO_NOT_REDUCE' or 'ALL_OR_NONE_DO_NOT_REDUCE'",
      "orderStrategyType": "'SINGLE' or 'OCO' or 'TRIGGER'",
      "orderId": 0,
      "cancelable": false,
      "editable": false,
      "status": "'AWAITING_PARENT_ORDER' or 'AWAITING_CONDITION' or 'AWAITING_MANUAL_REVIEW' or 'ACCEPTED' or 'AWAITING_UR_OUT' or 'PENDING_ACTIVATION' or 'QUEUED' or 'WORKING' or 'REJECTED' or 'PENDING_CANCEL' or 'CANCELED' or 'PENDING_REPLACE' or 'REPLACED' or 'FILLED' or 'EXPIRED'",
      "enteredTime": "string",
      "closeTime": "string",
      "tag": "string",
      "accountId": 0,
      "orderActivityCollection": [
        "\"The type <OrderActivity> has the following subclasses [Execution] descriptions are listed below\""
      ],
      "replacingOrderCollection": [
        {}
      ],
      "childOrderStrategies": [
        {}
      ],
      "statusDescription": "string"
    }
  ],
  "initialBalances": {
    "accruedInterest": 0,
    "availableFundsNonMarginableTrade": 0,
    "bondValue": 0,
    "buyingPower": 0,
    "cashBalance": 0,
    "cashAvailableForTrading": 0,
    "cashReceipts": 0,
    "dayTradingBuyingPower": 0,
    "dayTradingBuyingPowerCall": 0,
    "dayTradingEquityCall": 0,
    "equity": 0,
    "equityPercentage": 0,
    "liquidationValue": 0,
    "longMarginValue": 0,
    "longOptionMarketValue": 0,
    "longStockValue": 0,
    "maintenanceCall": 0,
    "maintenanceRequirement": 0,
    "margin": 0,
    "marginEquity": 0,
    "moneyMarketFund": 0,
    "mutualFundValue": 0,
    "regTCall": 0,
    "shortMarginValue": 0,
    "shortOptionMarketValue": 0,
    "shortStockValue": 0,
    "totalCash": 0,
    "isInCall": false,
    "unsettledCash": 0,
    "pendingDeposits": 0,
    "marginBalance": 0,
    "shortBalance": 0,
    "accountValue": 0
  },
  "currentBalances": {
    "accruedInterest": 0,
    "cashBalance": 0,
    "cashReceipts": 0,
    "longOptionMarketValue": 0,
    "liquidationValue": 0,
    "longMarketValue": 0,
    "moneyMarketFund": 0,
    "savings": 0,
    "shortMarketValue": 0,
    "pendingDeposits": 0,
    "availableFunds": 0,
    "availableFundsNonMarginableTrade": 0,
    "buyingPower": 0,
    "buyingPowerNonMarginableTrade": 0,
    "dayTradingBuyingPower": 0,
    "dayTradingBuyingPowerCall": 0,
    "equity": 0,
    "equityPercentage": 0,
    "longMarginValue": 0,
    "maintenanceCall": 0,
    "maintenanceRequirement": 0,
    "marginBalance": 0,
    "regTCall": 0,
    "shortBalance": 0,
    "shortMarginValue": 0,
    "shortOptionMarketValue": 0,
    "sma": 0,
    "mutualFundValue": 0,
    "bondValue": 0,
    "isInCall": false,
    "stockBuyingPower": 0,
    "optionBuyingPower": 0
  },
  "projectedBalances": {
    "accruedInterest": 0,
    "cashBalance": 0,
    "cashReceipts": 0,
    "longOptionMarketValue": 0,
    "liquidationValue": 0,
    "longMarketValue": 0,
    "moneyMarketFund": 0,
    "savings": 0,
    "shortMarketValue": 0,
    "pendingDeposits": 0,
    "availableFunds": 0,
    "availableFundsNonMarginableTrade": 0,
    "buyingPower": 0,
    "buyingPowerNonMarginableTrade": 0,
    "dayTradingBuyingPower": 0,
    "dayTradingBuyingPowerCall": 0,
    "equity": 0,
    "equityPercentage": 0,
    "longMarginValue": 0,
    "maintenanceCall": 0,
    "maintenanceRequirement": 0,
    "marginBalance": 0,
    "regTCall": 0,
    "shortBalance": 0,
    "shortMarginValue": 0,
    "shortOptionMarketValue": 0,
    "sma": 0,
    "mutualFundValue": 0,
    "bondValue": 0,
    "isInCall": false,
    "stockBuyingPower": 0,
    "optionBuyingPower": 0
  }
}
 
//OR
 
//CashAccount:
{
  "type": "'CASH' or 'MARGIN'",
  "accountId": "string",
  "roundTrips": 0,
  "isDayTrader": false,
  "isClosingOnlyRestricted": false,
  "positions": [
    {
      "shortQuantity": 0,
      "averagePrice": 0,
      "currentDayProfitLoss": 0,
      "currentDayProfitLossPercentage": 0,
      "longQuantity": 0,
      "settledLongQuantity": 0,
      "settledShortQuantity": 0,
      "agedQuantity": 0,
      "instrument": "\"The type <Instrument> has the following subclasses [Equity, FixedIncome, MutualFund, CashEquivalent, Option] descriptions are listed below\"",
      "marketValue": 0
    }
  ],
  "orderStrategies": [
    {
      "session": "'NORMAL' or 'AM' or 'PM' or 'SEAMLESS'",
      "duration": "'DAY' or 'GOOD_TILL_CANCEL' or 'FILL_OR_KILL'",
      "orderType": "'MARKET' or 'LIMIT' or 'STOP' or 'STOP_LIMIT' or 'TRAILING_STOP' or 'MARKET_ON_CLOSE' or 'EXERCISE' or 'TRAILING_STOP_LIMIT' or 'NET_DEBIT' or 'NET_CREDIT' or 'NET_ZERO'",
      "cancelTime": {
        "date": "string",
        "shortFormat": false
      },
      "complexOrderStrategyType": "'NONE' or 'COVERED' or 'VERTICAL' or 'BACK_RATIO' or 'CALENDAR' or 'DIAGONAL' or 'STRADDLE' or 'STRANGLE' or 'COLLAR_SYNTHETIC' or 'BUTTERFLY' or 'CONDOR' or 'IRON_CONDOR' or 'VERTICAL_ROLL' or 'COLLAR_WITH_STOCK' or 'DOUBLE_DIAGONAL' or 'UNBALANCED_BUTTERFLY' or 'UNBALANCED_CONDOR' or 'UNBALANCED_IRON_CONDOR' or 'UNBALANCED_VERTICAL_ROLL' or 'CUSTOM'",
      "quantity": 0,
      "filledQuantity": 0,
      "remainingQuantity": 0,
      "requestedDestination": "'INET' or 'ECN_ARCA' or 'CBOE' or 'AMEX' or 'PHLX' or 'ISE' or 'BOX' or 'NYSE' or 'NASDAQ' or 'BATS' or 'C2' or 'AUTO'",
      "destinationLinkName": "string",
      "releaseTime": "string",
      "stopPrice": 0,
      "stopPriceLinkBasis": "'MANUAL' or 'BASE' or 'TRIGGER' or 'LAST' or 'BID' or 'ASK' or 'ASK_BID' or 'MARK' or 'AVERAGE'",
      "stopPriceLinkType": "'VALUE' or 'PERCENT' or 'TICK'",
      "stopPriceOffset": 0,
      "stopType": "'STANDARD' or 'BID' or 'ASK' or 'LAST' or 'MARK'",
      "priceLinkBasis": "'MANUAL' or 'BASE' or 'TRIGGER' or 'LAST' or 'BID' or 'ASK' or 'ASK_BID' or 'MARK' or 'AVERAGE'",
      "priceLinkType": "'VALUE' or 'PERCENT' or 'TICK'",
      "price": 0,
      "taxLotMethod": "'FIFO' or 'LIFO' or 'HIGH_COST' or 'LOW_COST' or 'AVERAGE_COST' or 'SPECIFIC_LOT'",
      "orderLegCollection": [
        {
          "orderLegType": "'EQUITY' or 'OPTION' or 'INDEX' or 'MUTUAL_FUND' or 'CASH_EQUIVALENT' or 'FIXED_INCOME' or 'CURRENCY'",
          "legId": 0,
          "instrument": "\"The type <Instrument> has the following subclasses [Equity, FixedIncome, MutualFund, CashEquivalent, Option] descriptions are listed below\"",
          "instruction": "'BUY' or 'SELL' or 'BUY_TO_COVER' or 'SELL_SHORT' or 'BUY_TO_OPEN' or 'BUY_TO_CLOSE' or 'SELL_TO_OPEN' or 'SELL_TO_CLOSE' or 'EXCHANGE'",
          "positionEffect": "'OPENING' or 'CLOSING' or 'AUTOMATIC'",
          "quantity": 0,
          "quantityType": "'ALL_SHARES' or 'DOLLARS' or 'SHARES'"
        }
      ],
      "activationPrice": 0,
      "specialInstruction": "'ALL_OR_NONE' or 'DO_NOT_REDUCE' or 'ALL_OR_NONE_DO_NOT_REDUCE'",
      "orderStrategyType": "'SINGLE' or 'OCO' or 'TRIGGER'",
      "orderId": 0,
      "cancelable": false,
      "editable": false,
      "status": "'AWAITING_PARENT_ORDER' or 'AWAITING_CONDITION' or 'AWAITING_MANUAL_REVIEW' or 'ACCEPTED' or 'AWAITING_UR_OUT' or 'PENDING_ACTIVATION' or 'QUEUED' or 'WORKING' or 'REJECTED' or 'PENDING_CANCEL' or 'CANCELED' or 'PENDING_REPLACE' or 'REPLACED' or 'FILLED' or 'EXPIRED'",
      "enteredTime": "string",
      "closeTime": "string",
      "tag": "string",
      "accountId": 0,
      "orderActivityCollection": [
        "\"The type <OrderActivity> has the following subclasses [Execution] descriptions are listed below\""
      ],
      "replacingOrderCollection": [
        {}
      ],
      "childOrderStrategies": [
        {}
      ],
      "statusDescription": "string"
    }
  ],
  "initialBalances": {
    "accruedInterest": 0,
    "cashAvailableForTrading": 0,
    "cashAvailableForWithdrawal": 0,
    "cashBalance": 0,
    "bondValue": 0,
    "cashReceipts": 0,
    "liquidationValue": 0,
    "longOptionMarketValue": 0,
    "longStockValue": 0,
    "moneyMarketFund": 0,
    "mutualFundValue": 0,
    "shortOptionMarketValue": 0,
    "shortStockValue": 0,
    "isInCall": false,
    "unsettledCash": 0,
    "cashDebitCallValue": 0,
    "pendingDeposits": 0,
    "accountValue": 0
  },
  "currentBalances": {
    "accruedInterest": 0,
    "cashBalance": 0,
    "cashReceipts": 0,
    "longOptionMarketValue": 0,
    "liquidationValue": 0,
    "longMarketValue": 0,
    "moneyMarketFund": 0,
    "savings": 0,
    "shortMarketValue": 0,
    "pendingDeposits": 0,
    "cashAvailableForTrading": 0,
    "cashAvailableForWithdrawal": 0,
    "cashCall": 0,
    "longNonMarginableMarketValue": 0,
    "totalCash": 0,
    "shortOptionMarketValue": 0,
    "mutualFundValue": 0,
    "bondValue": 0,
    "cashDebitCallValue": 0,
    "unsettledCash": 0
  },
  "projectedBalances": {
    "accruedInterest": 0,
    "cashBalance": 0,
    "cashReceipts": 0,
    "longOptionMarketValue": 0,
    "liquidationValue": 0,
    "longMarketValue": 0,
    "moneyMarketFund": 0,
    "savings": 0,
    "shortMarketValue": 0,
    "pendingDeposits": 0,
    "cashAvailableForTrading": 0,
    "cashAvailableForWithdrawal": 0,
    "cashCall": 0,
    "longNonMarginableMarketValue": 0,
    "totalCash": 0,
    "shortOptionMarketValue": 0,
    "mutualFundValue": 0,
    "bondValue": 0,
    "cashDebitCallValue": 0,
    "unsettledCash": 0
  }
}
 
//The class <Instrument> has the
//following subclasses:
//-Equity
//-FixedIncome
//-MutualFund
//-CashEquivalent
//-Option
//JSON for each are listed below:
 
//Equity:
{
  "assetType": "'EQUITY' or 'OPTION' or 'INDEX' or 'MUTUAL_FUND' or 'CASH_EQUIVALENT' or 'FIXED_INCOME' or 'CURRENCY'",
  "cusip": "string",
  "symbol": "string",
  "description": "string"
}
 
//OR
 
//FixedIncome:
{
  "assetType": "'EQUITY' or 'OPTION' or 'INDEX' or 'MUTUAL_FUND' or 'CASH_EQUIVALENT' or 'FIXED_INCOME' or 'CURRENCY'",
  "cusip": "string",
  "symbol": "string",
  "description": "string",
  "maturityDate": "string",
  "variableRate": 0,
  "factor": 0
}
 
//OR
 
//MutualFund:
{
  "assetType": "'EQUITY' or 'OPTION' or 'INDEX' or 'MUTUAL_FUND' or 'CASH_EQUIVALENT' or 'FIXED_INCOME' or 'CURRENCY'",
  "cusip": "string",
  "symbol": "string",
  "description": "string",
  "type": "'NOT_APPLICABLE' or 'OPEN_END_NON_TAXABLE' or 'OPEN_END_TAXABLE' or 'NO_LOAD_NON_TAXABLE' or 'NO_LOAD_TAXABLE'"
}
 
//OR
 
//CashEquivalent:
{
  "assetType": "'EQUITY' or 'OPTION' or 'INDEX' or 'MUTUAL_FUND' or 'CASH_EQUIVALENT' or 'FIXED_INCOME' or 'CURRENCY'",
  "cusip": "string",
  "symbol": "string",
  "description": "string",
  "type": "'SAVINGS' or 'MONEY_MARKET_FUND'"
}
 
//OR
 
//Option:
{
  "assetType": "'EQUITY' or 'OPTION' or 'INDEX' or 'MUTUAL_FUND' or 'CASH_EQUIVALENT' or 'FIXED_INCOME' or 'CURRENCY'",
  "cusip": "string",
  "symbol": "string",
  "description": "string",
  "type": "'VANILLA' or 'BINARY' or 'BARRIER'",
  "putCall": "'PUT' or 'CALL'",
  "underlyingSymbol": "string",
  "optionMultiplier": 0,
  "optionDeliverables": [
    {
      "symbol": "string",
      "deliverableUnits": 0,
      "currencyType": "'USD' or 'CAD' or 'EUR' or 'JPY'",
      "assetType": "'EQUITY' or 'OPTION' or 'INDEX' or 'MUTUAL_FUND' or 'CASH_EQUIVALENT' or 'FIXED_INCOME' or 'CURRENCY'"
    }
  ]
}
 
//The class <OrderActivity> has the
//following subclasses:
//-Execution
//JSON for each are listed below:
 
//Execution:
{
  "activityType": "'EXECUTION' or 'ORDER_ACTION'",
  "executionType": "'FILL'",
  "quantity": 0,
  "orderRemainingQuantity": 0,
  "executionLegs": [
    {
      "legId": 0,
      "quantity": 0,
      "mismarkedQuantity": 0,
      "price": 0,
      "time": "string"
    }
  ]
}
end oACC -------------------------------------------------------------------------*/

var oACCP;
/*-------------------------------------------------------------------------------
//UserPrincipal:
{
  "authToken": "string",
  "userId": "string",
  "userCdDomainId": "string",
  "primaryAccountId": "string",
  "lastLoginTime": "string",
  "tokenExpirationTime": "string",
  "loginTime": "string",
  "accessLevel": "string",
  "stalePassword": false,
  "streamerInfo": {
    "streamerBinaryUrl": "string",
    "streamerSocketUrl": "string",
    "token": "string",
    "tokenTimestamp": "string",
    "userGroup": "string",
    "accessLevel": "string",
    "acl": "string",
    "appId": "string"
  },
  "professionalStatus": "'PROFESSIONAL' or 'NON_PROFESSIONAL' or 'UNKNOWN_STATUS'",
  "quotes": {
    "isNyseDelayed": false,
    "isNasdaqDelayed": false,
    "isOpraDelayed": false,
    "isAmexDelayed": false,
    "isCmeDelayed": false,
    "isIceDelayed": false,
    "isForexDelayed": false
  },
  "streamerSubscriptionKeys": {
    "keys": [
      {
        "key": "string"
      }
    ]
  },
  "accounts": [
    {
      "accountId": "string",
      "description": "string",
      "displayName": "string",
      "accountCdDomainId": "string",
      "company": "string",
      "segment": "string",
      "surrogateIds": "object",
      "preferences": {
        "expressTrading": false,
        "directOptionsRouting": false,
        "directEquityRouting": false,
        "defaultEquityOrderLegInstruction": "'BUY' or 'SELL' or 'BUY_TO_COVER' or 'SELL_SHORT' or 'NONE'",
        "defaultEquityOrderType": "'MARKET' or 'LIMIT' or 'STOP' or 'STOP_LIMIT' or 'TRAILING_STOP' or 'MARKET_ON_CLOSE' or 'NONE'",
        "defaultEquityOrderPriceLinkType": "'VALUE' or 'PERCENT' or 'NONE'",
        "defaultEquityOrderDuration": "'DAY' or 'GOOD_TILL_CANCEL' or 'NONE'",
        "defaultEquityOrderMarketSession": "'AM' or 'PM' or 'NORMAL' or 'SEAMLESS' or 'NONE'",
        "defaultEquityQuantity": 0,
        "mutualFundTaxLotMethod": "'FIFO' or 'LIFO' or 'HIGH_COST' or 'LOW_COST' or 'MINIMUM_TAX' or 'AVERAGE_COST' or 'NONE'",
        "optionTaxLotMethod": "'FIFO' or 'LIFO' or 'HIGH_COST' or 'LOW_COST' or 'MINIMUM_TAX' or 'AVERAGE_COST' or 'NONE'",
        "equityTaxLotMethod": "'FIFO' or 'LIFO' or 'HIGH_COST' or 'LOW_COST' or 'MINIMUM_TAX' or 'AVERAGE_COST' or 'NONE'",
        "defaultAdvancedToolLaunch": "'TA' or 'N' or 'Y' or 'TOS' or 'NONE' or 'CC2'",
        "authTokenTimeout": "'FIFTY_FIVE_MINUTES' or 'TWO_HOURS' or 'FOUR_HOURS' or 'EIGHT_HOURS'"
      },
      "acl": "string",
      "authorizations": {
        "apex": false,
        "levelTwoQuotes": false,
        "stockTrading": false,
        "marginTrading": false,
        "streamingNews": false,
        "optionTradingLevel": "'COVERED' or 'FULL' or 'LONG' or 'SPREAD' or 'NONE'",
        "streamerAccess": false,
        "advancedMargin": false,
        "scottradeAccount": false
      }
    }
  ]
}
end oACCP-------------------------------------------------------------------------------*/


var oMDQ;
var oMDQ2;
/*-------------------------------------------------------------------------------
[
 
 //Mutual Fund:
{
  "symbol": "string",
  "description": "string",
  "closePrice": 0,
  "netChange": 0,
  "totalVolume": 0,
  "tradeTimeInLong": 0,
  "exchange": "string",
  "exchangeName": "string",
  "digits": 0,
  "52WkHigh": 0,
  "52WkLow": 0,
  "nAV": 0,
  "peRatio": 0,
  "divAmount": 0,
  "divYield": 0,
  "divDate": "string",
  "securityStatus": "string"
}
 //Future:
{
  "symbol": "string",
  "bidPriceInDouble": 0,
  "askPriceInDouble": 0,
  "lastPriceInDouble": 0,
  "bidId": "string",
  "askId": "string",
  "highPriceInDouble": 0,
  "lowPriceInDouble": 0,
  "closePriceInDouble": 0,
  "exchange": "string",
  "description": "string",
  "lastId": "string",
  "openPriceInDouble": 0,
  "changeInDouble": 0,
  "futurePercentChange": 0,
  "exchangeName": "string",
  "securityStatus": "string",
  "openInterest": 0,
  "mark": 0,
  "tick": 0,
  "tickAmount": 0,
  "product": "string",
  "futurePriceFormat": "string",
  "futureTradingHours": "string",
  "futureIsTradable": false,
  "futureMultiplier": 0,
  "futureIsActive": false,
  "futureSettlementPrice": 0,
  "futureActiveSymbol": "string",
  "futureExpirationDate": "string"
}
 //Future Options:
{
  "symbol": "string",
  "bidPriceInDouble": 0,
  "askPriceInDouble": 0,
  "lastPriceInDouble": 0,
  "highPriceInDouble": 0,
  "lowPriceInDouble": 0,
  "closePriceInDouble": 0,
  "description": "string",
  "openPriceInDouble": 0,
  "netChangeInDouble": 0,
  "openInterest": 0,
  "exchangeName": "string",
  "securityStatus": "string",
  "volatility": 0,
  "moneyIntrinsicValueInDouble": 0,
  "multiplierInDouble": 0,
  "digits": 0,
  "strikePriceInDouble": 0,
  "contractType": "string",
  "underlying": "string",
  "timeValueInDouble": 0,
  "deltaInDouble": 0,
  "gammaInDouble": 0,
  "thetaInDouble": 0,
  "vegaInDouble": 0,
  "rhoInDouble": 0,
  "mark": 0,
  "tick": 0,
  "tickAmount": 0,
  "futureIsTradable": false,
  "futureTradingHours": "string",
  "futurePercentChange": 0,
  "futureIsActive": false,
  "futureExpirationDate": 0,
  "expirationType": "string",
  "exerciseType": "string",
  "inTheMoney": false
}
 //Index:
{
  "symbol": "string",
  "description": "string",
  "lastPrice": 0,
  "openPrice": 0,
  "highPrice": 0,
  "lowPrice": 0,
  "closePrice": 0,
  "netChange": 0,
  "totalVolume": 0,
  "tradeTimeInLong": 0,
  "exchange": "string",
  "exchangeName": "string",
  "digits": 0,
  "52WkHigh": 0,
  "52WkLow": 0,
  "securityStatus": "string"
}
 //Option:
{
  "symbol": "string",
  "description": "string",
  "bidPrice": 0,
  "bidSize": 0,
  "askPrice": 0,
  "askSize": 0,
  "lastPrice": 0,
  "lastSize": 0,
  "openPrice": 0,
  "highPrice": 0,
  "lowPrice": 0,
  "closePrice": 0,
  "netChange": 0,
  "totalVolume": 0,
  "quoteTimeInLong": 0,
  "tradeTimeInLong": 0,
  "mark": 0,
  "openInterest": 0,
  "volatility": 0,
  "moneyIntrinsicValue": 0,
  "multiplier": 0,
  "strikePrice": 0,
  "contractType": "string",
  "underlying": "string",
  "timeValue": 0,
  "deliverables": "string",
  "delta": 0,
  "gamma": 0,
  "theta": 0,
  "vega": 0,
  "rho": 0,
  "securityStatus": "string",
  "theoreticalOptionValue": 0,
  "underlyingPrice": 0,
  "uvExpirationType": "string",
  "exchange": "string",
  "exchangeName": "string",
  "settlementType": "string"
}
 //Forex:
{
  "symbol": "string",
  "bidPriceInDouble": 0,
  "askPriceInDouble": 0,
  "lastPriceInDouble": 0,
  "highPriceInDouble": 0,
  "lowPriceInDouble": 0,
  "closePriceInDouble": 0,
  "exchange": "string",
  "description": "string",
  "openPriceInDouble": 0,
  "changeInDouble": 0,
  "percentChange": 0,
  "exchangeName": "string",
  "digits": 0,
  "securityStatus": "string",
  "tick": 0,
  "tickAmount": 0,
  "product": "string",
  "tradingHours": "string",
  "isTradable": false,
  "marketMaker": "string",
  "52WkHighInDouble": 0,
  "52WkLowInDouble": 0,
  "mark": 0
}
 //ETF:
{
  "symbol": "string",
  "description": "string",
  "bidPrice": 0,
  "bidSize": 0,
  "bidId": "string",
  "askPrice": 0,
  "askSize": 0,
  "askId": "string",
  "lastPrice": 0,
  "lastSize": 0,
  "lastId": "string",
  "openPrice": 0,
  "highPrice": 0,
  "lowPrice": 0,
  "closePrice": 0,
  "netChange": 0,
  "totalVolume": 0,
  "quoteTimeInLong": 0,
  "tradeTimeInLong": 0,
  "mark": 0,
  "exchange": "string",
  "exchangeName": "string",
  "marginable": false,
  "shortable": false,
  "volatility": 0,
  "digits": 0,
  "52WkHigh": 0,
  "52WkLow": 0,
  "peRatio": 0,
  "divAmount": 0,
  "divYield": 0,
  "divDate": "string",
  "securityStatus": "string",
  "regularMarketLastPrice": 0,
  "regularMarketLastSize": 0,
  "regularMarketNetChange": 0,
  "regularMarketTradeTimeInLong": 0
}
 //Equity:
{
  "symbol": "string",           0
  "description": "string",
  "bidPrice": 0,                1
  "bidSize": 0,                 4
  "bidId": "string",            7
  "askPrice": 0,                2
  "askSize": 0,                 5
  "askId": "string",            6
  "lastPrice": 0,               3
  "lastSize": 0,                9
  "lastId": "string",           26
  "openPrice": 0,               28
  "highPrice": 0,               12
  "lowPrice": 0,                13
  "closePrice": 0,              15
  "netChange": 0,               29
  "totalVolume": 0,             8
  "quoteTimeInLong": 0,         50
  "tradeTimeInLong": 0,         51
  "mark": 0,                    49
  "exchange": "string",         16
  "exchangeName": "string",     39
  "marginable": false,          17
  "shortable": false,           18
  "volatility": 0,              24
  "digits": 0,                  27
  "52WkHigh": 0,                30
  "52WkLow": 0,                 31
  "peRatio": 0,                 32
  "divAmount": 0,               33
  "divYield": 0,                34
  "divDate": "string",          40
  "securityStatus": "string",   48
  "regularMarketLastPrice": 0,  43
  "regularMarketLastSize": 0,   44
  "regularMarketNetChange": 0,  47
  "regularMarketTradeTimeInLong": 0 52
}
]
end oMDQ -------------------------------------------------------------------------------*/

var oCMOGL;
var oCMWLToImport;
var oCMWL;
/*----------------------------------------------------------------------------------------
        [
        //Watchlist:
        {
          "name": "string",
          "watchlistId": "string",
          "accountId": "string",
          "status": "'UNCHANGED' or 'CREATED' or 'UPDATED' or 'DELETED'",
          "watchlistItems": [
            {
              "sequenceId": 0,
              "quantity": 0,
              "averagePrice": 0,
              "commission": 0,
              "purchasedDate": "DateParam\"",
              "instrument": {
                "symbol": "string",
                "description": "string",
                "assetType": "'EQUITY' or 'OPTION' or 'MUTUAL_FUND' or 'FIXED_INCOME' or 'INDEX'"
              },
              "status": "'UNCHANGED' or 'CREATED' or 'UPDATED' or 'DELETED'"
            }
          ]
        }
        ]
        end oCMWL --------------------------------------------------------------------------------*/

var oCMTemp1;
var oCMTemp;

var oCMOrders;
var oCMSavedOrders;
/*----------------------------------------------------------------------------------------
        [
            {
              "orderType": "MARKET",
              "session": "NORMAL",
              "duration": "DAY",
              "orderStrategyType": "SINGLE",
              "orderLegCollection": [
                {
                  "instruction": "Buy",
                  "quantity": 15,
                  "instrument": {
                    "symbol": "XYZ",
                    "assetType": "EQUITY"
                  }
                }
              ]
            }

            {
              "complexOrderStrategyType": "NONE",
              "orderType": "MARKET",
              "session": "NORMAL",
              "duration": "DAY",
              "orderStrategyType": "SINGLE",
              "orderLegCollection": [
                {
                  "instruction": "SELL",
                  "quantity": 10,
                  "instrument": {
                    "symbol": "XYZ",
                    "assetType": "EQUITY"
                  }
                }
              ]
            }


            {
            "session": "SEAMLESS",  //'NORMAL' or 'AM' or 'PM' or 'SEAMLESS'",
            "duration": "GOOD_TILL_CANCEL", //'DAY' or 'GOOD_TILL_CANCEL' 
            "orderType": "LIMIT", //"'MARKET' or 'LIMIT' or 'TRAILING_STOP' 
            "cancelTime": "2021-05-28",
            "complexOrderStrategyType": "NONE",
            "price": 45,
            "orderLegCollection": [
                {
                "orderLegType": "EQUITY",
                "legId": 1,
                "instrument": {
                    "assetType": "EQUITY",
                    "symbol": "CMBM"
                },
                "instruction": "SELL",
                "quantity": 100
                }
            ],
            "orderStrategyType": "SINGLE",
            "cancelable": true,
            "editable": true,
            "savedOrderId": 16623767,
            "savedTime": "2021-01-28T06:18:20+0000"
            }

            {
            "session": "NORMAL",
            "duration": "GOOD_TILL_CANCEL",
            "orderType": "TRAILING_STOP",
            "cancelTime": "2021-05-26",
            "complexOrderStrategyType": "NONE",
            "stopPriceLinkBasis": "MARK",
            "stopPriceLinkType": "PERCENT",
            "stopPriceOffset": 30,
            "stopType": "MARK",
            "orderLegCollection": [
                {
                "instrument": {
                    "assetType": "EQUITY",
                    "symbol": "JNUG"
                },
                "instruction": "SELL",
                "quantity": 2
                }
            ],
            "orderStrategyType": "SINGLE"
            }

        ]
        end oCMSavedOrders --------------------------------------------------------------------------------*/

//--------------------------------------------------------------------------


var DateDiff =
{
    inDays: function (d1, d2) {
        let t2 = d2.getTime();
        let t1 = d1.getTime();

        return parseInt((t2 - t1) / (24 * 3600 * 1000));
    },

    inWeeks: function (d1, d2) {
        let t2 = d2.getTime();
        let t1 = d1.getTime();

        return parseInt((t2 - t1) / (24 * 3600 * 1000 * 7));
    },

    inMonths: function (d1, d2) {
        let d1Y = d1.getFullYear();
        let d2Y = d2.getFullYear();
        let d1M = d1.getMonth();
        let d2M = d2.getMonth();

        return (d2M + 12 * d2Y) - (d1M + 12 * d1Y);
    },

    inYears: function (d1, d2) {
        return d2.getFullYear() - d1.getFullYear();
    }
}

//var dString = "May, 20, 1984";

//var d1 = new Date(dString);
//var d2 = new Date();

//document.write("<br />Number of <b>days</b> since "+dString+": "+DateDiff.inDays(d1, d2));
//document.write("<br />Number of <b>weeks</b> since "+dString+": "+DateDiff.inWeeks(d1, d2));
//document.write("<br />Number of <b>months</b> since "+dString+": "+DateDiff.inMonths(d1, d2));
//document.write("<br />Number of <b>years</b> since "+dString+": "+DateDiff.inYears(d1

function AddDiv(sSpanId, sDiv, iTop, iLeft) {
    if ((document.getElementById(sSpanId) == null) || (isUndefined(document.getElementById(sSpanId)))) {
        giZIndex++;
        let x = document.createElement("SPAN");                     // Create a <span> element
        x.id = sSpanId;
        x.style.left = iLeft.toString() + "px";
        x.style.top = iTop.toString() + "px";
        x.style.fontFamily = "Arial, Helvetica, sans-serif";
        x.style.fontSize = "10pt";
        x.style.position = "absolute";
        x.style.zIndex = giZIndex.toString();
        x.onclick = function () {
            if (!gbDoingCreateOrders) {
                giZIndex++;
                if ((document.getElementById(sSpanId) != null) && (!isUndefined(document.getElementById(sSpanId)))) {
                    document.getElementById(sSpanId).style.zIndex = giZIndex.toString();
                }
            }
        };
        x.innerHTML = sDiv;

        document.body.appendChild(x);
        drag_divPH(sSpanId);
    } else {
        document.getElementById(sSpanId).innerHTML = sDiv;
    }
}

function AddGraph(sCanvasId, sWidth, sHeight, sLeft, sTop) {
    //<canvas id="cvsDetail" width="300" height="300"></canvas>
    //<canvas id="myCanvas" width="200" height="100" style="border:1px solid #000000;"></canvas >
    let x = document.createElement("CANVAS");                     // Create a <canvas> element
    x.id = sCanvasId;
    x.width = sWidth;
    x.height = sHeight;
    x.style.left = sLeft + "px";
    x.style.top = sTop + "px";

    document.body.appendChild(x);

}

function AddWL(sAccountId, sAccountName) {
    let sReturn = "";

    let ilastUpdateDate = (new Date()).getTime();
    let s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "AddWLMain '" + sAccountId + "', 'New Watchlist', '" + sAccountName + "', '', " + ilastUpdateDate.toString() + ", '0', ''";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>True</returnsvalues>";
    s = s + "</command>";

    switch (PostWLHTTP(s, 1)) {
        case 0: //success
            {
                //should have new WLId in oCMTemp1
                if (oCMTemp1.length > 0) {
                    if (isUndefined(oCMTemp1[0].wlid)) {
                        sReturn = "Could not add New Watchlist";
                    } else {
                        let oWL = new WLWatchList();
                        oWL.accountId = sAccountId;
                        oWL.watchlistId = FormatIntegerNumber(oCMTemp1[0].wlid, 6, "0");
                        oWL.name = "New Watchlist";
                        oWL.defaultUpdateGLDate = "";
                        oWL.wllastupdatedate = ilastUpdateDate;
                        oWL.accountName = sAccountName;
                        oWL.bShared = false;
                        oWL.bSelected = true;
                        InitializeColumns(oWL, false);
                        WLSortColumns(0, oWL);
                        oWL.bViewable = false;

                        oWL.spanName = oWL.watchlistId + oWL.accountId;
                        wlAddDiv(oWL.spanName, "");

                        gWatchlists[gWatchlists.length] = oWL;
                    }
                } else {
                    sReturn = "Could not add New Watchlist" + gsLastError;
                }
                break;
            }
        default: //unknown error
            {
                sReturn = "Could not add New Watchlist" + gsLastError;
                break;
            }
    }
    return sReturn;
}

function AddWLDetailRecs(sWLID, sRecs) {

    //update/add the recs 
    s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "AddWLDetailFromList '" + sWLID + "', '" + sRecs + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>True</returnsvalues>";
    s = s + "</command>";

    let swlidRet = "";
    switch (PostWLHTTP(s, 1)) {
        case 0: //success
            {
                //should have new SymbolID in oCMTemp1
                if (oCMTemp1.length > 0) {
                    if (!isUndefined(oCMTemp1[0].wlid)) {
                        swlidRet = oCMTemp1[0].wlid;
                    }
                }
                break;
            }
        default: //unknown error
            {
                break;
            }
    }
    return swlidRet;
}

function AttemptOpen(xhttp, sWhereTo, bAsync) {
    let bOK = false;
    try {
        xhttp.open("POST", sWhereTo, bAsync);
        bOK = true;
    }
    catch (e) {
    }
    return (bOK);
}

function AttemptOpenDelete(xhttp, sWhereTo, bAsync) {
    let bOK = false;
    try {
        xhttp.open("DELETE", sWhereTo, bAsync);
        bOK = true;
    }
    catch (e) {
    }
    return (bOK);
}

function AttemptOpenGet(xhttp, sWhereTo, bAsync) {
    let bOK = false;
    try {
        xhttp.open("GET", sWhereTo, bAsync);
        bOK = true;
    }
    catch (e) {
    }
    return (bOK);
}

function AttemptOpenPatch(xhttp, sWhereTo, bAsync) {
    let bOK = false;
    try {
        xhttp.open("PATCH", sWhereTo, bAsync);
        bOK = true;
    }
    catch (e) {
    }
    return (bOK);
}

function BuildStartEndDates(sStartDateIn, sEndDateIn) {
    const iOffset = -300 * 60 * 1000; //EST UTC offset = -5 hours
    //sStartDate - yyyy-mm-dd, sEndDate - yyyy-mm-dd
    let sStartDate = sStartDateIn;
    let sEndDate = sEndDateIn;
    let bEndDateIsCurrentDate = false;
    //build start and end date sets - max of 1 year per set
    let vTmp = sStartDate.split("-");
    let sTmp = vTmp[1] + "/" + vTmp[2] + "/" + vTmp[0];
    let dStartDate = new Date(sTmp);
    vTmp = sEndDate.split("-");
    sTmp = vTmp[1] + "/" + vTmp[2] + "/" + vTmp[0];
    let dEndDate = new Date(sTmp);

    let dCurrentDate = new Date();
    vTmp = FormatDateForTD(dCurrentDate).split("-");
    sCurrentDate = vTmp[1] + "/" + vTmp[2] + "/" + vTmp[0];
    if ((new Date(dCurrentDate.getTime() + iOffset)).getUTCDate() != dCurrentDate.getDate()) {
        dCurrentDate = new Date(dCurrentDate.getTime() + iOffset);
        vTmp = FormatDateForTDESTUTC(dCurrentDate).split("-");
        sCurrentDate = vTmp[1] + "/" + vTmp[2] + "/" + vTmp[0];
    }
    dCurrentDate = new Date(sCurrentDate);

    if (dStartDate.getTime() > dEndDate.getTime()) {
        dStartDate = new Date(dEndDate.getTime());
        sStartDate = FormatDateForTD(dStartDate);
    }

    if (dStartDate.getTime() > dCurrentDate.getTime()) {
        dStartDate = new Date(dCurrentDate.getTime());
        sStartDate = FormatDateForTD(dStartDate);
    }

    if (dEndDate.getTime() > dCurrentDate.getTime()) {
        dEndDate = new Date(dCurrentDate.getTime());
        sEndDate = FormatDateForTD(dEndDate);
    }

    let iMonthRange = 1; //6/16/21 changed from 3 to 1 

    if (DateDiff.inDays(dEndDate, dCurrentDate) == 0) {
        bEndDateIsCurrentDate = true;
    }

    gsStartDates.length = 0;
    gsEndDates.length = 0;

    if (DateDiff.inMonths(dStartDate, dEndDate) >= iMonthRange) {
        let bDone = false;
        let dTmpEndDate = new Date(dStartDate);
        dTmpEndDate.setMonth(dTmpEndDate.getMonth() + iMonthRange);
        dTmpEndDate.setDate(dTmpEndDate.getDate() - 1);
        gsStartDates[gsStartDates.length] = FormatDateForTD(dStartDate);
        if (dTmpEndDate > dEndDate) {
            gsEndDates[gsEndDates.length] = FormatDateForTD(dEndDate);
        } else {
            gsEndDates[gsEndDates.length] = FormatDateForTD(dTmpEndDate);
        }
        while (!bDone) {
            dStartDate = new Date(dTmpEndDate);
            dStartDate.setDate(dStartDate.getDate() + 1);
            if (DateDiff.inMonths(dStartDate, dEndDate) >= iMonthRange) {
                dTmpEndDate = new Date(dStartDate);
                dTmpEndDate.setMonth(dTmpEndDate.getMonth() + iMonthRange);
                dTmpEndDate.setDate(dTmpEndDate.getDate() - 1);
                if (DateDiff.inDays(dTmpEndDate, dEndDate) < 0) {
                    gsStartDates[gsStartDates.length] = FormatDateForTD(dStartDate);
                    gsEndDates[gsEndDates.length] = FormatDateForTD(dEndDate);
                    bDone = true
                } else {
                    gsStartDates[gsStartDates.length] = FormatDateForTD(dStartDate);
                    gsEndDates[gsEndDates.length] = FormatDateForTD(dTmpEndDate);
                }
            } else if (DateDiff.inDays(dStartDate, dEndDate) < 0) {
                bDone = true;
            } else {
                gsStartDates[gsStartDates.length] = FormatDateForTD(dStartDate);
                gsEndDates[gsEndDates.length] = FormatDateForTD(dEndDate);
                bDone = true;
            }
        }
    } else {
        gsStartDates[gsStartDates.length] = sStartDate;
        gsEndDates[gsEndDates.length] = sEndDate;

    }
    return bEndDateIsCurrentDate;
}

function CancelKeyStroke(ev) {
    try {
        ev.keyCode = 0;
        ev.preventDefault();
        ev.cancelBubble = true;
        ev.returnValue = false;
        return (true);
    }
    catch (e) {
        return (false)
    }
}

function CancelOrders(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, idxOrderStart, sAccountId, iTryCountIn) {
    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    let iTryCount = iTryCountIn;
    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = 100 / gOrdersToCancel.length;
        gsLastErrors.length = 0;
        giTDPostOrderRetryCnt = 0;
        ShowProgress(true, false);
    }
    for (let idxOrder = idxOrderStart; idxOrder < gOrdersToCancel.length; idxOrder++) {
        if (giProgress < 100) {
            giProgress = giProgress + iProgressIncrement;
        }
        let oTDOrder = new TDCancelOrder();
        oTDOrder = gOrdersToCancel[idxOrder];
        if (!oTDOrder.bProcessed) {
            let sOrder = "";
            sOrder = oTDOrder.orderId;
            if (PostOCancel(sAccountId, sOrder) == 0) {
                //success
                iNumSuccess++;
                gOrdersToCancel[idxOrder].bProcessed = true;
                if (gOrdersToCancel[idxOrder].sError != "") {
                    iNumErrors--;
                }
                gOrdersToCancel[idxOrder].sError = "";
            } else {
                if (gsLastError.indexOf("Individual App's transactions per seconds restriction reached.") != -1) {
                    if (iTryCount < 3) {
                        iTryCount++;
                        giProgress = giProgress - 1;
                        window.setTimeout("CancelOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + idxOrder.toString() + ", '" + sAccountId + "'," + iTryCount.toString() + ")", 3000);
                        return;
                    } else {
                        // an error occurred
                        iNumErrors++;
                        gOrdersToCancel[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                    }
                } else {
                    // an error occurred
                    iNumErrors++;
                    gOrdersToCancel[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                }
            }
        }
        window.setTimeout("CancelOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (idxOrder + 1).toString() + ", '" + sAccountId + "', 0)", 200);
        return;
    }
    let sMsg = iNumSuccess.toString() + " ";
    if ((iNumSuccess > 1) || (iNumSuccess == 0)){
        sMsg = sMsg + "orders canceled";
    } else {
        sMsg = sMsg + "order canceled";
    }
    if ((iNumErrors > 0) && (giTDPostOrderRetryCnt < 3)) {
        giTDPostOrderRetryCnt++;
        giProgress = 0;
        window.setTimeout("CancelOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", 0, '" + sAccountId + "', 0)", 4000);
        return;
    } else {
        if (iNumErrors > 0) {
            sMsg = sMsg + " with the following errors: ";
            for (let idxOrder = 0; idxOrder < gOrdersToCancel.length; idxOrder++) {
                if (!gOrdersToDelete[idxOrder].bProcessed) {
                    sMsg = sMsg + gsCRLF + gOrdersToCancel[idxOrder].sError;
                }
            }
            alert(sMsg);
        } else {
            alert(sMsg);
        }
    }

    ShowProgress(false, true);
    gbDoingCreateOrders = false;
    SetDefault();
}

function ChangeColumnsSelected(idxWL) {

    let swlcolumnsselected = ""; //will be column name|column name for all of the selected columns
    let swlcolumnsselectedsep = "";
    if (gWatchlists[idxWL].wlcolumnsselected != null) {
        for (let key in gWatchlists[idxWL].wlcolumnsselected) {
            if (gWatchlists[idxWL].wlcolumnsselected.hasOwnProperty(key)) {
                bSelected = gWatchlists[idxWL].wlcolumnsselected[key].selected;
                if (bSelected) { // should look like: name|sortorder|sortable|initsort|asc/desc>>name|sortorder|sortable|initsort|asc/desc
                    swlcolumnsselected = swlcolumnsselected + swlcolumnsselectedsep +
                        gWatchlists[idxWL].wlcolumnsselected[key].name + "|" +
                        gWatchlists[idxWL].wlcolumnsselected[key].sortorder.toString() + "|" +
                        (gWatchlists[idxWL].wlcolumnsselected[key].sortable ? "1" : "0") + "|" +
                        (gWatchlists[idxWL].wlcolumnsselected[key].sortonthisfield ? "1" : "0") + "|" +
                        gWatchlists[idxWL].wlcolumnsselected[key].sortascdesc.toString();
                    swlcolumnsselectedsep = ">>"
                }
            }
        }
    }

    let s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "UpdateWLColumnsSelected '" + gWatchlists[idxWL].watchlistId + "','" + swlcolumnsselected + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>False</returnsvalues>";
    s = s + "</command>";

    switch (PostWLHTTP(s, 0)) {
        case 0: //success
        case 4: //responsetext == ""
        case 5: //responsetext == null
            {
                break;
            }
        default: //unknown error
            {
                alert(gsLastError);
            }
    }
}

function ChangeShareIcon(idxWL) {
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    if (!isUndefined(document.getElementById("IconShare" + sThisId))) {

        let s = "<?xml version=\"1.0\"?>" + "\r\n";
        s = s + "<command><commandtext>";
        s = s + "UpdateWLViewable '" + gWatchlists[idxWL].watchlistId + "','" + (gWatchlists[idxWL].bViewable ? 1 : 0).toString() + "'";
        s = s + "</commandtext>";
        s = s + "<returnsvalues>False</returnsvalues>";
        s = s + "</command>";

        switch (PostWLHTTP(s, 0)) {
            case 0: //success
            case 4: //responsetext == ""
            case 5: //responsetext == null
                {
                    if (gWatchlists[idxWL].bViewable) {
                        document.getElementById("IconShare" + sThisId).src = gksWLIconUnShare;
                        document.getElementById("IconShare" + sThisId).title = gksWLIconUnShareTitle;
                    } else {
                        document.getElementById("IconShare" + sThisId).src = gksWLIconShare;
                        document.getElementById("IconShare" + sThisId).title = gksWLIconShareTitle;
                    }
                    break;
                }
            default: //unknown error
                {
                    alert(gsLastError);
                }
        }
    }

}

function ChangeWLName(idxWL, sName) {
    let s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "UpdateWLName '" + gWatchlists[idxWL].watchlistId + "','" + sName + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>False</returnsvalues>";
    s = s + "</command>";

    switch (PostWLHTTP(s, 0)) {
        case 0: //success
        case 4: //responsetext == ""
        case 5: //responsetext == null
            {
                gWatchlists[idxWL].name = sName;
                if (gWatchlists[idxWL].spanName != "") {
                    if (document.getElementById(gWatchlists[idxWL].spanName).innerHTML != "") {
                        gWatchlists[idxWL].wlcolumnsselectedtemp[gsSortOrderFields.Symbol] = clone(gsWLColumnsAll[gsSortOrderFields.Symbol]);
                        //document.getElementById(gWatchlists[idxWL].spanName).innerHTML = "";
                    }
                }
                break;
            }
        default: //unknown error
            {
                alert(gsLastError);
                break;
            }
    }

    gbDoingCreateOrders = false;
    DoGetTDData();
    SetDefault();
}

function CheckHTTPOpen(xhttp, sWhereTo, sErrorMsg, bAsync) {
    let bDone = false;
    let iTryCount = 0;
    let bReturnVal = false;
    while (!bDone) {
        if (!AttemptOpen(xhttp, sWhereTo, bAsync)) {
            if (iTryCount < 5) {
                iTryCount = iTryCount + 1;
            }
            else {
                alert(sErrorMsg);
                bDone = true;
            }
        }
        else {
            bDone = true;
            bReturnVal = true;
        }
    }
    return (bReturnVal);
}

function CheckHTTPOpenDelete(xhttp, sWhereTo, sErrorMsg, bAsync) {
    let bDone = false;
    let iTryCount = 0;
    let bReturnVal = false;
    while (!bDone) {
        if (!AttemptOpenDelete(xhttp, sWhereTo, bAsync)) {
            if (iTryCount < 5) {
                iTryCount = iTryCount + 1;
            }
            else {
                alert(sErrorMsg);
                bDone = true;
            }
        }
        else {
            bDone = true;
            bReturnVal = true;
        }
    }
    return (bReturnVal);
}

function CheckHTTPOpenGet(xhttp, sWhereTo, sErrorMsg, bAsync) {
    let bDone = false;
    let iTryCount = 0;
    let bReturnVal = false;
    while (!bDone) {
        if (!AttemptOpenGet(xhttp, sWhereTo, bAsync)) {
            if (iTryCount < 5) {
                iTryCount = iTryCount + 1;
            }
            else {
                alert(sErrorMsg);
                bDone = true;
            }
        }
        else {
            bDone = true;
            bReturnVal = true;
        }
    }
    return (bReturnVal);
}

function CheckHTTPOpenPatch(xhttp, sWhereTo, sErrorMsg, bAsync) {
    let bDone = false;
    let iTryCount = 0;
    let bReturnVal = false;
    while (!bDone) {
        if (!AttemptOpenPatch(xhttp, sWhereTo, bAsync)) {
            if (iTryCount < 5) {
                iTryCount = iTryCount + 1;
            }
            else {
                alert(sErrorMsg);
                bDone = true;
            }
        }
        else {
            bDone = true;
            bReturnVal = true;
        }
    }
    return (bReturnVal);
}

function checkTDAPIError(oCM) {
    //returns:
    //  0 - no error
    //  1 - access token expired
    //  2 - some other error occurred
    let iReturn = 0;
    if (oCM["error"] != null) {
        if (oCM.error == "The access token being passed has expired or is invalid.") {
            iReturn = 1;
        } else {
            iReturn = 2;
        }
        showTDAPIError(oCM.error);
    }
    return iReturn;
}

function checkTDAPIErrorNoErrorDisplayed(oCM) {
    //returns:
    //  0 - no error
    //  1 - access token expired
    //  2 - some other error occurred
    let iReturn = 0;
    if (oCM["error"] != null) {
        if (oCM.error == "The access token being passed has expired or is invalid.") {
            iReturn = 1;
        } else {
            iReturn = 2;
        }
    }
    return iReturn;
}

function chkIndexChanged(ev) {
    if (ev.currentTarget.id == "chkIndexOther") {
        if (document.getElementById("chkIndexOther").checked) {
            document.getElementById("spanIndexes").style.display = "block";
        } else {
            document.getElementById("spanIndexes").style.display = "none";
        }
        MoveDivs(document.getElementById("chkIndexOther").checked);
    }
}

function ClearAllWLInputFields(idxWL, bAddStartDateToNameIn) {
    let bAddStartDateToName = false;
    if (!isUndefined(bAddStartDateToNameIn)) {
        bAddStartDateToName = bAddStartDateToNameIn;
    }
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    if (!(document.getElementById("txtWLpercent" + sThisId) == null)) {
        document.getElementById("txtWLpercent" + sThisId).value = "";
    }
    if (!(document.getElementById("txtWLdollars" + sThisId) == null)) {
        document.getElementById("txtWLdollars" + sThisId).value = "";
    }
    if (!(document.getElementById("txtWLshares" + sThisId) == null)) {
        document.getElementById("txtWLshares" + sThisId).value = "";
    }
    if (!(document.getElementById("chkLimit" + sThisId) == null)) {
        document.getElementById("chkLimit" + sThisId).checked = false;
    }
    if (!(document.getElementById("chkSave" + sThisId) == null)) {
        document.getElementById("chkSave" + sThisId).checked = false;
    }
    if (!(document.getElementById("chkPlace" + sThisId) == null)) {
        document.getElementById("chkPlace" + sThisId).checked = false;
    }
    if (!(document.getElementById("txtwlopen" + sThisId) == null)) {
        document.getElementById("txtwlopen" + sThisId).value = "";
    }
    if (!(document.getElementById("txtwlopendesc" + sThisId) == null)) {
        document.getElementById("txtwlopendesc" + sThisId).value = "";
    }
    if (!(document.getElementById("txtwlclose" + sThisId) == null)) {
        if (!bAddStartDateToName) {
            document.getElementById("txtwlclose" + sThisId).value = "";
        }
    }
}

function ClearAllWLSelected(idxWL) {
    for (let idx = 0; idx < gWatchlists[idxWL].WLItems.length; idx++) {
        gWatchlists[idxWL].WLItems[idx].bSelectedForOrder = false;
    }
}

function clone(obj) {
    if (null == obj || "object" != typeof obj) return obj;
    var copy = obj.constructor();
    for (var attr in obj) {
        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
    }
    return copy;
}

function CollectDetailChanged(ev) {
    if (ev.srcElement.checked) {
        gbCollectDetail = true;
    } else {
        gbCollectDetail = false;
    }
}

function CopySelected(idxWL) {
    gWatchlistItemsToCopy.length = 0;
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
            gWatchlistItemsToCopy[gWatchlistItemsToCopy.length] = gWatchlists[idxWL].WLItems[idxWLItem];
            let oWLItemDetail = new WLItemDetail();
            oWLItemDetail = gWatchlists[idxWL].WLItems[idxWLItem].priceInfo;
            gWatchlistItemsToCopy[gWatchlistItemsToCopy.length - 1].priceInfo = oWLItemDetail;
        }
    }
}

function DeleteSymbol(sWhereFrom, sAccountIdIn, sSymbolIn, sWLIDIn) {
    /*sWhereFrom = 0 - delete from OldGL, 1 - delete from WL */
    let sAccountId = sAccountIdIn;
    let sSymbol = sSymbolIn;
    let sWLID = sWLIDIn;
    let sReturnValue = ""; //"0" - success, otherwise an error message

    switch (sWhereFrom) {
        case "0": //delete symbol from OldGL
            {
                //delete the symbol
                let s = "<?xml version=\"1.0\"?>" + "\r\n";
                s = s + "<command><commandtext>";
                s = s + "DeleteSymbol '" + sSymbol + "', '" +
                    sAccountId + "'";
                s = s + "</commandtext>";
                s = s + "<returnsvalues>True</returnsvalues>";
                s = s + "</command>";

                switch (PostWLHTTP(s, 1)) {
                    case 0: //success
                        {
                            if (oCMTemp1.length > 0) {
                                if (!isUndefined(oCMTemp1[0].returnvalue)) {
                                    if ((oCMTemp1[0].returnvalue == "0") || (oCMTemp1[0].returnvalue == "1")) {
                                        sReturnValue = "0";
                                    }
                                } else {
                                    sReturnValue = sSymbol + " cannot be deleted because it is contained in watchlists.";
                                }
                            }
                            break;
                        }
                    default: //unknown error
                        {
                            sReturnValue = gsLastError;
                            break;
                        }
                }
                break;
            }
        case "1": //delete detail record from WL
            {
                //delete the symbol
                let s = "<?xml version=\"1.0\"?>" + "\r\n";
                s = s + "<command><commandtext>";
                s = s + "DeleteWLDetail '" + sWLID + "', '" + sSymbol + "'";
                s = s + "</commandtext>";
                s = s + "<returnsvalues>True</returnsvalues>";
                s = s + "</command>";

                switch (PostWLHTTP(s, 1)) {
                    case 0: //success
                        {
                            if (oCMTemp1.length > 0) {
                                if (!isUndefined(oCMTemp1[0].returnvalue)) {
                                    if ((oCMTemp1[0].returnvalue == "0") || (oCMTemp1[0].returnvalue == "1")) {
                                        sReturnValue = "0";
                                    }
                                } else {
                                    sReturnValue = sSymbol + " cannot be deleted because it is contained in watchlists.";
                                }
                            }
                            break;
                        }
                    default: //unknown error
                        {
                            sReturnValue = gsLastError;
                            break;
                        }
                }
                break;
            }
        default:
            {
                sReturnValue = "Invalid sWhereFrom parameter.";
                break;
            }
    }
    return sReturnValue;
}

function DeleteSavedOrders(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, idxOrderStart, sAccountId, iTryCountIn, idxWL) {
    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    let iTryCount = iTryCountIn;
    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = 100 / gOrdersToDelete.length;
        gsLastErrors.length = 0;
        giTDPostOrderRetryCnt = 0;
        ShowProgress(true, false);
    }
    for (let idxOrder = idxOrderStart; idxOrder < gOrdersToDelete.length; idxOrder++) {
        if (giProgress < 100) {
            giProgress = giProgress + iProgressIncrement;
        }
        let oTDOrder = new TDSavedOrder();
        oTDOrder = gOrdersToDelete[idxOrder];
        if (!oTDOrder.bProcessed) {
            let sOrder = "";
            sOrder = oTDOrder.savedOrderId;
            if (PostSODelete(sAccountId, sOrder) == 0) {
                //success
                iNumSuccess++;
                gOrdersToDelete[idxOrder].bProcessed = true;
                if (gOrdersToDelete[idxOrder].sError != "") {
                    iNumErrors--;
                }
                gOrdersToDelete[idxOrder].sError = "";
            } else {
                if (gsLastError.indexOf("Individual App's transactions per seconds restriction reached.") != -1) {
                    if (iTryCount < 3) {
                        iTryCount++;
                        giProgress = giProgress - 1;
                        window.setTimeout("DeleteSavedOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + idxOrder.toString() + ", '" + sAccountId + "'," + iTryCount.toString() + ", " + idxWL.toString() + ")", 3000);
                        return;
                    } else {
                        // an error occurred
                        iNumErrors++;
                        gOrdersToDelete[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                    }
                } else {
                    // an error occurred
                    iNumErrors++;
                    gOrdersToDelete[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                }
            }
        }
        window.setTimeout("DeleteSavedOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (idxOrder + 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 200);
        return;
    }
    let sMsg = iNumSuccess.toString() + " saved  ";
    if (iNumSuccess > 1) {
        sMsg = sMsg + "orders deleted";
    } else {
        sMsg = sMsg + "order deleted";
    }
    if ((iNumErrors > 0) && (giTDPostOrderRetryCnt < 3)) {
        giTDPostOrderRetryCnt++;
        giProgress = 0;
        window.setTimeout("DeleteSavedOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", 0, '" + sAccountId + "', 0, " + idxWL.toString() + ")", 4000);
        return;
    } else {
        if (iNumErrors > 0) {
            sMsg = sMsg + " with the following errors: ";
            for (let idxOrder = 0; idxOrder < gOrdersToDelete.length; idxOrder++) {
                if (!gOrdersToDelete[idxOrder].bProcessed) {
                    sMsg = sMsg + gsCRLF + gOrdersToDelete[idxOrder].sError;
                }
            }
            alert(sMsg);
        } else {
            alert(sMsg);
        }
    }

    ShowProgress(false, true);
    gbDoingCreateOrders = false;
    SetDefault();
}

function DeleteWL(sWLIDIn) {
    let sWLID = sWLIDIn;
    let sReturnValue = ""; //"0" - success, otherwise an error message

    //delete the symbol
    let s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "DeleteWLMain '" + sWLID + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>True</returnsvalues>";
    s = s + "</command>";

    switch (PostWLHTTP(s, 1)) {
        case 0: //success
            {
                if (oCMTemp1.length > 0) {
                    if (!isUndefined(oCMTemp1[0].returnvalue)) {
                        if ((oCMTemp1[0].returnvalue == "0") || (oCMTemp1[0].returnvalue == "1")) {
                            sReturnValue = "0";
                        }
                    } else {
                        sReturnValue = "Cannot delete watchlist.";
                    }
                }
                break;
            }
        default: //unknown error
            {
                sReturnValue = gsLastError;
                break;
            }
    }

    return sReturnValue;
}

function DeleteWLDetailRecs(sWLID, sRecs) {

    //update/add the recs 
    s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "DeleteWLDetailFromList '" + sWLID + "', '" + sRecs + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>True</returnsvalues>";
    s = s + "</command>";

    let swlidRet = "";
    switch (PostWLHTTP(s, 1)) {
        case 0: //success
            {
                //should have new SymbolID in oCMTemp1
                if (oCMTemp1.length > 0) {
                    if (!isUndefined(oCMTemp1[0].wlid)) {
                        swlidRet = oCMTemp1[0].wlid;
                    }
                }
                break;
            }
        default: //unknown error
            {
                break;
            }
    }
    return swlidRet;
}

function DisableAllShow() {
    document.getElementById("chkShowIndexSelection").disabled = true;
    document.getElementById("chkShowIndexes").disabled = true;
    document.getElementById("chkShowTradeHistorySelection").disabled = true;
    document.getElementById("chkShowPriceHistorySelection").disabled = true;
}

function DoChangeIndexChange() {
    gbMarketShowChangePercentage = !gbMarketShowChangePercentage;
    for (let idxIndex = 0; idxIndex < gMarketIndexes.length; idxIndex++) {
        if (gbMarketShowChangePercentage) {
            if (gMarketIndexes[idxIndex].netPercentChangeInDouble < 0.0) {
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").value = FormatDecimalNumber(gMarketIndexes[idxIndex].netPercentChangeInDouble, 5, 2, "") + "%";
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.backgroundColor = gsNegativeColor;
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.color = "white";
            } else {
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").value = "+" + FormatDecimalNumber(gMarketIndexes[idxIndex].netPercentChangeInDouble, 5, 2, "") + "%";
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.backgroundColor = "green";
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.color = "white";
            }
        } else {
            if (gMarketIndexes[idxIndex].netChange < 0.0) {
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").value = FormatMoney(gMarketIndexes[idxIndex].netChange);
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.backgroundColor = gsNegativeColor;
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.color = "white";
            } else {
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").value = "+" + FormatMoney(gMarketIndexes[idxIndex].netChange);
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.backgroundColor = "green";
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.color = "white";
            }
        }
    }
}

function DoCopySymbols(iFromWhere,  idxWL, sThisIdToRemove) {
    // iFromWhere = 1 - from DoWLOpenSymbols, 2 - ShowCopyPastPopupSelection
    let sSymbolsToLookup = "";
    let sSymbolsToLookupSep = "";
    let iNumSelected = 0;
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
            iNumSelected++;
            sSymbolsToLookup = sSymbolsToLookup + sSymbolsToLookupSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
            sSymbolsToLookupSep = ", ";
        }
    }

    if (iNumSelected == 0) {
        alert("Please select at least one symbol to copy.")
        if (iFromWhere == 2) {
            wlDoRemoveDivPopup(sThisIdToRemove);
        } else {
            gbDoingCreateOrders = false;
            DoGetTDData();
        }
        return;
    }
    sConfirmMsg = "";
    sConfirmMsg = "Copying the following symbols: " + sSymbolsToLookup.toUpperCase() + ". ";
    if (AreYouSure(sConfirmMsg)) {
        CopySelected(idxWL);
        alert("Selected symbols available to paste.");
        ClearAllWLSelected(idxWL);
        if (iFromWhere == 2) {
            wlDoRemoveDivPopup(sThisIdToRemove);
        } else {
            gbDoingCreateOrders = false;
            DoGetTDData();
        }
    } else {
        if (iFromWhere == 1) {
            gbDoingCreateOrders = false;
            DoGetTDData();
        }
    }
    return;


}

function DoGetIndexValues() {
    DoGetTDData();
    //        window.setTimeout("GetIndexValues()", 50);
}

function DoGetStockPriceHistory() {
    if (!gbDoingCreateOrders) {
        if (document.pwdForm.btnGetStockPriceHistory.value == "Stop Price History") {
            gbDoingStockPriceHistory = false;
            document.pwdForm.btnGetStockPriceHistory.style.cursor = "wait";
            document.pwdForm.btnGetStockPriceHistory.disabled = true;
        } else {
            if (!IsMarketOpen()) {
                if (!gbUseLastTradingDay) {
                    alert("The market is currently closed. Click on Use last trading day.");
                    return;
                }
            }

            gbDoingStockPriceHistory = true;
            document.pwdForm.btnGetStockPriceHistory.value == "Stop Price History";
            //debugger
            document.getElementById("miscname").innerHTML = "";
            document.getElementById("mischead").innerHTML = "";
            document.getElementById("misc").innerHTML = "";
            document.getElementById("name").innerHTML = "";
            document.getElementById("nameTitle").innerHTML = "&nbsp;";

            RemoveAllSymbolDetailDivs();

            SetWait();
            window.setTimeout("GetStockPriceHistory()", 50);
        }
    }
}

function DoGetTDData() {
    if (giGetTDDataTimeoutId != 0) {
        window.clearTimeout(giGetTDDataTimeoutId);
        giGetTDDataTimeoutId = 0;
        if (!gbDoingGetTDData) {
            giGetTDDataTimeoutId = window.setTimeout("GetTDData(false)", 30);
        } else {
            giGetTDDataTimeoutId = window.setTimeout("GetTDData(false)", 1000);
        }
    } else {
        giGetTDDataTimeoutId = window.setTimeout("GetTDData(false)", 30);
    }
}

function DoGetTrades() {

    if (gbDoingGetTrades) {
        gbStopGetTrades = true;
    } else {
        if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
            gbDoingGetTrades = true;
            if (giGetTDDataTimeoutId != 0) {
                window.clearTimeout(giGetTDDataTimeoutId);
            }
            let sStartDate = document.getElementById("txtStartDate").value;
            let sEndDate = document.getElementById("txtEndDate").value;
            if (!ValidateTDDate(sStartDate, true) || !ValidateTDDate(sEndDate, true)) {
                gbDoingGetTrades = false;
                DoGetTDData();
                return;
            }
            //if (sEndDate < sStartDate) {
            //    alert("Invalid TD date. Please enter an end date greater than or equal to the start date.");
            //    return;
            //}

            let vTmp = sStartDate.split("-");
            let sTmp = vTmp[1] + "/" + vTmp[2] + "/" + vTmp[0];
            let dStartDate = new Date(sTmp);
            vTmp = sEndDate.split("-");
            sTmp = vTmp[1] + "/" + vTmp[2] + "/" + vTmp[0];
            let dEndDate = new Date(sTmp);

            vTmp = FormatDateForTD(new Date()).split("-");
            sCurrentDate = vTmp[1] + "/" + vTmp[2] + "/" + vTmp[0];
            let dCurrentDate = new Date(sCurrentDate);

            if ((dStartDate.getTime() > dCurrentDate.getTime()) && (dEndDate.getTime() > dCurrentDate.getTime())) {
                if (dStartDate.getTime() > dEndDate.getTime()) {
                    alert("Invalid TD dates. Please enter a start date less than or equal to the end date and both the start and end dates less than or equal to " + FormatDateForTD(dCurrentDate) + ".");
                    gbDoingGetTrades = false;
                    DoGetTDData();
                    return;
                } else {
                    alert("Invalid TD date. Please enter start and end dates less than or equal to " + FormatDateForTD(dCurrentDate) + ".");
                    gbDoingGetTrades = false;
                    DoGetTDData();
                    return;
                }
            } else if (dEndDate.getTime() > dCurrentDate.getTime()) {
                alert("Invalid TD date. Please enter an end date less than or equal to " + FormatDateForTD(dCurrentDate) + ".");
                gbDoingGetTrades = false;
                DoGetTDData();
                return;
            } else if (dStartDate.getTime() > dEndDate.getTime()) {
                alert("Invalid TD date. Please enter a start date less than or equal to the end date.");
                gbDoingGetTrades = false;
                DoGetTDData();
                return;
            }

            let iMarketOpen = IsMarketOpen();
            if (iMarketOpen == 2) {
                if (GetAccessCodeUsingRefreshToken()) {
                    iMarketOpen = IsMarketOpen();
                    if (iMarketOpen == 2) {
                        alert("An error occurred attempting to refresh the access code. Please reload the app.");
                        gbDoingGetTrades = false;
                        DoGetTDData();
                        return;
                    }
                } else {
                    alert("An error occurred attempting to refresh the access code. Please reload the app.");
                    gbDoingGetTrades = false;
                    DoGetTDData();
                    return;
                }
            }
            document.pwdForm.btnGetTrades.value = "Stop";
            //debugger
            document.getElementById("tblDetail").style.visibility = "hidden";
            document.getElementById("miscname").innerHTML = "";
            document.getElementById("mischead").innerHTML = "";
            document.getElementById("misc").innerHTML = "";
            document.getElementById("name").innerHTML = "";
            document.getElementById("nameTitle").innerHTML = "&nbsp;";

            RemoveAllSymbolDetailDivs();

            SetWait();
            window.setTimeout("GetTrades(true)", 50);

        }
    }
}

function DoGetTradesBySymbol(sSymbolToLookup, sAccountID, sAccountName, sTRId, idxSymbol, sCurrentDiv) {
    window.setTimeout("GetTradesBySymbol('" + sSymbolToLookup + "','" + sAccountID + "','" + sAccountName + "','" + sTRId + "', " + idxSymbol.toString() + ",'" + sCurrentDiv + "')", 50);
}

function DoHideDiv(sDiv) {
    try {
        if (!gbDoingStockPriceHistory) {
            document.getElementById(sDiv).style.visibility = "hidden";
        }
    } catch (e) {

    }
}

function DoGetWatchlistPrices() {
    window.setTimeout("GetWatchlistPrices()", 50);
}

function DoOCancelOrders(watchlistId, sLastWLAccountId) {
    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {
            let sAccountId = gWatchlists[idxWL].accountId;
            let iNumSelected = 0;

            gOrdersToCancel.length = 0;

            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
                    iNumSelected++;
                    let oWLItem = new WLItemOrder();
                    oWLItem = gWatchlists[idxWL].WLItems[idxWLItem];
                    let oTDOrder = new TDCancelOrder();
                    oTDOrder.orderId = oWLItem.orderId;
                    gOrdersToCancel[gOrdersToCancel.length] = oTDOrder;
                }
            }
            if (iNumSelected == 0) {
                alert("Please select at least one order to cancel.")
                return;
            }
            let sConfirmMsg = "";
            sConfirmMsg = "Canceling  " + iNumSelected.toString() + " orders. ";
            if (AreYouSure(sConfirmMsg)) {
                gbDoingCreateOrders = true;
                SetWait();
                window.setTimeout("CancelOrders(true, 0, 0, 0, 0, '" + sAccountId + "', 0)", 10);
            }
        }

        return;
    }
}

function DoPasteSymbols(iFromWhere, idxWL, sThisIdToRemove) {
    // iFromWhere = 1 - from DoWLOpenSymbols, 2 - ShowCopyPastPopupSelection
    let sSymbolsToPaste = "";
    let sSymbolsToPasteSep = "";
    for (let idx = 0; idx < gWatchlistItemsToCopy.length; idx++) {
        sSymbolsToPaste = sSymbolsToPaste + sSymbolsToPasteSep + gWatchlistItemsToCopy[idx].symbol;
        sSymbolsToPasteSep = ", ";
    }
    if (AreYouSure("Pasting the following symbols into this watchlist: " + sSymbolsToPaste + "\n")) {
        //need to get the start and end dates with time
        //get the highest last update date
        let iEndDate = new Date().getTime();
        for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
            if (gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate > iEndDate) {
                iEndDate = gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate;
            }
        }
        let iStartDate = iEndDate;
        window.setTimeout("PastCopiedSymbols(true, 0, 0, " + idxWL.toString() + ", " + iStartDate + ", " + iEndDate + ")", 100);
        if (iFromWhere == 2) {
            wlDoRemoveDivPopup(sThisIdToRemove);
        }
        return;
    } else {
        if (iFromWhere == 1) {
            gbDoingCreateOrders = false;
            DoGetTDData();
        }
        return;
    }

}

function DoResetWatchlists() {
    gbDoResetWatchlists = true;
    DoGetTDData();
}

function DoShowPriceHistory(idxPriceInfo, idxPriceHistory) {
    if (!gbGettingStockPriceHistory) {
        DoShowPriceHistoryDetail(idxPriceInfo, idxPriceHistory, true);
    }
}

function DoShowPriceHistoryDetail(idxPriceInfo, idxPriceHistory, bClicked) {
    let sTextAlignHeader = "center";
    let s = "";
    if ((document.getElementById("tblDetail").style.visibility == "visible")
        && (bClicked)
        && ((document.getElementById("miscname").innerHTML).indexOf(gPriceInfo[idxPriceInfo].symbol) != -1)) {
        document.getElementById("miscname").innerHTML = "";
        document.getElementById("tblDetail").style.visibility = "hidden";
    } else {
        s = "<table style=\"width:100%;border-width:0px;\">";
        s = s + gPriceMinutes[idxPriceHistory] + "</table>";
        document.getElementById("misc").innerHTML = s;

        s = "<table style=\"border-width:0px; border-style:solid;border-spacing:0px;border-color:White;width:100%\"><tr><th style=\"height:18px;border-width:1px;border-style:solid;border-spacing:1px;border-color:White;\">";
        s = s + gPriceInfo[idxPriceInfo].symbol;
        s = s + "</th></tr></table>";
        document.getElementById("miscname").innerHTML = s;

        s = "<table style=\"width:100%;border-width:0px;\">";
        s = s + "<tr>";
        s = s + "<th style=\"width:20%; text-align:" + sTextAlignHeader + ";vertical-align:top;border-width:0px;\"><I>Date</I></th>";
        s = s + "<th style=\"width:16%; text-align:" + sTextAlignHeader + ";vertical-align:top;border-width:0px;\"><I>High</I></th>";
        s = s + "<th style=\"width:16%; text-align:" + sTextAlignHeader + ";vertical-align:top;border-width:0px;\"><I>Low&nbsp;&nbsp;&nbsp;&nbsp;</I></th>";
        s = s + "<th style=\"width:16%; text-align:" + sTextAlignHeader + ";vertical-align:top;border-width:0px;\"><I>Vol&nbsp;&nbsp;&nbsp;&nbsp;</I></th>";
        s = s + "<th style=\"width:16%; text-align:" + sTextAlignHeader + ";vertical-align:top;border-width:0px;\"><I>Open&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</I></th>";
        s = s + "<th style=\"width:16%; text-align:" + sTextAlignHeader + ";vertical-align:top;border-width:0px;\"><I>Close&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</I></th>";
        s = s + "</tr></table>";
        document.getElementById("mischead").innerHTML = s;


        let iPwdFormHeight = document.getElementById("pwdForm").clientHeight + 10;
        document.getElementById("tblDetail").style.width = "800px";
        document.getElementById("detailTitle").style.width = "780px";
        document.getElementById("tblDetail").style.left = "0px";
        document.getElementById("tblDetail").style.top = (document.getElementById("tblSymbols").clientHeight + iPwdFormHeight).toString() + "px";
        document.getElementById("tblDetail").style.visibility = "visible";
    }
}

function DoSODeleteOrders(watchlistId, sLastWLAccountId) {
    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {
            let sAccountId = gWatchlists[idxWL].accountId;
            let iNumSelected = 0;

            gOrdersToDelete.length = 0;

            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
                    iNumSelected++;
                    let oWLItem = new WLItemSavedOrder();
                    oWLItem = gWatchlists[idxWL].WLItems[idxWLItem];
                    let oTDSavedOrder = new TDSavedOrder();
                    oTDSavedOrder.savedOrderId = oWLItem.savedOrderId;
                    let d = new Date(oWLItem.savedTime.split("+")[0] + "+00:00");
                    oTDSavedOrder.symbol = oWLItem.symbol + " -- " + FormatTDTradeDate(d);
                    gOrdersToDelete[gOrdersToDelete.length] = oTDSavedOrder;
                }
            }
            if (iNumSelected == 0) {
                alert("Please select at least one saved order to delete.")
                return;
            }
            let sConfirmMsg = "";
            sConfirmMsg = "Deleting  " + iNumSelected.toString() + " saved orders. ";
            if (AreYouSure(sConfirmMsg)) {
                gbDoingCreateOrders = true;
                SetWait();
                window.setTimeout("DeleteSavedOrders(true, 0, 0, 0, 0, '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
            }
        }
        return;
    }
}

function DoSOPlaceOrders(watchlistId, sLastWLAccountId) {
    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {
            let sAccountId = gWatchlists[idxWL].accountId;
            let iNumSelected = 0;

            let dtCancelTime = new Date(); //get todays date
            dtCancelTime.setMonth(dtCancelTime.getMonth() + 4);
            let sCancelTime = FormatDateForTD(dtCancelTime);

            gOrdersToPlace.length = 0;

            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
                    iNumSelected++;
                    let oWLItem = new WLItemSavedOrder();
                    oWLItem = gWatchlists[idxWL].WLItems[idxWLItem];
                    let oTDSavedOrder = new TDSavedOrder();
                    oTDSavedOrder.savedOrderId = oWLItem.savedOrderId;
                    oTDSavedOrder.orderType = oWLItem.orderType;
                    oTDSavedOrder.a02orderType = oTDSavedOrder.a02orderType + "\"" + oWLItem.orderType + "\", ";
                    oTDSavedOrder.a02Aprice = oTDSavedOrder.a02Aprice + "\"" + oWLItem.price.toString() + "\", ";
                    oTDSavedOrder.a03DstopPriceOffset = oTDSavedOrder.a03DstopPriceOffset + oWLItem.stopPriceOffset.toString() + ", ";
                    oTDSavedOrder.a03FcancelTime = oTDSavedOrder.a03FcancelTime + "\"" + sCancelTime + "\", ";
                    oTDSavedOrder.a04duration = oTDSavedOrder.a04duration + "\"" + oWLItem.duration + "\", ";
                    oTDSavedOrder.a07instructionStart = oTDSavedOrder.a07instructionStart + "\"" + oWLItem.instruction + "\", ";
                    oTDSavedOrder.instruction = oWLItem.instruction;
                    oTDSavedOrder.a08quantity = oTDSavedOrder.a08quantity + oWLItem.quantity.toString() + ", ";
                    oTDSavedOrder.a10symbol = oTDSavedOrder.a10symbol + "\"" + oWLItem.symbol + "\", "
                    oTDSavedOrder.symbol = oWLItem.symbol;

                    gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                }
            }
            if (iNumSelected == 0) {
                alert("Please select at least one saved order to place.")
                return;
            }
            let sConfirmMsg = "";
            sConfirmMsg = "Placing  " + iNumSelected.toString() + " saved orders. ";
            if (AreYouSure(sConfirmMsg)) {
                gbDoingCreateOrders = true;
                SetWait();
                window.setTimeout("PostWLPlaceOrders(true, 0, 0, 0, " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
            }
        }
        return;
    }
}

function DoURLEncode(sData) {
    let sReturn = "";
    if (sData.length > 0) {
        sReturn = encodeURIComponent(sData);
    }
    return sReturn;
}

function DoWLBuy(watchlistId, sLastWLAccountId) {
    let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
    if (idxWL != -1) {
        DoWLBuySell(idxWL, 1);
    }
}

function DoWLBuySell(idxWL, iBuySell) {
    //iBuySell = 1 for Buy, 2 for Sell
    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        let sSelectNum = "";
        let iSelectNum = 0;
        let dSelectNum = 0.0;
        let iShares = 0;
        let bDoingLimit = false;

        let sAccountId = gWatchlists[idxWL].accountId;
        let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

        let sPercent = TrimLikeVB(document.getElementById("txtWLpercent" + sThisId).value);
        let sDollars = TrimLikeVB(document.getElementById("txtWLdollars" + sThisId).value);
        let sShares = TrimLikeVB(document.getElementById("txtWLshares" + sThisId).value);

        //let bExisting = document.getElementById("optbuyexisting" + sThisId).checked;
        let bExisting = false;

        let sBuySell = "";

        switch (iBuySell) {
            case 1: {
                sBuySell = "Buy";
                break;
            }
            case 2: {
                sBuySell = "Sell";
                break;
            }
            default: {
                sBuySell = "Buy";
                break;
            }
        }

        if ((!document.getElementById("chkSave" + sThisId).checked) && (!document.getElementById("chkPlace" + sThisId).checked)) {
            alert("Please check Save or Place or check both.");
            return;
        }

        if ((sPercent == "") && (sDollars == "") && (sShares == "")) {
            alert("Missing a percentage value OR a dollar amount OR a number of shares.");
            return;
        }
        if ((sPercent != "") && (sDollars != "") && (sShares != "")) {
            alert("Please enter a percentage value OR a dollar amount OR a number of shares.");
            return;
        }
        if ((sPercent != "") && (sShares != "")) {
            alert("Please enter a percentage value OR a dollar amount OR a number of shares.");
            return;
        }
        if ((sPercent != "") && (sDollars != "")) {
            alert("Please enter a percentage value OR a dollar amount OR a number of shares.");
            return;
        }
        if ((sDollars != "") && (sShares != "")) {
            alert("Please enter a percentage value OR a dollar amount OR a number of shares.");
            return;
        }
        if (sPercent != "") {
            //using percent
            sSelectNum = sPercent;
            if (sSelectNum == "") {
                alert("Please enter a percentage from 0.01 to 100.");
                return;
            }
            try {
                dSelectNum = parseFloat(sSelectNum);
                if ((dSelectNum < 0.01) || (dSelectNum > 100)) {
                    alert("Invalid percentage. Must be from 0.01 to 100.");
                    return;
                }
                else {
                    sSelectNum = FormatDecimalNumber(dSelectNum, 5, 2, "");
                    dSelectNum = parseFloat(sSelectNum);
                }
            }
            catch (e) {
                alert("Invalid percentage. Must be from 0.01 to 100.");
                sSelectNum = "";
                return;
            }
        } else if (sDollars != "") {
            //using dollar amount
            dSelectNum = parseFloat(sDollars);
            if (isNaN(dSelectNum)) {
                alert("Invalid dollar amount.");
                return;
            }
            if (dSelectNum < 0) {
                alert("Invalid dollar amount. Must be greater than 0.");
                return;
            } else {
                sSelectNum = FormatDecimalNumber(dSelectNum, 5, 2, "");
                dSelectNum = parseFloat(sSelectNum);
            }
        } else {
            //using number of shares amount
            iShares = parseInt(sShares);
            if (isNaN(iShares)) {
                alert("Invalid number of shares.");
                return;
            }
            if (iShares < 0) {
                alert("Invalid number of shares . Must be greater than 0.");
                return;
            } 
        }

        let sConfirmMsg = "";

        if (document.getElementById("chkLimit" + sThisId).checked) {
            bDoingLimit = true;
        }

        if (bDoingLimit) {
            if (sPercent != "") {
                switch (iBuySell) {
                    case 1: {
                        sConfirmMsg = "LIMIT orders to " + sBuySell + " " + sSelectNum + "% of selected symbols. ";
                        break;
                    }
                    case 2: {
                        sConfirmMsg = "LIMIT orders to " + sBuySell + " " + sSelectNum + "% of selected symbols. LIMIT SELL orders for the selected symbols might be 1% lower than the current market price. ";
                        break;
                    }
                    default: {
                        sConfirmMsg = "LIMIT orders to " + sBuySell + " " + sSelectNum + "% of selected symbols. ";
                        break;
                    }
                }
            } else if (sDollars != "") {
                sConfirmMsg = "LIMIT orders to " + sBuySell + " $" + sSelectNum + " worth of selected symbols. LIMIT SELL orders for the selected symbols might be 1% lower than the current market price. ";
                switch (iBuySell) {
                    case 1: {
                        sConfirmMsg = "LIMIT orders to " + sBuySell + " $" + sSelectNum + " worth of selected symbols. ";
                        break;
                    }
                    case 2: {
                        sConfirmMsg = "LIMIT orders to " + sBuySell + " $" + sSelectNum + " worth of selected symbols. LIMIT SELL orders for the selected symbols might be 1% lower than the current market price. ";
                        break;
                    }
                    default: {
                        sConfirmMsg = "LIMIT orders to " + sBuySell + " $" + sSelectNum + " worth of selected symbols. ";
                        break;
                    }
                }
            } else {
                switch (iBuySell) {
                    case 1: {
                        sConfirmMsg = "LIMIT orders to " + sBuySell + " " + iShares.toString() + " shares of selected symbols. ";
                        break;
                    }
                    case 2: {
                        sConfirmMsg = "LIMIT orders to " + sBuySell + " " + iShares.toString() + " shares of selected symbols. LIMIT SELL orders for the selected symbols might be 1% lower than the current market price. ";
                        break;
                    }
                    default: {
                        sConfirmMsg = "LIMIT orders to " + sBuySell + " " + iShares.toString() + " shares of selected symbols. ";
                        break;
                    }
                }
            }
            if (AreYouSure(sConfirmMsg)) {
                switch (iBuySell) {
                    case 1: {
                        window.setTimeout("GenerateWLBuySellOrdersLimit('" + sAccountId + "', 'BUY', '" + sPercent + "', " + dSelectNum + ", " + iShares + ", " + idxWL + ", " + bExisting + ")", 10);
                        break;
                    }
                    case 2: {
                        window.setTimeout("GenerateWLBuySellOrdersLimit('" + sAccountId + "', 'SELL', '" + sPercent + "', " + dSelectNum + ", " + iShares + ", " + idxWL + ", " + bExisting + ")", 10);
                        break;
                    }
                    default: {
                        window.setTimeout("GenerateWLBuySellOrdersLimit('" + sAccountId + "', 'BUY', '" + sPercent + "', " + dSelectNum + ", " + iShares + ", " + idxWL + ", " + bExisting + ")", 10);
                        break;
                    }
                }
            }
        } else {
            if (sPercent != "") {
                sConfirmMsg = sBuySell + " " + sSelectNum + "% of selected symbols. ";
            } else if (sDollars != "") {
                sConfirmMsg = sBuySell + " $" + sSelectNum + " worth of selected symbols. ";
            } else {
                sConfirmMsg = sBuySell + " " + iShares.toString() + " shares of selected symbols. ";
            }
            if (AreYouSure(sConfirmMsg)) {
                switch (iBuySell) {
                    case 1: {
                        window.setTimeout("GenerateWLBuySellOrders('" + sAccountId + "', 'BUY', '" + sPercent + "', " + dSelectNum + ", " + iShares + ", " + idxWL + ", " + bExisting + ")", 10);
                        break;
                    }
                    case 2: {
                        window.setTimeout("GenerateWLBuySellOrders('" + sAccountId + "', 'SELL', '" + sPercent + "', " + dSelectNum + ", " + iShares + ", " + idxWL + ", " + bExisting + ")", 10);
                        break;
                    }
                    default: {
                        window.setTimeout("GenerateWLBuySellOrders('" + sAccountId + "', 'BUY', '" + sPercent + "', " + dSelectNum + ", " + iShares + ", " + idxWL + ", " + bExisting + ")", 10);
                        break;
                    }
                }
            }
        }
        return;
    }
}

function DoWLCloseSymbol(watchlistId, sLastWLAccountId) {
    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        gbDoingCreateOrders = true;
        if (giGetTDDataTimeoutId != 0) {
            window.clearTimeout(giGetTDDataTimeoutId);
        }
        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {
            if (gWatchlists[idxWL].WLItems.length > 0) {

                if (gWatchlists[idxWL].watchlistId == gWatchlists[idxWL].accountId) {
                    alert("Cannot Update G/L or Add symbols in an Account watchlist.");
                    gbDoingCreateOrders = false;
                    DoGetTDData();
                    return;
                }

                let sSymbolsToLookup = "";
                let sSymbolsToLookupSep = "";
                let iNumSelected = 0;
                for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                    if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
                        iNumSelected++;
                        sSymbolsToLookup = sSymbolsToLookup + sSymbolsToLookupSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                        sSymbolsToLookupSep = ", ";
                    }
                }

                let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

                let sDollars = TrimLikeVB(document.getElementById("txtwlclose" + sThisId).value);

                if (iNumSelected > 0) {
                    window.setTimeout("ShowGLInitializePopupSelection('" + watchlistId + "', '" + sLastWLAccountId + "')", 10);
                } else {
                    if (sDollars != "") {
                        WLInitializeGLSymbols(2, idxWL);
                    } else {
                        WLInitializeGLSymbols(3, idxWL);
                    }
                }

            //    let dtEndDate = new Date();
            //    let iEndDate = dtEndDate.getTime();
            //    let sEndDate = FormatDateForTD(dtEndDate);
            //    let sCurrentDate = sEndDate;

            //    if (sDollars != "") {
            //        //treat as date
            //        if (ValidateTDDate(sDollars, false)) {
            //            if (sDollars > sEndDate) {
            //                alert("Invalid initialization start date. Please enter a start date less than or equal to " + sEndDate + ".");
            //                gbDoingCreateOrders = false;
            //                DoGetTDData();
            //                return;
            //            }
            //            if (sEndDate > sCurrentDate) {
            //                alert("Invalid initialization end date. Please enter an end date less than or equal to " + sCurrentDate + ".");
            //                gbDoingCreateOrders = false;
            //                DoGetTDData();
            //                return;
            //            }
            //            let bInitAll = true;
            //            if (iNumSelected > 0) {
            //                if (window.confirm("Press OK to Initialize the GL for only the selected symbols\nPress Cancel to Initialize the GL for all of the symbols in the watchlist")) {
            //                    bInitAll = false;
            //                }
            //            }
            //            if (bInitAll) {
            //                let sConfirmMsg = "";
            //                sConfirmMsg = "Initializing the G/L for all of the symbols in the watchlist using " + sDollars + " as the start date and " + sEndDate + " as the end date. ";
            //                if (AreYouSure(sConfirmMsg)) {
            //                    //get the trade info for the selected symbols
            //                    let aStartDate = sDollars.split("-");
            //                    let iStartDate = (new Date(parseInt(aStartDate[0]), parseInt(aStartDate[1] - 1), parseInt(aStartDate[2]))).getTime();

            //                    gWatchlists[idxWL].defaultUpdateGLDate = sDollars;

            //                    window.setTimeout("GetTradesAutoBase(true, " + iStartDate + ", " + idxWL + ", true, '', " + iEndDate + ", '', true, '', '', '', '', true)", 10);
            //                } else {
            //                    gbDoingCreateOrders = false;
            //                    DoGetTDData();
            //                    return;
            //                }
            //            } else { //only initialize the GL for the selected symbols
            //                //use the entered date as the start date and the highest update date as the end date
            //                //get the highest last update date
            //                let iHighestUpdateDate = 0;
            //                iHighestUpdateDate = GetHighestUpdateDate(idxWL, true);
            //                if (iHighestUpdateDate == -1) {
            //                    //what does this mean
            //                    gbDoingCreateOrders = false;
            //                    DoGetTDData();
            //                    return;
            //                }

            //                let sHighestUpdateDate = FormatDateForTD(new Date(iHighestUpdateDate));

            //                if (sDollars > sHighestUpdateDate) {
            //                    sDollars = sHighestUpdateDate;
            //                }
            //                let sConfirmMsg = "";
            //                sConfirmMsg = "Initializing the G/L for " + sSymbolsToLookup.toUpperCase() + " using " + sDollars + " as the start date and " + sHighestUpdateDate + " as the end date. ";
            //                if (AreYouSure(sConfirmMsg)) {
            //                    //get the trade info for the selected symbols

            //                    sSymbolsToLookup = "";
            //                    sSymbolsToLookupSep = "";
            //                    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
            //                        if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
            //                            sSymbolsToLookup = sSymbolsToLookup + sSymbolsToLookupSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
            //                            sSymbolsToLookupSep = ",";
            //                        }
            //                    }

            //                    let aStartDate = sDollars.split("-");
            //                    let iStartDate = (new Date(parseInt(aStartDate[0]), parseInt(aStartDate[1] - 1), parseInt(aStartDate[2]))).getTime();

            //                    gWatchlists[idxWL].defaultUpdateGLDate = sDollars;

            //                    window.setTimeout("GetTradesAutoBase(true, " + iStartDate + ", " + idxWL + ", true, '" + sSymbolsToLookup.toUpperCase() + "', " + iHighestUpdateDate + ", '', false, '', '', '', '', true)", 10);
            //                } else {
            //                    gbDoingCreateOrders = false;
            //                    DoGetTDData();
            //                    return;
            //                }
            //            }
            //        } else {
            //            alert("Please enter an initialization start date as yyyy-mm-dd.")
            //            gbDoingCreateOrders = false;
            //            DoGetTDData();
            //            return;
            //        }
            //    } else {
            //        //updating G/L for each symbol in the watchlist using the latest update date found in the watchlist
            //        let sConfirmMsg = "";
            //        sConfirmMsg = "Updating the G/L for all of the symbols in the watchlist. ";
            //        if (AreYouSure(sConfirmMsg)) {
            //            //get the highest last update date
            //            let iHighestUpdateDate = 0;
            //            iHighestUpdateDate = GetHighestUpdateDate(idxWL, true);
            //            if (iHighestUpdateDate == -1) {
            //                gbDoingCreateOrders = false;
            //                DoGetTDData();
            //                return;
            //            }

            //            //get the trade info for the selected symbols
            //            window.setTimeout("GetTradesAutoBase(true, " + iHighestUpdateDate + ", " + idxWL + ", false, '', " + iEndDate + ", '', false, '', '', '', '', true)", 10);
            //        } else {
            //            gbDoingCreateOrders = false;
            //            DoGetTDData();
            //            return;
            //        }
            //        return;
            //    }
            } else {
                gbDoingCreateOrders = false;
                DoGetTDData();
                return;
            }
        } else {
            gbDoingCreateOrders = false;
            DoGetTDData();
            return;
        }
        return;
    }
}

function DoWLDeleteSymbols(iWhatToDelete, idxWL, sThisIdToRemove) {
    // iWhatToDelete = 1 - delete selected symbols, 2 - delete entire watchlist
    let sAccountId = gWatchlists[idxWL].accountId;

    let sSymbolsToLookup = "";
    let sSymbolsToLookupSep = "";

    let iNumSelected = 0;
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
            iNumSelected++;
            sSymbolsToLookup = sSymbolsToLookup + sSymbolsToLookupSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
            sSymbolsToLookupSep = ", ";
        }
    }

    switch (iWhatToDelete) {
        case 1: { //delete selected symbols
            if (iNumSelected == 0) {
                alert("Please select at least one symbol to delete.")
                return;
            }

            let sConfirmMsg = "";
            sConfirmMsg = "Deleting " + sSymbolsToLookup.toUpperCase() + ". ";
            if (AreYouSure(sConfirmMsg)) {
                window.setTimeout("GenerateWLDeleteSymbolOrders(true, '" + sAccountId + "', " + idxWL.toString() + ", '" + sSymbolsToLookup + "', 0, 0)", 10);
                wlDoRemoveDivPopup(sThisIdToRemove);
            } else {
                return;
            }
            break;
        }
        case 2: { //delete entire watchlist
            let sConfirmMsg = "";
            sConfirmMsg = "Deleting " + gWatchlists[idxWL].name + ". ";
            if (AreYouSure(sConfirmMsg)) {
                window.setTimeout("GenerateWLDeleteWLOrders(" + idxWL + ")", 10);
                wlDoRemoveDivPopup(sThisIdToRemove);
            } else {
                return;
            }
            break;
        }
    }
}

function DoWLInitializeGLSymbols(iSelectedOrAll, idxWL, sThisIdIn) {
    wlDoRemoveDivPopupNoClear(sThisIdIn);
    window.setTimeout("WLInitializeGLSymbols(" + iSelectedOrAll.toString() + ", " + idxWL.toString() + ")", 10);
}

function DoWLOpenSymbols(iFromWhere, watchlistId, sLastWLAccountId) {
    //iFromwhere -- 1 add img, 2 - update img
    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        //allow the following
        // iFromWhere = 1
        // either copy selected symbols or paste previously copied symbols
        // iFromWhere = 3
        // hide selected
        // iFromWhere = 4
        // unhide all
        // iFromWhere = 6
        // copy selected symbols from a shared watchlist

        gbDoingCreateOrders = true;
        if (giGetTDDataTimeoutId != 0) {
            window.clearTimeout(giGetTDDataTimeoutId);
        }

        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {
            let sAccountId = gWatchlists[idxWL].accountId;
            let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

            let sSymbolsToLookup = "";
            let sSymbolsToLookupSep = "";
            let sSymbolsToShow = "";
            let sSymbolsToShowSep = "";
            let iNumSelected = 0;
            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
                    iNumSelected++;
                    sSymbolsToLookup = sSymbolsToLookup + sSymbolsToLookupSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                    sSymbolsToLookupSep = ", ";
                }
                if (gWatchlists[idxWL].WLItems[idxWLItem].bHidden) {
                    sSymbolsToShow = sSymbolsToShow + sSymbolsToShowSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                    sSymbolsToShowSep = ", ";
                }
            }

            switch (iFromWhere) {
                case 1: { //copy/paste 
                    if (gWatchlistItemsToCopy.length > 0) {
                        if (iNumSelected == 0) { //doing paste
                            DoPasteSymbols(1, idxWL, "");
                            return;
                        } else { //show popup to select copy or paste
                            window.setTimeout("ShowCopyPastePopupSelection(" + idxWL.toString() + ")", 10);
                        }
                    } else { //doing copy
                        DoCopySymbols(1, idxWL, "");
                        return;
                    }
                    break;
                }
                case 3: { //hide selected
                    if (iNumSelected == 0) {
                        alert("Please select at least one symbol to hide.")
                        gbDoingCreateOrders = false;
                        DoGetTDData();
                        return;
                    }
                    let sConfirmMsg = "";
                    sConfirmMsg = "Hiding " + sSymbolsToLookup.toUpperCase() + ". ";
                    if (AreYouSure(sConfirmMsg)) {
                        window.setTimeout("GenerateWLHideSymbolOrders(true, " + idxWL.toString() + ", 0, 0)", 10);
                    } else {
                        gbDoingCreateOrders = false;
                        DoGetTDData();
                        return;
                    }
                    break;
                }
                case 4: { //unhide all
                    let sConfirmMsg = "";
                    if (sSymbolsToShow == "") {
                        alert("There are no hidden symbols to show.");
                        gbDoingCreateOrders = false;
                        DoGetTDData();
                        return;
                    } else {
                        sConfirmMsg = "Showing " + sSymbolsToShow.toUpperCase() + ". ";
                        if (AreYouSure(sConfirmMsg)) {
                            window.setTimeout("GenerateWLUnHideSymbolOrders(true, " + idxWL.toString() + ", 0, 0)", 10);
                        } else {
                            gbDoingCreateOrders = false;
                            DoGetTDData();
                            return;
                        }
                    }
                    break;
                }
                case 6: { //copy symbols from a shared watchlist - add img
                    DoCopySymbols(1, idxWL, "");
                    return;
                    break;
                }
            }
        }
        return;
    }
}

function DoWLImport() {
    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        //import all watchlist associated to the all of the accounts related to the logged in account
        gbDoingCreateOrders = true;
        if (giGetTDDataTimeoutId != 0) {
            window.clearTimeout(giGetTDDataTimeoutId);
        }
        let bOkToContinue = false;
        let sErrorMsg = "";
        let sWLToImport = "";
        let sWLToImportSep = "";

        iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/accounts/watchlists", 3);
        if (iReturn == 0) {
            GetWatchlistsToImport();
            if (gAccounts.length > 0) {
                if (gWatchlistsToImport.length > 0) {
                    for (let idxWL = 0; idxWL < gWatchlistsToImport.length; idxWL++) {
                        let oWL = new WLWatchList();
                        oWL = gWatchlistsToImport[idxWL];
                        if (oWL.name.toUpperCase().substr(0, "OLDGL".length) != "OLDGL") {
                            sWLToImport = sWLToImport + sWLToImportSep + oWL.accountName + " -- " + oWL.name;
                            sWLToImportSep = "\n";
                            bOkToContinue = true;
                        }
                    }
                    if (!bOkToContinue) {
                        sErrorMsg = "No watchlists found to import.";
                    }
                } else {
                    sErrorMsg = "No watchlists found to import.";
                }
            } else {
                sErrorMsg = "No account information found.";
            }
        } else {
            sErrorMsg = "Error get watchlists -- " + gsLastError;
        }

        if (bOkToContinue) {
            let sConfirmMsg = "Import the following watchlists\n" + sWLToImport + "\n";
            if (AreYouSure(sConfirmMsg)) {
                SetWait();
                //window.setTimeout("SaveWL(true, 0, 0, 0, 0, " + idxWL.toString() + ", " + sPublicAccess + ", 0, '" + sNewName + "', '" + sSaveDate + "')", 10);
                //SaveALLWL(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, iTryCountIn, idxWLStart, idxWLItemStart)
                window.setTimeout("ImportALLWL(true, 0, 0, 0, 0, '')", 10);
            } else {
                gbDoingCreateOrders = false;
                DoGetTDData();
                return;
            }
        } else {
            alert(sMsg);
            gbDoingCreateOrders = false;
            DoGetTDData();
        }
    //} else {
    //    window.setTimeout("DoWLImport()", 10);
    }
}

function DoWLSell(watchlistId, sLastWLAccountId) {
    let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
    if (idxWL != -1) {
        DoWLBuySell(idxWL, 2);
    }
}

function DoWLSettings(iWhereFrom, idxWL, sThisIdToRemove) {
    // iWhereFrom = 1 - select columns, 2 - change wl name
    let sAccountId = gWatchlists[idxWL].accountId;
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

    switch (iWhereFrom) {
        case 1: { // select columns
            SelectWatchlistColumns(idxWL);
            wlDoRemoveDivPopupNoClear(sThisIdToRemove);
            break;
        }
        case 2: { // change wl name
            break;
        }
    }
//    if (window.confirm("Press OK to modify the columns displayed\nPress Cancel to rename the watchlist using the name entered in the Acquired Date field")) {
//        //modify columns
//        SelectWatchlistColumns(idxWL);
//    } else {
//        //rename the watchlist name
//        if (stxtwlacquired != "") { //case 3
//            let sConfirmMsg = "";
//            sConfirmMsg = "Changing the watchlist name to  " + stxtwlacquired + ". ";
//            if (AreYouSure(sConfirmMsg)) {
//                window.setTimeout("ChangeWLName(" + idxWL + ", '" + stxtwlacquired + "')", 10);
//            } else {
//                gbDoingCreateOrders = false;
//                DoGetTDData();
//                return;
//            }
//        } else {
//            alert("Please enter a new watchlist name..")
//            gbDoingCreateOrders = false;
//            DoGetTDData();
//            return;
//        }
//    }
}

function DoWLShare(watchlistId, sLastWLAccountId) {
    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {

            gWatchlists[idxWL].bViewable = !gWatchlists[idxWL].bViewable;
            window.setTimeout("ChangeShareIcon(" + idxWL + ")", 10);

        }
        return;
    }
}

function DoWLTrailingStop(watchlistId, sLastWLAccountId) {
    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {
            let sSelectNum = "";
            let dSelectNum
            //debugger
            let sAccountId = gWatchlists[idxWL].accountId;
            let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

            if ((!document.getElementById("chkSave" + sThisId).checked) && (!document.getElementById("chkPlace" + sThisId).checked)) {
                alert("Please check Save or Place or check both.");
                return;
            }

            let sSymbolsThisWL = "";
            let sSep = "";
            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
                    sSymbolsThisWL = sSymbolsThisWL + sSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                    sSep = ",";
                }
            }
            sSymbolsThisWL = "," + GetUniqueListOfSymbols(sSymbolsThisWL) + ",";

            sSelectNum = document.getElementById("txtWLpercent" + sThisId).value;
            let sTmp = TrimLikeVB(sSelectNum);
            if (sTmp == "") {
                alert("Please enter a percentage from 0.01 to 100.");
                return;
            }
            try {
                dSelectNum = parseFloat(sSelectNum);
                if ((dSelectNum < 0.01) || (dSelectNum > 100)) {
                    alert("Invalid percentage. Must be from 0.01 to 100.");
                    return;
                }
                else {
                    if (AreYouSure("Set TRAILING STOP at " + FormatDecimalNumber(dSelectNum, 5, 2, "") + "% for the selected symbols. ")) {
                        window.setTimeout("GenerateWLTrailingStopOrders('" + sAccountId + "', " + parseFloat(FormatDecimalNumber(dSelectNum, 5, 2, "")) + ", '" + sSymbolsThisWL + "', " + idxWL.toString() + ")", 10);
                    }
                }
            }
            catch (e) {
                alert("Invalid percentage. Must be from 0.01 to 100.");
                sSelectNum = "";
            }
        }
    }
}

function drag_div(div_id) {
    let div;

    div = document.getElementById(div_id);

    if (div == null) {
        return;
    }

    div.addEventListener('mousedown', function (e) {
        if (!((((div.offsetTop - window.pageYOffset) - e.clientY) > 20) || (((div.offsetTop - window.pageYOffset) - e.clientY) < -20))) {
            div.isDown = true;
            gbDoingDrag = true;
            div.offset = [
                div.offsetLeft - e.clientX,
                div.offsetTop - e.clientY
            ];
        }
    }, true);

    div.addEventListener('touchstart', function (e) {
        if (!((((div.offsetTop - window.pageYOffset) - e.touches[0].clientY) > 20) || (((div.offsetTop - window.pageYOffset) - e.touches[0].clientY) < -20))) {
            div.isDown = true;
            gbDoingDrag = true;
            div.offset = [
                div.offsetLeft - e.touches[0].clientX,
                div.offsetTop - e.touches[0].clientY
            ];
        }
    }, true);

    div.addEventListener('mouseup', function () {
        div.isDown = false;
        gbDoingDrag = false;
    }, true);

    div.addEventListener('touchend', function () {
        div.isDown = false;
        gbDoingDrag = false;
    }, true);

    div.addEventListener('mousemove', function (event) {
        event.preventDefault();
        if (div.isDown) {
            div.mousePosition = {
                x: event.clientX,
                y: event.clientY
            };
            if ((div.mousePosition.x + div.offset[0]) > 0) {
                div.style.left = (div.mousePosition.x + div.offset[0]) + 'px';
            }
            if ((div.mousePosition.y + div.offset[1]) > 0) {
                div.style.top = (div.mousePosition.y + div.offset[1]) + 'px';
            }
//            div.style.top = (div.mousePosition.y + div.offset[1]) + 'px';
        }
    }, true);

    div.addEventListener('touchmove', function (event) {
        if (div.isDown) {
            event.preventDefault();
            div.mousePosition = {
                x: event.touches[0].clientX,
                y: event.touches[0].clientY
            };
            if ((div.mousePosition.x + div.offset[0]) > 0) {
                div.style.left = (div.mousePosition.x + div.offset[0]) + 'px';
            }
            if ((div.mousePosition.y + div.offset[1]) > 0) {
                div.style.top = (div.mousePosition.y + div.offset[1]) + 'px';
            }
        }
    }, true);

}

function drag_divPH(div_id) {
    let div;

    div = document.getElementById(div_id);

    if (div == null) {
        return;
    }

    div.addEventListener('mousedown', function (e) {
        if (!gbDoingStockPriceHistory) {
            if (!((((div.offsetTop - window.pageYOffset) - e.clientY) > 20) || (((div.offsetTop - window.pageYOffset) - e.clientY) < -20))) {
                div.isDown = true;
                gbDoingDrag = true;
                div.offset = [
                    div.offsetLeft - e.clientX,
                    div.offsetTop - e.clientY
                ];
            }
        }
    }, true);

    div.addEventListener('touchstart', function (e) {
        if (!gbDoingStockPriceHistory) {
            if (!((((div.offsetTop - window.pageYOffset) - e.touches[0].clientY) > 20) || (((div.offsetTop - window.pageYOffset) - e.touches[0].clientY) < -20))) {
                div.isDown = true;
                gbDoingDrag = true;
                div.offset = [
                    div.offsetLeft - e.touches[0].clientX,
                    div.offsetTop - e.touches[0].clientY
                ];
            }
        }
    }, true);

    div.addEventListener('mouseup', function () {
        if (!gbDoingStockPriceHistory) {
            div.isDown = false;
            gbDoingDrag = false;
        }
    }, true);

    div.addEventListener('touchend', function () {
        if (!gbDoingStockPriceHistory) {
            div.isDown = false;
            gbDoingDrag = false;
        }
    }, true);

    div.addEventListener('mousemove', function (event) {
        if (!gbDoingStockPriceHistory) {
            event.preventDefault();
            if (div.isDown) {
                div.mousePosition = {
                    x: event.clientX,
                    y: event.clientY
                };
                if ((div.mousePosition.x + div.offset[0]) > 0) {
                    div.style.left = (div.mousePosition.x + div.offset[0]) + 'px';
                }
                if ((div.mousePosition.y + div.offset[1]) > 0) {
                    div.style.top = (div.mousePosition.y + div.offset[1]) + 'px';
                }
//                div.style.top = (div.mousePosition.y + div.offset[1]) + 'px';
            }
        }
    }, true);

    div.addEventListener('touchmove', function (event) {
        if (!gbDoingStockPriceHistory) {
            if (div.isDown) {
                event.preventDefault();
                div.mousePosition = {
                    x: event.touches[0].clientX,
                    y: event.touches[0].clientY
                };
                if ((div.mousePosition.x + div.offset[0]) > 0) {
                    div.style.left = (div.mousePosition.x + div.offset[0]) + 'px';
                }
                if ((div.mousePosition.y + div.offset[1]) > 0) {
                    div.style.top = (div.mousePosition.y + div.offset[1]) + 'px';
                }
            }
        }
    }, true);

}

function drag_divWL(div_id) {
    let div;

    div = document.getElementById(div_id);

    if (div == null) {
        return;
    }

    div.addEventListener('mousedown', function (e) {
        if ((!((((div.offsetTop - window.pageYOffset) - e.clientY) > 20) || (((div.offsetTop - window.pageYOffset) - e.clientY) < -20))) &&
            ((e.clientX > (div.offsetLeft - window.pageXOffset) + div.WLDragXoffsetLeft) && (e.clientX < (div.offsetLeft - window.pageXOffset) + div.WLDragXoffsetRight))) {
            div.isDown = true;
            gbDoingDrag = true;
            div.offset = [
                div.offsetLeft - e.clientX,
                div.offsetTop - e.clientY
            ];
        }
    }, true);

    div.addEventListener('touchstart', function (e) {
        if ((!((((div.offsetTop - window.pageYOffset) - e.touches[0].clientY) > 20) || (((div.offsetTop - window.pageYOffset) - e.touches[0].clientY) < -20)))
            ((e.touches[0].clientX > (div.offsetLeft - window.pageXOffset) + div.WLDragXoffsetLeft) && (e.touches[0].clientX < (div.offsetLeft - window.pageXOffset) + div.WLDragXoffsetRight))) {
            div.isDown = true;
            gbDoingDrag = true;
            div.offset = [
                div.offsetLeft - e.touches[0].clientX,
                div.offsetTop - e.touches[0].clientY
            ];
        }
    }, true);

    div.addEventListener('mouseup', function () {
        div.isDown = false;
        gbDoingDrag = false;
    }, true);

    div.addEventListener('touchend', function () {
        div.isDown = false;
        gbDoingDrag = false;
    }, true);

    div.addEventListener('mousemove', function (event) {
        event.preventDefault();
        if (div.isDown) {
            div.mousePosition = {
                x: event.clientX,
                y: event.clientY
            };
            if ((div.mousePosition.x + div.offset[0]) > 0) {
                div.style.left = (div.mousePosition.x + div.offset[0]) + 'px';
            }
            if ((div.mousePosition.y + div.offset[1]) > 0) {
                div.style.top = (div.mousePosition.y + div.offset[1]) + 'px';
            }
        }
    }, true);

    div.addEventListener('touchmove', function (event) {
        if (div.isDown) {
            event.preventDefault();
            div.mousePosition = {
                x: event.touches[0].clientX,
                y: event.touches[0].clientY
            };
            if ((div.mousePosition.x + div.offset[0]) > 0) {
                div.style.left = (div.mousePosition.x + div.offset[0]) + 'px';
            }
            if ((div.mousePosition.y + div.offset[1]) > 0) {
                div.style.top = (div.mousePosition.y + div.offset[1]) + 'px';
            }
        }
    }, true);

}

function EnableAllShow() {
    document.getElementById("chkShowIndexSelection").disabled = false;
    document.getElementById("chkShowIndexes").disabled = false;
    document.getElementById("chkShowTradeHistorySelection").disabled = false;
    document.getElementById("chkShowPriceHistorySelection").disabled = false;
}

function extendMDQ(obj, src) {
    Object.keys(src).forEach(function (key) { obj[key] = src[key]; });
    return obj;
}

function FindSymbolsInWatchlists() {
    if (!gbDoingCreateOrders) {
        if (gWatchlists.length > 0) {
            let sSymbolsToLookupTmp = TrimLikeVB(document.getElementById("txtSymbols").value);
            let sAlertMsg = "";
            let sAlertSep = "";
            let sWLExclusionList = ",DEFAULT,EVERYTHING,INDEXES,ACCOUNT,"
            if (sSymbolsToLookupTmp != "") {
                sSymbolsToLookupTmp = sSymbolsToLookupTmp.toUpperCase();
                sSymbolsToLookupTmp = GetUniqueListOfSymbols(sSymbolsToLookupTmp);
                let vTmp = sSymbolsToLookupTmp.split(",");
                let idxSymLimit = 0;
                if (vTmp.length > 3) {
                    idxSymLimit = 3;
                } else {
                    idxSymLimit = vTmp.length;
                }
                let sSymbolsToLookup = "";
                let sSymbolsToLookupSep = "";
                for (let idxSym = 0; idxSym < idxSymLimit; idxSym++) {
                    let sSep = "";
                    let sWatchlists = "";
                    sSymbolsToLookup = sSymbolsToLookup + sSymbolsToLookupSep + vTmp[idxSym];
                    sSymbolsToLookupSep = ", ";
                    for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
                        if (sWLExclusionList.indexOf("," + UnReplace_XMLChar(gWatchlists[idxWL].name).toUpperCase() + ",") == -1) {
                            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                                if (vTmp[idxSym] == gWatchlists[idxWL].WLItems[idxWLItem].symbol.toUpperCase()) {
                                    if (gWatchlists[idxWL].name.substr(0, gsAccountOldGLBase.length) != gsAccountOldGLBase) {
                                        sWatchlists = sWatchlists + sSep + UnReplace_XMLChar(gWatchlists[idxWL].name) + " (" + gWatchlists[idxWL].accountName + ")";
                                        sSep = "\n           ";
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    if (sWatchlists != "") {
                        sAlertMsg = sAlertMsg + sAlertSep + vTmp[idxSym] + " -- " + sWatchlists;
                        sAlertSep = "\n\n";
                    }
                }
                if (sAlertMsg != "") {
                    alert(sAlertMsg);
                } else {
                    alert(sSymbolsToLookup + " are not contained in any watchlist.");
                }
            }
        }
    }
}

function FormatDateForTD(d) {
    let s = "";
    let iMonth = d.getMonth() + 1;
    let iDay = d.getDate();
    let iYear = d.getYear();

    if (iYear < 1900) {
        iYear += 1900;
    }

    s += iYear + "-";                         //Get year.

    if (iMonth > 9) {
        s += iMonth + "-";            //Get month
    }
    else {
        s += "0" + iMonth + "-";            //Get month
    }
    if (iDay > 9) {
        s += iDay;                   //Get day
    }
    else {
        s += "0" + iDay;                   //Get day
    }
    return s;
}

function FormatDateForTDESTUTC(dIn) {
    let s = "";
    //let d = new Date(dIn.getTime() - 300 * 60 * 1000);
    let d = dIn;
    let iMonth = d.getUTCMonth() + 1;
    let iDay = d.getUTCDate();
    let iYear = d.getUTCFullYear();

    if (iYear < 1900) {
        iYear += 1900;
    }

    s += iYear + "-";                         //Get year.

    if (iMonth > 9) {
        s += iMonth + "-";            //Get month
    }
    else {
        s += "0" + iMonth + "-";            //Get month
    }
    if (iDay > 9) {
        s += iDay;                   //Get day
    }
    else {
        s += "0" + iDay;                   //Get day
    }
    return s;
}

function GenerateWLAutoCloseSymbolOrders(sAccountId, iLastUpdateDateTime, idxWL, bInitializing, iEndDate, bAddStartDateToName) {
    gsLastErrors.length = 0;
    gsAllSuccess.length = 0;

    let iQuantity = iLastUpdateDateTime;
    let sQuantity = iQuantity.toString();

    let iAveragePrice = iEndDate; //current update date and time
    let sAveragePrice = iAveragePrice.toString();

    let sdefaultUpdateGLDate = gWatchlists[idxWL].defaultUpdateGLDate;

    let bOkToContinue = true;

    if (bAddStartDateToName) {
        let s = "<?xml version=\"1.0\"?>" + "\r\n";
        s = s + "<command><commandtext>";
        s = s + "UpdateWLDates '" + gWatchlists[idxWL].watchlistId + "','" + sdefaultUpdateGLDate + "', '" + sQuantity + "'";
        s = s + "</commandtext>";
        s = s + "<returnsvalues>False</returnsvalues>";
        s = s + "</command>";

        gsLastError = "";
        switch (PostWLHTTP(s, 0)) {
            case 0: //success
            case 4: //responsetext == ""
            case 5: //responsetext == null
                {

                    break;
                }
            default: //unknown error
                {
                    gsLastErrors[gsLastErrors.length] = "Error updating WLMain dates. -- " + gsLastError;
                    bOkToContinue = false;
                }
        }
    }

    if (bOkToContinue) {
        let sSymbolsToUpdate = "";
        let sSymbolsToUpdateSep = "";
        for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
            let bUseThisSymbol = true;
            if (!bAddStartDateToName) {
                bUseThisSymbol = gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder;
            }
            if (bUseThisSymbol) {
                let sCommission = "";
                let dLastCommision = 0.0;
                if (!bInitializing) {
                    dLastCommision = gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.averagePrice;
                }
                if (gSymbolsAuto.length > 0) {
                    for (let idxSym = 0; idxSym < gSymbolsAuto.length; idxSym++) {
                        if (gSymbolsAuto[idxSym].symbol == gWatchlists[idxWL].WLItems[idxWLItem].symbol) {
                            let sLastAssetType = gSymbolsAuto[idxSym].assetType;
                            oSymbolPrice = gSymbolsAuto[idxSym].SymbolPrice;
                            if (sLastAssetType == "OPTION") {
                                let dSelectNum = (-1 * gSymbolsAuto[idxSym].buy) + gSymbolsAuto[idxSym].sell; // + (gSymbolsAuto[idxSym].shares * 100 * dCurrentPrice);
                                dSelectNum = dSelectNum + dLastCommision;
                                sCommission = FormatDecimalNumber(dSelectNum, 3, 2, "");
                            } else {
                                let dSelectNum = (-1 * gSymbolsAuto[idxSym].buy) + gSymbolsAuto[idxSym].sell; // + (gSymbolsAuto[idxSym].shares * dCurrentPrice);
                                dSelectNum = dSelectNum + dLastCommision;
                                sCommission = FormatDecimalNumber(dSelectNum, 3, 2, "");
                            }
                            break;
                        }
                    }
                }
                if (sCommission == "") {
                    //didn't find any trades for this symbol so just carry over the previous commission if not initializing, or if initializing set the commission to 0
                    if (bInitializing) {
                        dLastCommision = 0.0;
                    }
                    //if (dLastCommision < 0.0) {
                    //    dLastCommision = (-1 * dLastCommision) + 1000000.0;
                    //}
                    sCommission = FormatDecimalNumber(dLastCommision, 3, 2, "");
                }
                //always update the update times whether anything changed or not
                //update WLInfo
                gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate = iAveragePrice;
                gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateStartDate = iQuantity;

                let sSymbol = gWatchlists[idxWL].WLItems[idxWLItem].symbol.toUpperCase();

                sSymbolsToUpdate = sSymbolsToUpdate + sSymbolsToUpdateSep + sSymbol + "," + sCommission + "," + sQuantity + "," + sAveragePrice;
                sSymbolsToUpdateSep = "|";

            //gsLastError = "";
            //if (UpdateWLSymbol("3", gWatchlists[idxWL].watchlistId, "", sSymbol, "", sCommission, sQuantity, sAveragePrice, "", "", "") == "") {
            //    if (gsLastError != "") {
            //        gsLastErrors[gsLastErrors.length] = "Error updating " + sSymbol + ". Retry using an Update G/L start date." + " -- " + gsLastError;
            //    } else {
            //        gsLastErrors[gsLastErrors.length] = "Error updating " + sSymbol + ". Retry using an Update G/L start date.";
            //    }
            //} else {
            //    gsAllSuccess[gsAllSuccess.length] = "Successfully updated " + sSymbol;
            //}
                /*sWhatToUpdate = 0 - insert all and return symbolid
            *                1 - update all fields and return symbolid
            *                2 - update acquired date and return symbolid
            *                3 = update quantity (start date), average price (end date), commission and return symbolid
            *                4 = update hidden and return symbolid */
            }
        }
        if (sSymbolsToUpdate != "") {
            window.setTimeout("UpdateSymbolsAfterGLUpdate(true, 0, 0, " + idxWL.toString() + ", '" + sSymbolsToUpdate + "')", 50);
            return;
        }
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    gbDoingCreateOrders = false;
    DoGetTDData();

    GetTradesCanceled();

}

function GenerateWLBuySellOrders(sAccountId, sBuySell, sPercent, dSelectNum, iShares, idxWL, bExisting) {
    //sBuySell = either "BUY" or "SELL"
    //if sPercent != "" then buying dSelectnum percentage of shares based on what is currently owned for the selected symbols
    //if sPercent == "" and iShares == 0 then buying dSelectnum worth of shares for the selected symbols
    //if sPercent == "" and iShares != 0 then buying iShares number of shares for the selected symbols
    //debugger
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    let sSymbolsThisWL = "";
    let sSep = "";
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
            sSymbolsThisWL = sSymbolsThisWL + sSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
            sSep = ",";
        }
    }
    sSymbolsThisWL = "," + GetUniqueListOfSymbols(sSymbolsThisWL) + ",";
    gTDOrders.length = 0;
    gOrdersToPlace.length = 0;
    if (sPercent != "") {
        //buying or selling a percentage of shares based on what is currently owned
        if (gAccounts.length > 0) {
            for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
                if (gAccounts[idxAccounts].accountId == sAccountId) {
                    let oAccount = new Account();
                    oAccount = gAccounts[idxAccounts];
                    let bAddOrdersForThisAccount = false;
                    if (oAccount.positions.length > 0) {
                        for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                            let oPosition = new Position();
                            oPosition = oAccount.positions[idxPosition];
                            if (oPosition.assetType == "EQUITY") {
                                if (sSymbolsThisWL.indexOf("," + oPosition.symbol.toUpperCase() + ",") != -1) {
                                    bAddOrdersForThisAccount = true;
                                    break;
                                }
                            }
                        }
                        if (bAddOrdersForThisAccount) {
                            gTDOrders.length = 0;
                            gOrdersToPlace.length = 0;
                            for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                                let oPosition = new Position();
                                oPosition = oAccount.positions[idxPosition];
                                if (oPosition.assetType == "EQUITY") {
                                    if (sSymbolsThisWL.indexOf("," + oPosition.symbol.toUpperCase() + ",") != -1) {
                                        let oTDOrder = new TDOrder();
                                        oTDOrder.a02orderType = oTDOrder.a02orderType + "\"MARKET\", ";
                                        oTDOrder.a04duration = oTDOrder.a04duration + "\"DAY\", ";
                                        oTDOrder.a07instructionStart = oTDOrder.a07instructionStart + "\"" + sBuySell + "\", ";

                                        let iNumToBuySell = 0;
                                        iNumToBuySell = oPosition.longQuantity * (dSelectNum / 100.0);
                                        if (iNumToBuySell >= 1.0) {
                                            iNumToBuySell = Math.floor(iNumToBuySell);
                                        } else {
                                            iNumToBuySell = 0;
                                        }
                                        if (iNumToBuySell > 0) {
                                            oTDOrder.a08quantity = oTDOrder.a08quantity + iNumToBuySell.toString() + ", ";
                                            oTDOrder.a10symbol = oTDOrder.a10symbol + "\"" + oPosition.symbol + "\", "
                                            oTDOrder.symbol = oPosition.symbol;
                                            gTDOrders[gTDOrders.length] = oTDOrder;

                                            if (document.getElementById("chkPlace" + sThisId).checked) {
                                                let oTDSavedOrder = new TDSavedOrder();
                                                oTDSavedOrder.orderType = "MARKET";
                                                oTDSavedOrder.a02orderType = oTDOrder.a02orderType;
                                                oTDSavedOrder.a02Aprice = oTDOrder.a02Aprice;
                                                oTDSavedOrder.a04duration = oTDOrder.a04duration;
                                                oTDSavedOrder.a07instructionStart = oTDOrder.a07instructionStart;
                                                oTDSavedOrder.instruction = sBuySell;
                                                oTDSavedOrder.a08quantity = oTDOrder.a08quantity;
                                                oTDSavedOrder.a10symbol = oTDOrder.a10symbol;
                                                oTDSavedOrder.symbol = oTDOrder.symbol;

                                                gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                                            }
                                        }
                                    }
                                }
                            }
                            //create orders here
                            if (gTDOrders.length > 0) {
                                gTDOrders.sort(sortBySymbol);
                                gbDoingCreateOrders = true;
                                SetWait();
                                SetWaitWL(idxWL);
                                if (sBuySell == "BUY") {
                                    window.setTimeout("PostWLBuyOrders(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
                                } else {
                                    window.setTimeout("PostWLSellOrders(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
                                }
                            } else {
                                alert("No orders were generated for this watchlist.");
                            }
                        } else {
                            alert("No positions selected.");
                        }
                    } else {
                        alert("There are no positions in this watchlist.");
                    }
                    break;
                }
            }
        }
    } else if ((sPercent == "") && (iShares == 0)) {
        //then buying or selling dSelectNum's worth of shares for each selected stock
        for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
            if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
                let oWatchList = new WLWatchList();
                let oWatchListItem = new WLItem();
                oWatchList = gWatchlists[idxWL];
                oWatchListItem = oWatchList.WLItems[idxWLItem];
                let sSymbol = oWatchListItem.symbol;

                let bFoundPosition = false;
                //get account position info if it exists
                let oPosition = null;
                for (let idxAccount = 0; idxAccount < gAccounts.length; idxAccount++) {
                    if ((gAccounts[idxAccount].positions.length > 0) &&
                        (gAccounts[idxAccount].accountId == sAccountId)) {
                        for (let idxPositions = 0; idxPositions < gAccounts[idxAccount].positions.length; idxPositions++) {
                            if (sSymbol == gAccounts[idxAccount].positions[idxPositions].symbol) {
                                bFoundPosition = true;
                                oPosition = new Position();
                                oPosition = gAccounts[idxAccount].positions[idxPositions];
                                oPosition.accountId = gAccounts[idxAccount].accountId;
                                oPosition.accountName = gAccounts[idxAccount].accountName;

                                let oTDOrder = new TDOrder();
                                oTDOrder.a02orderType = oTDOrder.a02orderType + "\"MARKET\", ";
                                oTDOrder.a04duration = oTDOrder.a04duration + "\"DAY\", ";
                                oTDOrder.a07instructionStart = oTDOrder.a07instructionStart + "\"" + sBuySell + "\", ";

                                let iNumToBuySell = 0;
                                if (sBuySell == "SELL") {
                                    if (oPosition.marketValue > 0) {
                                        if (dSelectNum > oPosition.marketValue) {
                                            dSelectNum = oPosition.marketValue;
                                        }
                                        if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                                            iNumToBuySell = Math.floor(dSelectNum / oMDQ[sSymbol].regularMarketLastPrice);
                                        }
                                    }
                                } else {
                                    if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                                        iNumToBuySell = Math.floor(dSelectNum / oMDQ[sSymbol].regularMarketLastPrice);
                                    }
                                }

                                if (iNumToBuySell > 0) {
                                    oTDOrder.a08quantity = oTDOrder.a08quantity + iNumToBuySell.toString() + ", ";
                                    oTDOrder.a10symbol = oTDOrder.a10symbol + "\"" + sSymbol + "\", "
                                    oTDOrder.symbol = sSymbol;
                                    gTDOrders[gTDOrders.length] = oTDOrder;

                                    if (document.getElementById("chkPlace" + sThisId).checked) {
                                        let oTDSavedOrder = new TDSavedOrder();
                                        oTDSavedOrder.orderType = "MARKET";
                                        oTDSavedOrder.a02orderType = oTDOrder.a02orderType;
                                        oTDSavedOrder.a02Aprice = oTDOrder.a02Aprice;
                                        oTDSavedOrder.a04duration = oTDOrder.a04duration;
                                        oTDSavedOrder.a07instructionStart = oTDOrder.a07instructionStart;
                                        oTDSavedOrder.instruction = sBuySell;
                                        oTDSavedOrder.a08quantity = oTDOrder.a08quantity;
                                        oTDSavedOrder.a10symbol = oTDOrder.a10symbol;
                                        oTDSavedOrder.symbol = oTDOrder.symbol;

                                        gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                                    }
                                }
                                break;
                            }
                        }
                        break;
                    }
                }
                if (!bFoundPosition) {
                    if (sBuySell == "BUY") {
                        let oTDOrder = new TDOrder();
                        oTDOrder.a02orderType = oTDOrder.a02orderType + "\"MARKET\", ";
                        oTDOrder.a04duration = oTDOrder.a04duration + "\"DAY\", ";
                        oTDOrder.a07instructionStart = oTDOrder.a07instructionStart + "\"" + sBuySell + "\", ";

                        let iNumToBuySell = 0;
                        if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                            iNumToBuySell = Math.floor(dSelectNum / oMDQ[sSymbol].regularMarketLastPrice);
                        }

                        if (iNumToBuySell > 0) {
                            oTDOrder.a08quantity = oTDOrder.a08quantity + iNumToBuySell.toString() + ", ";
                            oTDOrder.a10symbol = oTDOrder.a10symbol + "\"" + sSymbol + "\", "
                            oTDOrder.symbol = sSymbol;
                            gTDOrders[gTDOrders.length] = oTDOrder;

                            if (document.getElementById("chkPlace" + sThisId).checked) {
                                let oTDSavedOrder = new TDSavedOrder();
                                oTDSavedOrder.orderType = "MARKET";
                                oTDSavedOrder.a02orderType = oTDOrder.a02orderType;
                                oTDSavedOrder.a02Aprice = oTDOrder.a02Aprice;
                                oTDSavedOrder.a04duration = oTDOrder.a04duration;
                                oTDSavedOrder.a07instructionStart = oTDOrder.a07instructionStart;
                                oTDSavedOrder.instruction = sBuySell;
                                oTDSavedOrder.a08quantity = oTDOrder.a08quantity;
                                oTDSavedOrder.a10symbol = oTDOrder.a10symbol;
                                oTDSavedOrder.symbol = oTDOrder.symbol;

                                gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                            }
                        }

                    }
                }
            }
        }
        if (gTDOrders.length > 0) {
            gTDOrders.sort(sortBySymbol);
            gbDoingCreateOrders = true;
            SetWait();
            SetWaitWL(idxWL);
            if (sBuySell == "BUY") {
                window.setTimeout("PostWLBuyOrders(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
            } else {
                window.setTimeout("PostWLSellOrders(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
            }
        } else {
            alert("No orders were generated for this watchlist.");
        }
    } else if ((sPercent == "") && (iShares != 0)) {
        //then buying or selling iShares number of shares for each selected stock
        //warn if selling more the are currently owned
        if (sBuySell == "SELL") {
            let sWarning = "";
            if (gAccounts.length > 0) {
                for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
                    if (gAccounts[idxAccounts].accountId == sAccountId) {
                        let oAccount = new Account();
                        oAccount = gAccounts[idxAccounts];
                        let bAddOrdersForThisAccount = false;
                        if (oAccount.positions.length > 0) {
                            for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                                let oPosition = new Position();
                                oPosition = oAccount.positions[idxPosition];
                                if (oPosition.assetType == "EQUITY") {
                                    if (sSymbolsThisWL.indexOf("," + oPosition.symbol.toUpperCase() + ",") != -1) {
                                        bAddOrdersForThisAccount = true;
                                        break;
                                    }
                                }
                            }
                            if (bAddOrdersForThisAccount) {
                                gTDOrders.length = 0;
                                gOrdersToPlace.length = 0;
                                for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                                    let oPosition = new Position();
                                    oPosition = oAccount.positions[idxPosition];
                                    if (oPosition.assetType == "EQUITY") {
                                        if (sSymbolsThisWL.indexOf("," + oPosition.symbol.toUpperCase() + ",") != -1) {
                                            let oTDOrder = new TDOrder();
                                            oTDOrder.a02orderType = oTDOrder.a02orderType + "\"MARKET\", ";
                                            oTDOrder.a04duration = oTDOrder.a04duration + "\"DAY\", ";
                                            oTDOrder.a07instructionStart = oTDOrder.a07instructionStart + "\"" + sBuySell + "\", ";

                                            let iNumToBuySell = 0;
                                            if (oPosition.longQuantity > 0) {
                                                if (oPosition.longQuantity < iShares) {
                                                    if (sWarning == "") {
                                                        sWarning = "You own fewer shares of the following symbols than requested to sell:\n";
                                                    }
                                                    sWarning = sWarning + oPosition.symbol + " (" + oPosition.longQuantity + ")\n";
                                                    iNumToBuySell = oPosition.longQuantity;
                                                } else {
                                                    iNumToBuySell = iShares;
                                                }
                                            }
                                            if (iNumToBuySell > 0) {
                                                oTDOrder.a08quantity = oTDOrder.a08quantity + iNumToBuySell.toString() + ", ";
                                                oTDOrder.a10symbol = oTDOrder.a10symbol + "\"" + oPosition.symbol + "\", "
                                                oTDOrder.symbol = oPosition.symbol;
                                                gTDOrders[gTDOrders.length] = oTDOrder;

                                                if (document.getElementById("chkPlace" + sThisId).checked) {
                                                    let oTDSavedOrder = new TDSavedOrder();
                                                    oTDSavedOrder.orderType = "MARKET";
                                                    oTDSavedOrder.a02orderType = oTDOrder.a02orderType;
                                                    oTDSavedOrder.a02Aprice = oTDOrder.a02Aprice;
                                                    oTDSavedOrder.a04duration = oTDOrder.a04duration;
                                                    oTDSavedOrder.a07instructionStart = oTDOrder.a07instructionStart;
                                                    oTDSavedOrder.instruction = sBuySell;
                                                    oTDSavedOrder.a08quantity = oTDOrder.a08quantity;
                                                    oTDSavedOrder.a10symbol = oTDOrder.a10symbol;
                                                    oTDSavedOrder.symbol = oTDOrder.symbol;

                                                    gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                                                }
                                            }
                                        }
                                    }
                                }
                                //create orders here
                                if (gTDOrders.length > 0) {
                                    if (sWarning != "") {
                                        if (AreYouSure(sWarning)) {
                                            gTDOrders.sort(sortBySymbol);
                                            gbDoingCreateOrders = true;
                                            SetWait();
                                            SetWaitWL(idxWL);
                                            window.setTimeout("PostWLSellOrders(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
                                        }
                                    } else {
                                        gTDOrders.sort(sortBySymbol);
                                        gbDoingCreateOrders = true;
                                        SetWait();
                                        SetWaitWL(idxWL);
                                        window.setTimeout("PostWLSellOrders(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
                                    }
                                } else {
                                    alert("No orders were generated for this watchlist.");
                                }
                            } else {
                                alert("No positions selected.");
                            }
                        } else {
                            alert("There are no positions in this watchlist.");
                        }
                        break;
                    }
                }
            }
        } else { //doing BUY
            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
                    let oWatchList = new WLWatchList();
                    let oWatchListItem = new WLItem();
                    oWatchList = gWatchlists[idxWL];
                    oWatchListItem = oWatchList.WLItems[idxWLItem];
                    let sSymbol = oWatchListItem.symbol;

                    let oTDOrder = new TDOrder();
                    oTDOrder.a02orderType = oTDOrder.a02orderType + "\"MARKET\", ";
                    oTDOrder.a04duration = oTDOrder.a04duration + "\"DAY\", ";
                    oTDOrder.a07instructionStart = oTDOrder.a07instructionStart + "\"" + sBuySell + "\", ";

                    let iNumToBuySell = iShares;
                    if (iNumToBuySell > 0) {
                        oTDOrder.a08quantity = oTDOrder.a08quantity + iNumToBuySell.toString() + ", ";
                        oTDOrder.a10symbol = oTDOrder.a10symbol + "\"" + sSymbol + "\", "
                        oTDOrder.symbol = sSymbol;
                        gTDOrders[gTDOrders.length] = oTDOrder;

                        if (document.getElementById("chkPlace" + sThisId).checked) {
                            let oTDSavedOrder = new TDSavedOrder();
                            oTDSavedOrder.orderType = "MARKET";
                            oTDSavedOrder.a02orderType = oTDOrder.a02orderType;
                            oTDSavedOrder.a02Aprice = oTDOrder.a02Aprice;
                            oTDSavedOrder.a04duration = oTDOrder.a04duration;
                            oTDSavedOrder.a07instructionStart = oTDOrder.a07instructionStart;
                            oTDSavedOrder.instruction = sBuySell;
                            oTDSavedOrder.a08quantity = oTDOrder.a08quantity;
                            oTDSavedOrder.a10symbol = oTDOrder.a10symbol;
                            oTDSavedOrder.symbol = oTDOrder.symbol;

                            gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                        }
                    }
                }
            }
            if (gTDOrders.length > 0) {
                gTDOrders.sort(sortBySymbol);
                gbDoingCreateOrders = true;
                SetWait();
                SetWaitWL(idxWL);
                window.setTimeout("PostWLBuyOrders(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
            } else {
                alert("No orders were generated for this watchlist.");
            }
        }
    }

}

function GenerateWLBuySellOrdersLimit(sAccountId, sBuySell, sPercent, dSelectNum, iShares, idxWL, bExisting) {
    //sBuySell = either "BUY" or "SELL"
    //if sPercent != "" then buying dSelectnum percentage of shares based on what is currently owned for the selected symbols
    //if sPercent == "" and iShares == 0 then buying dSelectnum worth of shares for the selected symbols
    //if sPercent == "" and iShares != 0 then buying iShares number of shares for the selected symbols
    //debugger
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    let dtCancelTime = new Date(); //get todays date
    dtCancelTime.setMonth(dtCancelTime.getMonth() + 4);
    let sCancelTime = FormatDateForTD(dtCancelTime);

    let sSymbolsThisWL = "";
    let sSep = "";
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
            sSymbolsThisWL = sSymbolsThisWL + sSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
            sSep = ",";
        }
    }

    sSymbolsThisWL = "," + GetUniqueListOfSymbols(sSymbolsThisWL) + ",";
    gTDOrders.length = 0;
    gOrdersToPlace.length = 0;
    if (sPercent != "") {
        //buying or selling a percentage of shares based on what is currently owned
        if (gAccounts.length > 0) {
            for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
                if (gAccounts[idxAccounts].accountId == sAccountId) {
                    let oAccount = new Account();
                    oAccount = gAccounts[idxAccounts];
                    let bAddOrdersForThisAccount = false;
                    if (oAccount.positions.length > 0) {
                        for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                            let oPosition = new Position();
                            oPosition = oAccount.positions[idxPosition];
                            if (oPosition.assetType == "EQUITY") {
                                if (sSymbolsThisWL.indexOf("," + oPosition.symbol.toUpperCase() + ",") != -1) {
                                    bAddOrdersForThisAccount = true;
                                    break;
                                }
                            }
                        }
                        if (bAddOrdersForThisAccount) {
                            gTDOrders.length = 0;
                            for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                                let oPosition = new Position();
                                oPosition = oAccount.positions[idxPosition];
                                if (oPosition.assetType == "EQUITY") {
                                    if (sSymbolsThisWL.indexOf("," + oPosition.symbol.toUpperCase() + ",") != -1) {
                                        let oTDOrder = new TDOrder();
                                        oTDOrder.a02orderType = oTDOrder.a02orderType + "\"LIMIT\", ";
                                        oTDOrder.a04duration = oTDOrder.a04duration + "\"GOOD_TILL_CANCEL\", ";
                                        oTDOrder.a03FcancelTime = oTDOrder.a03FcancelTime + "\"" + sCancelTime + "\", ";
                                        oTDOrder.a07instructionStart = oTDOrder.a07instructionStart + "\"" + sBuySell + "\", ";

                                        let iNumToBuySell = 0;
                                        iNumToBuySell = oPosition.longQuantity * (dSelectNum / 100.0);
                                        if (iNumToBuySell >= 1.0) {
                                            iNumToBuySell = Math.floor(iNumToBuySell);
                                        } else {
                                            iNumToBuySell = 0;
                                        }

                                        if (iNumToBuySell > 0) {
                                            //get the price to use
                                            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                                                if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
                                                    let oWatchList = new WLWatchList();
                                                    let oWatchListItem = new WLItem();
                                                    oWatchList = gWatchlists[idxWL];
                                                    oWatchListItem = oWatchList.WLItems[idxWLItem];
                                                    let sSymbol = oWatchListItem.symbol;

                                                    if (sSymbol == oPosition.symbol) {
                                                        let dPrice = 0.0;
                                                        if (sBuySell == "BUY") {
                                                            if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                                                                dPrice = oMDQ[sSymbol].regularMarketLastPrice;
                                                            }
                                                        } else {
                                                            if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                                                                dPrice = oMDQ[sSymbol].regularMarketLastPrice - (oMDQ[sSymbol].regularMarketLastPrice * .01);
                                                            }
                                                        }

                                                        let sPrice = FormatMoney(dPrice);
                                                        if (parseFloat(sPrice) > 0) {
                                                            oTDOrder.a02Aprice = oTDOrder.a02Aprice + "\"" + sPrice + "\", ";
                                                            oTDOrder.a08quantity = oTDOrder.a08quantity + iNumToBuySell.toString() + ", ";
                                                            oTDOrder.a10symbol = oTDOrder.a10symbol + "\"" + sSymbol + "\", "
                                                            oTDOrder.symbol = sSymbol;
                                                            gTDOrders[gTDOrders.length] = oTDOrder;

                                                            if (document.getElementById("chkPlace" + sThisId).checked) {
                                                                let oTDSavedOrder = new TDSavedOrder();
                                                                //                                            oTDSavedOrder.savedOrderId = oWLItem.savedOrderId;
                                                                oTDSavedOrder.orderType = "LIMIT";
                                                                oTDSavedOrder.a02orderType = oTDOrder.a02orderType;
                                                                oTDSavedOrder.a02Aprice = oTDOrder.a02Aprice;
                                                                oTDSavedOrder.a03FcancelTime = oTDOrder.a03FcancelTime;
                                                                oTDSavedOrder.a04duration = oTDOrder.a04duration;
                                                                oTDSavedOrder.a07instructionStart = oTDOrder.a07instructionStart;
                                                                oTDSavedOrder.instruction = sBuySell;
                                                                oTDSavedOrder.a08quantity = oTDOrder.a08quantity;
                                                                oTDSavedOrder.a10symbol = oTDOrder.a10symbol;
                                                                oTDSavedOrder.symbol = oTDOrder.symbol;

                                                                gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                                                            }

                                                        } else {
                                                            alert("No price for " + sSymbol);
                                                        }
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //create orders here
                            if (gTDOrders.length > 0) {
                                gTDOrders.sort(sortBySymbol);
                                gbDoingCreateOrders = true;
                                SetWait();
                                SetWaitWL(idxWL);
                                if (sBuySell == "BUY") {
                                    window.setTimeout("PostWLBuyOrdersLimit(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
                                } else {
                                    window.setTimeout("PostWLSellOrdersLimit(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
                                }
                            } else {
                                alert("No orders were generated for this watchlist.");
                            }
                        } else {
                            alert("No positions selected.");
                        }
                    } else {
                        alert("There are no positions in this watchlist.");
                    }
                    break;
                }
            }
        }
    } else if ((sPercent == "") && (iShares == 0)) {
        //then buying or selling dSelectNum's worth of shares for each stock in the watchlist
        for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
            if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
                let oWatchList = new WLWatchList();
                let oWatchListItem = new WLItem();
                oWatchList = gWatchlists[idxWL];
                oWatchListItem = oWatchList.WLItems[idxWLItem];
                let sSymbol = oWatchListItem.symbol;
                let bFoundPosition = false;

                //get account position info if it exists
                let oPosition = null;
                for (let idxAccount = 0; idxAccount < gAccounts.length; idxAccount++) {
                    if ((gAccounts[idxAccount].positions.length > 0) &&
                        (gAccounts[idxAccount].accountId == sAccountId)) {
                        for (let idxPositions = 0; idxPositions < gAccounts[idxAccount].positions.length; idxPositions++) {
                            if (sSymbol == gAccounts[idxAccount].positions[idxPositions].symbol) {
                                bFoundPosition = true;
                                oPosition = new Position();
                                oPosition = gAccounts[idxAccount].positions[idxPositions];
                                oPosition.accountId = gAccounts[idxAccount].accountId;
                                oPosition.accountName = gAccounts[idxAccount].accountName;

                                let oTDOrder = new TDOrder();

                                oTDOrder.a02orderType = oTDOrder.a02orderType + "\"LIMIT\", ";
                                oTDOrder.a04duration = oTDOrder.a04duration + "\"GOOD_TILL_CANCEL\", ";
                                oTDOrder.a03FcancelTime = oTDOrder.a03FcancelTime + "\"" + sCancelTime + "\", ";
                                oTDOrder.a07instructionStart = oTDOrder.a07instructionStart + "\"" + sBuySell + "\", ";

                                let iNumToBuySell = 0;
                                if (sBuySell == "SELL") {
                                    if (oPosition.marketValue > 0) {
                                        if (dSelectNum > oPosition.marketValue) {
                                            dSelectNum = oPosition.marketValue;
                                        }
                                        if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                                            iNumToBuySell = Math.floor(dSelectNum / oMDQ[sSymbol].regularMarketLastPrice);
                                        }
                                    }
                                } else {
                                    if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                                        iNumToBuySell = Math.floor(dSelectNum / oMDQ[sSymbol].regularMarketLastPrice);
                                    }
                                }

                                if (iNumToBuySell > 0) {
                                    let sPrice = "0";
                                    if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                                        sPrice = FormatMoney(oMDQ[sSymbol].regularMarketLastPrice);
                                    }
                                    if (parseFloat(sPrice) > 0) {
                                        oTDOrder.a02Aprice = oTDOrder.a02Aprice + "\"" + sPrice + "\", ";
                                        oTDOrder.a08quantity = oTDOrder.a08quantity + iNumToBuySell.toString() + ", ";
                                        oTDOrder.a10symbol = oTDOrder.a10symbol + "\"" + sSymbol + "\", "
                                        oTDOrder.symbol = sSymbol;
                                        gTDOrders[gTDOrders.length] = oTDOrder;

                                        if (document.getElementById("chkPlace" + sThisId).checked) {
                                            let oTDSavedOrder = new TDSavedOrder();
                                            //                                            oTDSavedOrder.savedOrderId = oWLItem.savedOrderId;
                                            oTDSavedOrder.orderType = "LIMIT";
                                            oTDSavedOrder.a02orderType = oTDOrder.a02orderType;
                                            oTDSavedOrder.a02Aprice = oTDOrder.a02Aprice;
                                            oTDSavedOrder.a03FcancelTime = oTDOrder.a03FcancelTime;
                                            oTDSavedOrder.a04duration = oTDOrder.a04duration;
                                            oTDSavedOrder.a07instructionStart = oTDOrder.a07instructionStart;
                                            oTDSavedOrder.instruction = sBuySell;
                                            oTDSavedOrder.a08quantity = oTDOrder.a08quantity;
                                            oTDSavedOrder.a10symbol = oTDOrder.a10symbol;
                                            oTDSavedOrder.symbol = oTDOrder.symbol;

                                            gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                                        }
                                    }
                                }
                                break;
                            }
                        }
                        break;
                    }
                }
                if (!bFoundPosition) {
                    if (sBuySell == "BUY") {
                        let oTDOrder = new TDOrder();

                        oTDOrder.a02orderType = oTDOrder.a02orderType + "\"LIMIT\", ";
                        oTDOrder.a04duration = oTDOrder.a04duration + "\"GOOD_TILL_CANCEL\", ";
                        oTDOrder.a03FcancelTime = oTDOrder.a03FcancelTime + "\"" + sCancelTime + "\", ";
                        oTDOrder.a07instructionStart = oTDOrder.a07instructionStart + "\"" + sBuySell + "\", ";

                        let iNumToBuySell = 0;
                        if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                            iNumToBuySell = Math.floor(dSelectNum / oMDQ[sSymbol].regularMarketLastPrice);
                        }

                        if (iNumToBuySell > 0) {
                            let sPrice = "0";
                            if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                                sPrice = FormatMoney(oMDQ[sSymbol].regularMarketLastPrice);
                            }
                            if (parseFloat(sPrice) > 0) {
                                oTDOrder.a02Aprice = oTDOrder.a02Aprice + "\"" + sPrice + "\", ";
                                oTDOrder.a08quantity = oTDOrder.a08quantity + iNumToBuySell.toString() + ", ";
                                oTDOrder.a10symbol = oTDOrder.a10symbol + "\"" + sSymbol + "\", "
                                oTDOrder.symbol = sSymbol;
                                gTDOrders[gTDOrders.length] = oTDOrder;

                                if (document.getElementById("chkPlace" + sThisId).checked) {
                                    let oTDSavedOrder = new TDSavedOrder();
                                    //                                            oTDSavedOrder.savedOrderId = oWLItem.savedOrderId;
                                    oTDSavedOrder.orderType = "LIMIT";
                                    oTDSavedOrder.a02orderType = oTDOrder.a02orderType;
                                    oTDSavedOrder.a02Aprice = oTDOrder.a02Aprice;
                                    oTDSavedOrder.a03FcancelTime = oTDOrder.a03FcancelTime;
                                    oTDSavedOrder.a04duration = oTDOrder.a04duration;
                                    oTDSavedOrder.a07instructionStart = oTDOrder.a07instructionStart;
                                    oTDSavedOrder.instruction = sBuySell;
                                    oTDSavedOrder.a08quantity = oTDOrder.a08quantity;
                                    oTDSavedOrder.a10symbol = oTDOrder.a10symbol;
                                    oTDSavedOrder.symbol = oTDOrder.symbol;

                                    gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (gTDOrders.length > 0) {
            gTDOrders.sort(sortBySymbol);
            gbDoingCreateOrders = true;
            SetWait();
            SetWaitWL(idxWL);
            if (sBuySell == "BUY") {
                window.setTimeout("PostWLBuyOrdersLimit(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
            } else {
                window.setTimeout("PostWLSellOrdersLimit(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
            }
        } else {
            alert("No orders were generated for this watchlist.");
        }
    } else if ((sPercent == "") && (iShares != 0)) {
        if (sBuySell == "SELL") {
            let sWarning = "";
            if (gAccounts.length > 0) {
                for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
                    if (gAccounts[idxAccounts].accountId == sAccountId) {
                        let oAccount = new Account();
                        oAccount = gAccounts[idxAccounts];
                        let bAddOrdersForThisAccount = false;
                        if (oAccount.positions.length > 0) {
                            for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                                let oPosition = new Position();
                                oPosition = oAccount.positions[idxPosition];
                                if (oPosition.assetType == "EQUITY") {
                                    if (sSymbolsThisWL.indexOf("," + oPosition.symbol.toUpperCase() + ",") != -1) {
                                        bAddOrdersForThisAccount = true;
                                        break;
                                    }
                                }
                            }
                            if (bAddOrdersForThisAccount) {
                                gTDOrders.length = 0;
                                for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                                    let oPosition = new Position();
                                    oPosition = oAccount.positions[idxPosition];
                                    if (oPosition.assetType == "EQUITY") {
                                        if (sSymbolsThisWL.indexOf("," + oPosition.symbol.toUpperCase() + ",") != -1) {
                                            let oTDOrder = new TDOrder();
                                            oTDOrder.a02orderType = oTDOrder.a02orderType + "\"LIMIT\", ";
                                            oTDOrder.a04duration = oTDOrder.a04duration + "\"GOOD_TILL_CANCEL\", ";
                                            oTDOrder.a03FcancelTime = oTDOrder.a03FcancelTime + "\"" + sCancelTime + "\", ";
                                            oTDOrder.a07instructionStart = oTDOrder.a07instructionStart + "\"" + sBuySell + "\", ";

                                            let iNumToBuySell = 0;
                                            if (oPosition.longQuantity > 0) {
                                                if (oPosition.longQuantity < iShares) {
                                                    if (sWarning == "") {
                                                        sWarning = "You own fewer shares of the following symbols than requested to sell:\n";
                                                    }
                                                    sWarning = sWarning + oPosition.symbol + " (" + oPosition.longQuantity + ")\n";
                                                    iNumToBuySell = oPosition.longQuantity;
                                                } else {
                                                    iNumToBuySell = iShares;
                                                }
                                            }

                                            if (iNumToBuySell > 0) {
                                                //get the price to use
                                                let sSymbol = oPosition.symbol;

                                                for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                                                    if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) && (sSymbol == gWatchlists[idxWL].WLItems[idxWLItem].symbol)) {
                                                        let dPrice = 0.0;

                                                        if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                                                            dPrice = oMDQ[sSymbol].regularMarketLastPrice - (oMDQ[sSymbol].regularMarketLastPrice * .01);
                                                        }

                                                        let sPrice = FormatMoney(dPrice);
                                                        if (parseFloat(sPrice) > 0) {
                                                            oTDOrder.a02Aprice = oTDOrder.a02Aprice + "\"" + sPrice + "\", ";
                                                            oTDOrder.a08quantity = oTDOrder.a08quantity + iNumToBuySell.toString() + ", ";
                                                            oTDOrder.a10symbol = oTDOrder.a10symbol + "\"" + sSymbol + "\", "
                                                            oTDOrder.symbol = sSymbol;
                                                            gTDOrders[gTDOrders.length] = oTDOrder;

                                                            if (document.getElementById("chkPlace" + sThisId).checked) {
                                                                let oTDSavedOrder = new TDSavedOrder();
                                                                //                                            oTDSavedOrder.savedOrderId = oWLItem.savedOrderId;
                                                                oTDSavedOrder.orderType = "LIMIT";
                                                                oTDSavedOrder.a02orderType = oTDOrder.a02orderType;
                                                                oTDSavedOrder.a02Aprice = oTDOrder.a02Aprice;
                                                                oTDSavedOrder.a03FcancelTime = oTDOrder.a03FcancelTime;
                                                                oTDSavedOrder.a04duration = oTDOrder.a04duration;
                                                                oTDSavedOrder.a07instructionStart = oTDOrder.a07instructionStart;
                                                                oTDSavedOrder.instruction = sBuySell;
                                                                oTDSavedOrder.a08quantity = oTDOrder.a08quantity;
                                                                oTDSavedOrder.a10symbol = oTDOrder.a10symbol;
                                                                oTDSavedOrder.symbol = oTDOrder.symbol;

                                                                gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                                                            }

                                                        } else {
                                                            alert("No price for " + sSymbol);
                                                        }

                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                //create orders here
                                if (gTDOrders.length > 0) {
                                    if (sWarning != "") {
                                        if (AreYouSure(sWarning)) {
                                            gTDOrders.sort(sortBySymbol);
                                            gbDoingCreateOrders = true;
                                            SetWait();
                                            SetWaitWL(idxWL);
                                            window.setTimeout("PostWLSellOrdersLimit(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
                                        }
                                    } else {
                                        gTDOrders.sort(sortBySymbol);
                                        gbDoingCreateOrders = true;
                                        SetWait();
                                        SetWaitWL(idxWL);
                                        window.setTimeout("PostWLSellOrdersLimit(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
                                    }
                                } else {
                                    alert("No orders were generated for this watchlist.");
                                }
                            } else {
                                alert("No positions selected.");
                            }
                        } else {
                            alert("There are no positions in this watchlist.");
                        }
                        break;
                    }
                }
            }
        } else { //BUY
            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
                    let oWatchList = new WLWatchList();
                    let oWatchListItem = new WLItem();
                    oWatchList = gWatchlists[idxWL];
                    oWatchListItem = oWatchList.WLItems[idxWLItem];
                    let sSymbol = oWatchListItem.symbol;

                    let oTDOrder = new TDOrder();

                    oTDOrder.a02orderType = oTDOrder.a02orderType + "\"LIMIT\", ";
                    oTDOrder.a04duration = oTDOrder.a04duration + "\"GOOD_TILL_CANCEL\", ";
                    oTDOrder.a03FcancelTime = oTDOrder.a03FcancelTime + "\"" + sCancelTime + "\", ";
                    oTDOrder.a07instructionStart = oTDOrder.a07instructionStart + "\"" + sBuySell + "\", ";

                    let iNumToBuySell = iShares;

                    if (iNumToBuySell > 0) {
                        let sPrice = "0";
                        if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                            sPrice = FormatMoney(oMDQ[sSymbol].regularMarketLastPrice);
                        }
                        if (parseFloat(sPrice) > 0) {
                            oTDOrder.a02Aprice = oTDOrder.a02Aprice + "\"" + sPrice + "\", ";
                            oTDOrder.a08quantity = oTDOrder.a08quantity + iNumToBuySell.toString() + ", ";
                            oTDOrder.a10symbol = oTDOrder.a10symbol + "\"" + sSymbol + "\", "
                            oTDOrder.symbol = sSymbol;
                            gTDOrders[gTDOrders.length] = oTDOrder;

                            if (document.getElementById("chkPlace" + sThisId).checked) {
                                let oTDSavedOrder = new TDSavedOrder();
                                //                                            oTDSavedOrder.savedOrderId = oWLItem.savedOrderId;
                                oTDSavedOrder.orderType = "LIMIT";
                                oTDSavedOrder.a02orderType = oTDOrder.a02orderType;
                                oTDSavedOrder.a02Aprice = oTDOrder.a02Aprice;
                                oTDSavedOrder.a03FcancelTime = oTDOrder.a03FcancelTime;
                                oTDSavedOrder.a04duration = oTDOrder.a04duration;
                                oTDSavedOrder.a07instructionStart = oTDOrder.a07instructionStart;
                                oTDSavedOrder.instruction = sBuySell;
                                oTDSavedOrder.a08quantity = oTDOrder.a08quantity;
                                oTDSavedOrder.a10symbol = oTDOrder.a10symbol;
                                oTDSavedOrder.symbol = oTDOrder.symbol;

                                gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                            }

                        }
                    }
                }
            }
            if (gTDOrders.length > 0) {
                gTDOrders.sort(sortBySymbol);
                gbDoingCreateOrders = true;
                SetWait();
                SetWaitWL(idxWL);
                window.setTimeout("PostWLBuyOrdersLimit(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
            } else {
                alert("No orders were generated for this watchlist.");
            }
        }
    }
}

function GenerateWLDeleteSymbolOrders(bFirstTime, sAccountId, idxWL, sSymbolsToDeleteIn, iProgressIncrementIn, idxSymStart) {
    let iProgressIncrement = iProgressIncrementIn;

    if (bFirstTime) {
        let sSymbolsToDelete = sSymbolsToDeleteIn.split(", ");
        giProgress = 50;
        iProgressIncrement = 100 / sSymbolsToDelete.length;
        gsLastErrors.length = 0;
        gsAllSuccess.length = 0;
        ShowProgress(true, false);
    }

    //DeleteWLDetailRecs(sWLID, sRecs)
    let re = /, /g;
    let sSymbolsToDelete = sSymbolsToDeleteIn.replace(re, ",");
    if (DeleteWLDetailRecs(gWatchlists[idxWL].watchlistId, sSymbolsToDelete) == "") {
        if (gsLastError != "") {
            gsLastErrors[gsLastErrors.length] = " Error deleting symbols" + " -- " + gsLastError;
        } else {
            gsLastErrors[gsLastErrors.length] = " Error deleting symbols";
        }
    } else {
        gsAllSuccess[gsAllSuccess.length] = "Successfully deleted symbols";
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    ShowProgress(false, true);
    gbDoingCreateOrders = false;
    DoGetTDData();
    SetDefault();
}

function GenerateWLDeleteWLOrders(idxWL) {
    gsLastErrors.length = 0;
    gsAllSuccess.length = 0;

    gsLastError = "";
    let sReturnValue = DeleteWL(gWatchlists[idxWL].watchlistId);
    if (sReturnValue != "0") {
        if (gsLastError != "") {
            gsLastErrors[gsLastErrors.length] = " Error deleting " + gWatchlists[idxWL].name + " -- " + gsLastError;
        } else {
            gsLastErrors[gsLastErrors.length] = " Error deleting " + gWatchlists[idxWL].name;
        }
    } else {
        gsAllSuccess[gsAllSuccess.length] = "Successfully deleted " + gWatchlists[idxWL].name;
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            wlDoRemoveDiv(gWatchlists[idxWL].watchlistId, gWatchlists[idxWL].accountId);
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    gbDoingCreateOrders = false;
    DoGetTDData();
    SetDefault();
}

function GenerateWLHideSymbolOrders(bFirstTime, idxWL, iProgressIncrementIn, idxWLItemStart) {
    let iProgressIncrement = iProgressIncrementIn;

    if (bFirstTime) {
        let iNumSelected = 0;
        for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
            if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
                iNumSelected++;
            }
        }
        giProgress = 0;
        if (iNumSelected > 0) {
            iProgressIncrement = 100 / iNumSelected;
        } else {
            iProgressIncrement = 1;
        }
        gsLastErrors.length = 0;
        gsAllSuccess.length = 0;
        ShowProgress(true, false);
    }

    let sSymbolsToUpdate = "";
    let sSymbolsToUpdateSep = "";
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
            let sSymbol = gWatchlists[idxWL].WLItems[idxWLItem].symbol.toUpperCase();
            sSymbolsToUpdate = sSymbolsToUpdate + sSymbolsToUpdateSep + sSymbol + ",1";
            sSymbolsToUpdateSep = "|";
        }
    }
    if (sSymbolsToUpdate != "") {
        window.setTimeout("UpdateSymbolsChangeHidden(true, 0, 0, " + idxWL.toString() + ", '" + sSymbolsToUpdate + "')", 50);
        return;
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    ShowProgress(false, true);
    gbDoingCreateOrders = false;
    DoGetTDData();
    SetDefault();
}

function GenerateWLOpenSymbolOrders(sAccountId, idxWL, sThisPopupId, sSymbolsToLookup, sPurchasedDate, sGL, iStartDateIn, iEndDateIn, sDescriptionIn, sOldGLIn, sCatalystDateIn) {
    gsLastErrors.length = 0;
    gsAllSuccess.length = 0;

    let sQuantity = iStartDateIn.toString();
    let sAveragePrice = iEndDateIn.toString(); //current update date and time
    let sSymbol = sSymbolsToLookup.toUpperCase();

    gsLastError = "";

    if (UpdateWLSymbol("0", gWatchlists[idxWL].watchlistId, sPurchasedDate, sSymbol, sDescriptionIn, sGL, sQuantity, sAveragePrice, "0", sOldGLIn, sCatalystDateIn) == "") {
        if (gsLastError != "") {
            gsLastErrors[gsLastErrors.length] = " Error adding " + sSymbol + " -- " + gsLastError;
        } else {
            gsLastErrors[gsLastErrors.length] = " Error adding " + sSymbol;
        }
    } else {
        gsAllSuccess[gsAllSuccess.length] = "Successfully added " + sSymbol;
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    wlDoRemoveDivPopup(sThisPopupId);
}

function GenerateWLOpenSymbolOrdersChangeAcquiredDate(idxWL, sThisPopupId, sAcquiredDate) {
    gsLastErrors.length = 0;
    gsAllSuccess.length = 0;

    let sSymbolsToUpdate = "";
    let sSymbolsToUpdateSep = "";
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
            let sSymbol = gWatchlists[idxWL].WLItems[idxWLItem].symbol.toUpperCase();
            sSymbolsToUpdate = sSymbolsToUpdate + sSymbolsToUpdateSep + sSymbol + "," + sAcquiredDate;
            sSymbolsToUpdateSep = "|";
        }
    }
    if (sSymbolsToUpdate != "") {
        window.setTimeout("UpdateSymbolsChangeAcquiredDate(true, 0, 0, " + idxWL.toString() + ", '" + sThisPopupId+ "', '" + sSymbolsToUpdate + "')", 50);
        return;
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
}

function GenerateWLOpenSymbolOrdersChangeAll(idxWL, sThisPopupId, sAcquiredDate, sCatalystDate, sDescription, sOldGL) {

    let sSymbol = "";
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
            sSymbol = gWatchlists[idxWL].WLItems[idxWLItem].symbol.toUpperCase();
            break;
        }
    }
    if (sSymbol != "") {
        window.setTimeout("UpdateSymbolsChangeAll(" + idxWL.toString() + ", '" + sThisPopupId + "', '" + sSymbol + "', '" + sAcquiredDate + "', '" + sCatalystDate + "', '" + sDescription + "', '" + sOldGL + "')", 50);
    }

}

function GenerateWLOpenSymbolOrdersChangeCatalystDate(idxWL, sThisPopupId, sCatalystDate) {
    gsLastErrors.length = 0;
    gsAllSuccess.length = 0;

    let sSymbolsToUpdate = "";
    let sSymbolsToUpdateSep = "";
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
            let sSymbol = gWatchlists[idxWL].WLItems[idxWLItem].symbol.toUpperCase();
            sSymbolsToUpdate = sSymbolsToUpdate + sSymbolsToUpdateSep + sSymbol + "," + sCatalystDate;
            sSymbolsToUpdateSep = "|";
        }
    }
    if (sSymbolsToUpdate != "") {
        window.setTimeout("UpdateSymbolsChangeCatalystDate(true, 0, 0, " + idxWL.toString() + ", '" + sThisPopupId + "', '" + sSymbolsToUpdate + "')", 50);
        return;
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
}

function GenerateWLOpenSymbolOrdersChangeDescription(idxWL, sThisPopupId, sSymbolDescription) {
    gsLastErrors.length = 0;
    gsAllSuccess.length = 0;

    let sSymbolsToUpdate = "";
    let sSymbolsToUpdateSep = "";
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
            let sSymbol = gWatchlists[idxWL].WLItems[idxWLItem].symbol.toUpperCase();
            sSymbolsToUpdate = sSymbolsToUpdate + sSymbolsToUpdateSep + sSymbol + "," + sSymbolDescription;
            sSymbolsToUpdateSep = "|";
        }
    }
    if (sSymbolsToUpdate != "") {
        window.setTimeout("UpdateSymbolsChangeSymDescription(true, 0, 0, " + idxWL.toString() + ", '" + sThisPopupId + "', '" + sSymbolsToUpdate + "')", 50);
        return;
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
}

function GenerateWLOpenSymbolOrdersChangeOldGL(idxWL, sOldGL) {
    gsLastErrors.length = 0;
    gsAllSuccess.length = 0;

    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
            let sSymbol = gWatchlists[idxWL].WLItems[idxWLItem].symbol.toUpperCase();

            gsLastError = "";
            if (UpdateWLSymbol("6", gWatchlists[idxWL].watchlistId, "", sSymbol, "", "", "", "", "0", sOldGL, "") == "") {
                if (gsLastError != "") {
                    gsLastErrors[gsLastErrors.length] = " Error updating " + sSymbol + " -- " + gsLastError;
                } else {
                    gsLastErrors[gsLastErrors.length] = " Error updating " + sSymbol;
                }
            } else {
                gsAllSuccess[gsAllSuccess.length] = "Successfully updated " + sSymbol;
            }
            /*sWhatToUpdate = 0 - insert all and return wlid
             *                1 - update all fields and return wlid
             *                2 - update acquired date and return wlid
             *                3 = update laststartdate, lastenddate, gl and return wlid
             *                4 = update hidden and return wlid
             *          	  5 = update sym_description and return wlid
             *				  6 = update oldgl and return wlid 
             *				  7 = update catalystdate and return wlid */
        }
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    gbDoingCreateOrders = false;
    DoGetTDData();
    SetDefault();
}

function GenerateWLTrailingStopOrders(sAccountId, dSelectNum, sSymbolsThisWL, idxWL) {

    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

    //get cancel time
    let dtCancelTime = new Date(); //get todays date
    dtCancelTime.setMonth(dtCancelTime.getMonth() + 4);
    let sCancelTime = FormatDateForTD(dtCancelTime);

    //have percentage to sell so now get all of the symbols for this account
    if (gAccounts.length > 0) {
        for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
            if (gAccounts[idxAccounts].accountId == sAccountId) {
                let oAccount = new Account();
                oAccount = gAccounts[idxAccounts];
                let bAddOrdersForThisAccount = false;
                if (oAccount.positions.length > 0) {
                    for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                        let oPosition = new Position();
                        oPosition = oAccount.positions[idxPosition];
                        if (oPosition.assetType == "EQUITY") {
                            if (sSymbolsThisWL.indexOf("," + oPosition.symbol.toUpperCase() + ",") != -1) {
                                bAddOrdersForThisAccount = true;
                                break;
                            }
                        }
                    }
                    if (bAddOrdersForThisAccount) {
                        gTDOrders.length = 0;
                        gOrdersToPlace.length = 0;
                        for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                            let oPosition = new Position();
                            oPosition = oAccount.positions[idxPosition];
                            if (oPosition.assetType == "EQUITY") {
                                if (sSymbolsThisWL.indexOf("," + oPosition.symbol.toUpperCase() + ",") != -1) {
                                    let oTDOrder = new TDOrder();
                                    oTDOrder.a02orderType = oTDOrder.a02orderType + "\"TRAILING_STOP\", ";
                                    oTDOrder.a04duration = oTDOrder.a04duration + "\"GOOD_TILL_CANCEL\", ";
                                    oTDOrder.a07instructionStart = oTDOrder.a07instructionStart + "\"SELL\", ";
                                    oTDOrder.a03DstopPriceOffset = oTDOrder.a03DstopPriceOffset + FormatDecimalNumber(dSelectNum, 5, 2, "") + ", ";
                                    oTDOrder.a03FcancelTime = oTDOrder.a03FcancelTime + "\"" + sCancelTime + "\", ";
                                    oTDOrder.a08quantity = oTDOrder.a08quantity + oPosition.longQuantity.toString() + ", ";
                                    oTDOrder.a10symbol = oTDOrder.a10symbol + "\"" + oPosition.symbol + "\", "
                                    oTDOrder.symbol = oPosition.symbol;
                                    gTDOrders[gTDOrders.length] = oTDOrder;

                                    if (document.getElementById("chkPlace" + sThisId).checked) {
                                        let oTDSavedOrder = new TDSavedOrder();
                                        oTDSavedOrder.orderType = "TRAILING_STOP";
                                        oTDSavedOrder.a02orderType = oTDOrder.a02orderType;
                                        oTDSavedOrder.a02Aprice = oTDOrder.a02Aprice;
                                        oTDSavedOrder.a03DstopPriceOffset = oTDOrder.a03DstopPriceOffset;
                                        oTDSavedOrder.a03FcancelTime = oTDOrder.a03FcancelTime;
                                        oTDSavedOrder.a04duration = oTDOrder.a04duration;
                                        oTDSavedOrder.a07instructionStart = oTDOrder.a07instructionStart;
                                        oTDSavedOrder.instruction = "SELL";
                                        oTDSavedOrder.a08quantity = oTDOrder.a08quantity;
                                        oTDSavedOrder.a10symbol = oTDOrder.a10symbol;
                                        oTDSavedOrder.symbol = oTDOrder.symbol;

                                        gOrdersToPlace[gOrdersToPlace.length] = oTDSavedOrder;
                                    }
                                }
                            }
                        }
                        //create orders here
                        if (gTDOrders.length > 0) {
                            gTDOrders.sort(sortBySymbol);
                            gbDoingCreateOrders = true;
                            SetWait();
                            SetWaitWL(idxWL);
                            window.setTimeout("PostWLTrailingStopOrders(true, 0, 0, 0, " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
                        } else {
                            alert("No orders were generated for this watchlist.");
                        }
                    } else {
                        alert("No positions selected.");
                    }
                } else {
                    alert("There are no positions in this watchlist.");
                }
                break;
            }
        }
    }

}

function GenerateWLUnHideSymbolOrders(bFirstTime, idxWL, iProgressIncrementIn, idxWLItemStart) {
    let iProgressIncrement = iProgressIncrementIn;

    if (bFirstTime) {
        let iNumSelected = 0;
        for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
            if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
                iNumSelected++;
            }
        }
        giProgress = 0;
        if (iNumSelected > 0) {
            iProgressIncrement = 100 / iNumSelected;
        } else {
            iProgressIncrement = 1;
        }
        gsLastErrors.length = 0;
        gsAllSuccess.length = 0;
        ShowProgress(true, false);
    }

    let sSymbolsToUpdate = "";
    let sSymbolsToUpdateSep = "";
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if ((gWatchlists[idxWL].WLItems[idxWLItem].bSelected) && (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder)) {
            let sSymbol = gWatchlists[idxWL].WLItems[idxWLItem].symbol.toUpperCase();
            sSymbolsToUpdate = sSymbolsToUpdate + sSymbolsToUpdateSep + sSymbol + ",0";
            sSymbolsToUpdateSep = "|";
        }
    }
    if (sSymbolsToUpdate != "") {
        window.setTimeout("UpdateSymbolsChangeHidden(true, 0, 0, " + idxWL.toString() + ", '" + sSymbolsToUpdate + "')", 50);
        return;
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    ShowProgress(false, true);
    gbDoingCreateOrders = false;
    DoGetTDData();
    SetDefault();
}

function GetAccessCode() {
    let iTryCount = 0;
    let oCM;
    //debugger
    let urlEncodedData = "",
        urlEncodedDataPairs = [];

    urlEncodedDataPairs.push("grant_type=" + DoURLEncode("authorization_code"));
    urlEncodedDataPairs.push("access_type=" + DoURLEncode("offline"));
    urlEncodedDataPairs.push("code=" + gsBearerCode);
    urlEncodedDataPairs.push("client_id=" + DoURLEncode(gsTDAPIKey));
    urlEncodedDataPairs.push("redirect_uri=" + DoURLEncode(gsRedirectURL));
    //urlEncodedDataPairs.push("redirect_uri=" + DoURLEncode("https://localhost:8080"));



    // Combine the pairs into a single string and replace all %-encoded spaces to 
    // the '+' character; matches the behaviour of browser form submissions.
    urlEncodedData = urlEncodedDataPairs.join('&').replace(" ", '+');

    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------
        let sServerUrl = "https://api.tdameritrade.com/v1/oauth2/token"

        let xhttp = null;
        let iInnerTryCount = 0;
        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpen(xhttp, sServerUrl, "Error during xhttp.open to " + sServerUrl, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

            // send the request
            try {
                //debugger
                xhttp.send(urlEncodedData);
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        //alert("GetAccessCode xhttp.responseText = " + xhttp.responseText);

                        oCM = myJSON.parse(xhttp.responseText);
                        checkTDAPIError(oCM);
                        gAccessToken.access_token = oCM["access_token"];
                        if (!isUndefined(oCM["refresh_token"])) {
                            gAccessToken.refresh_token = DoURLEncode(oCM["refresh_token"]);
                        }
                        //gAccessToken.refresh_token = oCM["refresh_token"];
                        gAccessToken.token_type = oCM["token_type"];
                        gAccessToken.expires_in = oCM["expires_in"];
                        gAccessToken.scope = oCM["scope"];
                        gAccessToken.refresh_token_expires_in = oCM["refresh_token_expires_in"];
                        gAccessToken.access_token_expiration_time = (new Date()) + gAccessToken.expires_in;

                        iTryCount = 2;
                    }
                    else {
                        iTryCount++;
                        if (iTryCount < 2) {
                            xhttp = null;
                        }
                        else {
                            //alert ("GetAccessCode Error - HTTP response is blank." + " (" + iTryCount.toString() + ")");
                        }
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        //alert ("GetAccessCode Error - HTTP response is null." + " (" + iTryCount.toString() + ")");
                    }
                }
            }
            catch (e1) {
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    alert("GetAccessCode Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                }
            }
        }
        else {
            break;
        }
    }
}

function GetAccessCodeUsingRefreshToken() {
    let iTryCount = 0;
    let oCM;
    let bReturn = false;

    //debugger

    let urlEncodedData = "",
        urlEncodedDataPairs = [];

    urlEncodedDataPairs.push("grant_type=" + DoURLEncode("refresh_token"));
    //urlEncodedDataPairs.push("refresh_token=" + DoURLEncode(gAccessToken.refresh_token));
    urlEncodedDataPairs.push("refresh_token=" + gAccessToken.refresh_token);
    urlEncodedDataPairs.push("client_id=" + DoURLEncode(gsTDAPIKey));


    // Combine the pairs into a single string and replace all %-encoded spaces to 
    // the '+' character; matches the behaviour of browser form submissions.
    urlEncodedData = urlEncodedDataPairs.join('&').replace(" ", '+');

    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------
        let sServerUrl = "https://api.tdameritrade.com/v1/oauth2/token"

        let xhttp = null;
        let iInnerTryCount = 0;
        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpen(xhttp, sServerUrl, "Error during xhttp.open to " + sServerUrl, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

            // send the request
            try {
                //debugger
                xhttp.send(urlEncodedData);
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        //alert("GetAccessCodeUsingRefreshToken xhttp.responseText = " + xhttp.responseText);

                        oCM = myJSON.parse(xhttp.responseText);
                        checkTDAPIError(oCM);
                        gAccessToken.access_token = oCM["access_token"];
                        gAccessToken.expires_in = oCM["expires_in"];
                        gAccessToken.access_token_expiration_time = (new Date()) + gAccessToken.expires_in;

                        //                            document.getElementById("tdLoggedOnAs").innerHTML = "<b>Logged on as: " + gsLogonUser + "</b>&nbsp;Access Token Expiration:&nbsp;" + FormatDateWithTime(new Date((new Date()).getTime() + (gAccessToken.expires_in * 1000)), true, false);
                        document.getElementById("spanLoggedOnAs").innerHTML = "<b>Logged on as: " + gsLogonUser + "</b>" + gsStopLight;


                        iTryCount = 2;
                        bReturn = true;
                    }
                    else {
                        iTryCount++;
                        if (iTryCount < 2) {
                            xhttp = null;
                        }
                        else {
                            //alert ("GetAccessCodeUsingRefreshToken Error - HTTP response is blank." + " (" + iTryCount.toString() + ")");
                        }
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        //alert ("GetAccessCodeUsingRefreshToken Error - HTTP response is null." + " (" + iTryCount.toString() + ")");
                    }
                }
            }
            catch (e1) {
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    alert("GetAccessCodeUsingRefreshToken Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                }
            }
        }
        else {
            break;
        }
    }
    return bReturn;
}

function GetAccounts() {
    gsLogonUser = oACCP["userId"];
    gAccounts.length = 0;
    if (oACCP["accounts"].length > 0) {
        for (let idx = 0; idx < oACCP["accounts"].length; idx++) {
            let oAccount = new Account();
            oAccount.accountId = oACCP["accounts"][idx].accountId;
            oAccount.accountName = oACCP["accounts"][idx].displayName;

            gAccounts[gAccounts.length] = oAccount;
        }
    }
}

function GetAccountsDetails() {

    if (oACC.length > 0) {
        for (let idx = 0; idx < oACC.length; idx++) {
            for (let idxAccount = 0; idxAccount < gAccounts.length; idxAccount++) {
                if (gAccounts[idxAccount].accountId == oACC[idx].securitiesAccount.accountId) {
                    gAccounts[idxAccount].CBliquidationValue = oACC[idx].securitiesAccount.currentBalances.liquidationValue;
                    gAccounts[idxAccount].CBcashBalance = oACC[idx].securitiesAccount.currentBalances.cashBalance;
                    gAccounts[idxAccount].IBliquidationValue = oACC[idx].securitiesAccount.initialBalances.liquidationValue;
                    gAccounts[idxAccount].positions.length = 0;
                    //get the positions for this account
                    if (oACC[idx].securitiesAccount.positions != undefined) {
                        for (let idxPosition = 0; idxPosition < oACC[idx].securitiesAccount.positions.length; idxPosition++) {
                            let oPosition = new Position();
                            oPosition.averagePrice = oACC[idx].securitiesAccount.positions[idxPosition].averagePrice;
                            oPosition.currentDayProfitLoss = oACC[idx].securitiesAccount.positions[idxPosition].currentDayProfitLoss;
                            oPosition.currentDayProfitLossPercentage = oACC[idx].securitiesAccount.positions[idxPosition].currentDayProfitLossPercentage;
                            if (oACC[idx].securitiesAccount.positions[idxPosition].longQuantity != 0) {

                                oPosition.longQuantity = oACC[idx].securitiesAccount.positions[idxPosition].longQuantity;
                            } else if (oACC[idx].securitiesAccount.positions[idxPosition].shortQuantity != 0) {

                                oPosition.longQuantity = oACC[idx].securitiesAccount.positions[idxPosition].shortQuantity * -1;
                            } else {
                                oPosition.longQuantity = 0;
                            }
                            oPosition.marketValue = oACC[idx].securitiesAccount.positions[idxPosition].marketValue;
                            oPosition.assetType = oACC[idx].securitiesAccount.positions[idxPosition].instrument.assetType;
                            oPosition.symbol = oACC[idx].securitiesAccount.positions[idxPosition].instrument.symbol;
                            gAccounts[idxAccount].positions[gAccounts[idxAccount].positions.length] = oPosition;
                        }
                    }
                }
            }
        }
    }
}

function getCookie(name) {
    // Split cookie string and get all individual name=value pairs in an array
    let cookieArr = document.cookie.split(";");

    // Loop through the array elements
    for (let i = 0; i < cookieArr.length; i++) {
        let cookiePair = cookieArr[i].split("=");

        /* Removing whitespace at the beginning of the cookie name
        and compare it with the given string */
        if (name == cookiePair[0].trim()) {
            // Decode the cookie value and return
            return decodeURIComponent(cookiePair[1]);
        }
    }

    // Return null if not found
    return null;
}

function GetCurrentPrice(sSymbol) {

    //returns SymbolPrice object
    let iTryCount = 0;
    let dReturnVal = 0.0;
    let oSymbolPrice = new SymbolPrice();

    let oCM;

    let sServerUrlBase = "https://api.tdameritrade.com/v1/marketdata/" + sSymbol + "/quotes";
    //let sServerUrlBase = "https://api.tdameritrade.com/v1/marketdata/quotes?&symbol=" + DoURLEncode(sSymbol);

    iTryCount = 0;
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------
        let sServerUrl = sServerUrlBase;

        let xhttp = null;
        let iInnerTryCount = 0;
        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpenGet(xhttp, sServerUrl, "Error during xhttp.open to " + sServerUrl, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

            // send the request
            try {
                //debugger
                xhttp.send();
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        //alert("GetCurrentPrice xhttp.responseText length = " + xhttp.responseText.length);

                        oCM = myJSON.parse(xhttp.responseText);
                        switch (checkTDAPIError(oCM)) {
                            case 0: //no error
                                {
                                    if (oCM[sSymbol].description == undefined) {
                                        oSymbolPrice.description = "";
                                    } else {
                                        oSymbolPrice.description = oCM[sSymbol].description;
                                    }
                                    if (oCM[sSymbol].quoteTimeInLong == undefined) {
                                        oSymbolPrice.quoteTimeInLong = 0;
                                    } else {
                                        oSymbolPrice.quoteTimeInLong = oCM[sSymbol].quoteTimeInLong;
                                    }
                                    if (oCM[sSymbol].tradeTimeInLong == undefined) {
                                        oSymbolPrice.tradeTimeInLong = 0;
                                    } else {
                                        oSymbolPrice.tradeTimeInLong = oCM[sSymbol].tradeTimeInLong;
                                    }
                                    if (oCM[sSymbol].totalVolume == undefined) {
                                        oSymbolPrice.totalVolume = 0;
                                    } else {
                                        oSymbolPrice.totalVolume = oCM[sSymbol].totalVolume;
                                    }
                                    if (oCM[sSymbol].lastPrice == undefined) {
                                        oSymbolPrice.description = "Price not found.";
                                        oSymbolPrice.price = 0.0;
                                    } else {
                                        oSymbolPrice.price = oCM[sSymbol].lastPrice;
                                    }
                                    break;
                                }
                            case 1: //acces code expired
                                {
                                    xhttp = null;
                                    if (GetAccessCodeUsingRefreshToken()) {
                                        iTryCount++;
                                    } else {
                                        alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                        return;
                                    }
                                    break;
                                }
                            case 2: //other error
                                {
                                    break;
                                }
                            default:
                                {
                                    break;
                                }
                        }

                        iTryCount = 2;
                    }
                    else {
                        iTryCount++;
                        if (iTryCount < 2) {
                            xhttp = null;
                        }
                        else {
                            //alert ("GetCurrentPrice Error - HTTP response is blank." + " (" + iTryCount.toString() + ")");
                        }
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        //alert ("GetCurrentPrice Error - HTTP response is null." + " (" + iTryCount.toString() + ")");
                    }
                }
            }
            catch (e1) {
                //debugger
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    //alert("GetCurrentPrice Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                }
            }
        }
        else {
            break;
        }
    }
    return oSymbolPrice;

}

function GetCurrentPriceOption(sSymbol) {

    //returns SymbolPrice object
    let iTryCount = 0;
    let dReturnVal = 0.0;
    let oSymbolPrice = new SymbolPrice();

    let oCM;

    let sServerUrlBase = "https://api.tdameritrade.com/v1/marketdata/" + sSymbol + "/quotes";
    //let sServerUrlBase = "https://api.tdameritrade.com/v1/marketdata/quotes?&symbol=" + DoURLEncode(sSymbol);

    iTryCount = 0;
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------
        let sServerUrl = sServerUrlBase;

        let xhttp = null;
        let iInnerTryCount = 0;
        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpenGet(xhttp, sServerUrl, "Error during xhttp.open to " + sServerUrl, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

            // send the request
            try {
                //debugger
                xhttp.send();
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        //alert("GetCurrentPriceOption xhttp.responseText length = " + xhttp.responseText.length);

                        oCM = myJSON.parse(xhttp.responseText);
                        switch (checkTDAPIError(oCM)) {
                            case 0: //no error
                                {
                                    if (oCM[sSymbol].description == undefined) {
                                        oSymbolPrice.description = "";
                                    } else {
                                        oSymbolPrice.description = oCM[sSymbol].description;
                                    }
                                    oSymbolPrice.description = oCM[sSymbol].description;
                                    if (oCM[sSymbol].mark == undefined) {
                                        oSymbolPrice.description = "Price not found.";
                                        oSymbolPrice.price = 0.0;
                                    } else {
                                        oSymbolPrice.price = oCM[sSymbol].mark;
                                    }
                                    break;
                                }
                            case 1: //acces code expired
                                {
                                    xhttp = null;
                                    if (GetAccessCodeUsingRefreshToken()) {
                                        iTryCount++;
                                    } else {
                                        alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                        return;
                                    }
                                    break;
                                }
                            case 2: //other error
                                {
                                    break;
                                }
                            default:
                                {
                                    break;
                                }
                        }

                        iTryCount = 2;
                    }
                    else {
                        iTryCount++;
                        if (iTryCount < 2) {
                            xhttp = null;
                        }
                        else {
                            //alert ("GetCurrentPriceOption Error - HTTP response is blank." + " (" + iTryCount.toString() + ")");
                        }
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        //alert ("GetCurrentPriceOption Error - HTTP response is null." + " (" + iTryCount.toString() + ")");
                    }
                }
            }
            catch (e1) {
                //debugger
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    alert("GetCurrentPriceOption Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                }
            }
        }
        else {
            break;
        }
    }
    return oSymbolPrice;

}

function GetCurrentPrices() {
    //returns SymbolPrice object
    let iTryCount = 0;
    let oCM;
    let sServerUrlBase = "https://api.tdameritrade.com/v1/marketdata/quotes?&symbol="; // + DoURLEncode(sSymbols);
    let iSymbolLimit = 300;

    if (gSymbols.length > 0) {
        let sSymbols = "";
        let sSep = "";
        for (let idx = 0; idx < gSymbols.length; idx++) {
            sSymbols = sSymbols + sSep + gSymbols[idx].symbol;
            sSep = ",";
        }

        let sSymbolsToUse = GetUniqueListOfSymbols(sSymbols);

        let aServerUrls = new Array();
        let sServerUrl = "";
        let aSymbols = sSymbolsToUse.split(",");
        if (aSymbols.length > iSymbolLimit) {
            for (let idxXXX = 0; idxXXX < aSymbols.length; idxXXX = idxXXX + iSymbolLimit) {
                let iEnd = 0;
                let sThisSet = "";
                let sSep = "";
                if (idxXXX + iSymbolLimit < aSymbols.length) {
                    iEnd = idxXXX + iSymbolLimit;
                } else {
                    iEnd = aSymbols.length;
                }
                for (let idxSym = idxXXX; idxSym < iEnd; idxSym++) {
                    sThisSet = sThisSet + sSep + aSymbols[idxSym];
                    sSep = ",";
                }
                aServerUrls[aServerUrls.length] = sThisSet;
            }
        } else {
            aServerUrls[aServerUrls.length] = sSymbolsToUse;
        }

        for (let idxServerURL = 0; idxServerURL < aServerUrls.length; idxServerURL++) {
            sServerUrl = sServerUrlBase + DoURLEncode(aServerUrls[idxServerURL]);
            let sThisSetOfSymbols = "," + aServerUrls[idxServerURL] + ",";
            iTryCount = 0;
            while (iTryCount < 2) {
                let xhttp = null;
                let iInnerTryCount = 0;
                xhttp = oHTTP();
                while ((xhttp == null) && (iInnerTryCount < 5)) {
                    xhttp = oHTTP();
                    iInnerTryCount = iInnerTryCount + 1;
                }
                iInnerTryCount = 0;
                if (CheckHTTPOpenGet(xhttp, sServerUrl, "Error during xhttp.open to " + sServerUrl, false, false, "", "")) {
                    // set the request header
                    xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

                    // send the request
                    try {
                        //debugger
                        xhttp.send();
                        if (xhttp.responseText != null) {
                            if (xhttp.responseText != "") {
                                //alert("GetCurrentPrice xhttp.responseText length = " + xhttp.responseText.length);
                                oCM = myJSON.parse(xhttp.responseText);
                                switch (checkTDAPIError(oCM)) {
                                    case 0: //no error
                                        {
                                            for (let idxSymbol = 0; idxSymbol < gSymbols.length; idxSymbol++) {
                                                let sSymbol = gSymbols[idxSymbol].symbol;
                                                if (sThisSetOfSymbols.indexOf("," + sSymbol + ",") != -1) {
                                                    if (oCM[sSymbol] != null) {
                                                        if (gSymbols[idxSymbol].assetType == "OPTION") {
                                                            if (oCM[sSymbol].description == undefined) {
                                                                gSymbols[idxSymbol].SymbolPrice.description = "";
                                                            } else {
                                                                gSymbols[idxSymbol].SymbolPrice.description = oCM[sSymbol].description;
                                                            }
                                                            if (oCM[sSymbol].mark == undefined) {
                                                                gSymbols[idxSymbol].SymbolPrice.price = 0.0;
                                                                gSymbols[idxSymbol].SymbolPrice.description = "Option price not found";
                                                            } else {
                                                                gSymbols[idxSymbol].SymbolPrice.price = oCM[sSymbol].mark;
                                                            }
                                                        } else {
                                                            if (oCM[sSymbol].description == undefined) {
                                                                gSymbols[idxSymbol].SymbolPrice.description = "";
                                                            } else {
                                                                gSymbols[idxSymbol].SymbolPrice.description = oCM[sSymbol].description;
                                                            }
                                                            if (oCM[sSymbol].quoteTimeInLong == undefined) {
                                                                gSymbols[idxSymbol].SymbolPrice.quoteTimeInLong = 0;
                                                            } else {
                                                                gSymbols[idxSymbol].SymbolPrice.quoteTimeInLong = oCM[sSymbol].quoteTimeInLong;
                                                            }
                                                            if (oCM[sSymbol].tradeTimeInLong == undefined) {
                                                                gSymbols[idxSymbol].SymbolPrice.tradeTimeInLong = 0;
                                                            } else {
                                                                gSymbols[idxSymbol].SymbolPrice.tradeTimeInLong = oCM[sSymbol].tradeTimeInLong;
                                                            }
                                                            if (oCM[sSymbol].totalVolume == undefined) {
                                                                gSymbols[idxSymbol].SymbolPrice.totalVolume = 0;
                                                            } else {
                                                                gSymbols[idxSymbol].SymbolPrice.totalVolume = oCM[sSymbol].totalVolume;
                                                            }
                                                            if (oCM[sSymbol].lastPrice == undefined) {
                                                                gSymbols[idxSymbol].SymbolPrice.price = 0.0;
                                                                gSymbols[idxSymbol].SymbolPrice.description = "Lastprice not found";
                                                            } else {
                                                                gSymbols[idxSymbol].SymbolPrice.price = oCM[sSymbol].lastPrice;
                                                            }
                                                        }
                                                    } else {
                                                        gSymbols[idxSymbol].SymbolPrice.description = "Symbol not returned";
                                                        //debugger
                                                    }
                                                }
                                            }
                                            iTryCount = 2;
                                            break;
                                        }
                                    case 1: //acces code expired
                                        {
                                            xhttp = null;
                                            if (GetAccessCodeUsingRefreshToken()) {
                                                iTryCount++;
                                            } else {
                                                alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                                return;
                                            }
                                            break;
                                        }
                                    case 2: //other error
                                        {
                                            iTryCount = 2;
                                            break;
                                        }
                                    default:
                                        {
                                            iTryCount = 2;
                                            break;
                                        }
                                }
                            }
                            else {
                                iTryCount++;
                                if (iTryCount < 2) {
                                    xhttp = null;
                                }
                                else {
                                    //alert ("GetCurrentPrice Error - HTTP response is blank." + " (" + iTryCount.toString() + ")");
                                }
                            }
                        }
                        else {
                            iTryCount++;
                            if (iTryCount < 2) {
                                xhttp = null;
                            }
                            else {
                                //alert ("GetCurrentPrice Error - HTTP response is null." + " (" + iTryCount.toString() + ")");
                            }
                        }
                    }
                    catch (e1) {
                        //debugger
                        iTryCount++;
                        if (iTryCount < 2) {
                            xhttp = null;
                        }
                        else {
                            //alert("GetCurrentPrice Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                        }
                    }
                }
                else {
                    break;
                }
            }
        }
    }
}

function GetCurrentPricesAuto() {
    //fills in the SymbolPrice object in gSymbolsAuto
    let iTryCount = 0;
    let oCM;
    let sServerUrlBase = "https://api.tdameritrade.com/v1/marketdata/quotes?&symbol="; // + DoURLEncode(sSymbols);
    let iSymbolLimit = 300;

    if (gSymbolsAuto.length > 0) {
        let sSymbols = "";
        let sSep = "";
        for (let idx = 0; idx < gSymbolsAuto.length; idx++) {
            sSymbols = sSymbols + sSep + gSymbolsAuto[idx].symbol;
            sSep = ",";
        }

        let sSymbolsToUse = GetUniqueListOfSymbols(sSymbols);

        let aServerUrls = new Array();
        let sServerUrl = "";
        let aSymbols = sSymbolsToUse.split(",");
        if (aSymbols.length > iSymbolLimit) {
            for (let idxXXX = 0; idxXXX < aSymbols.length; idxXXX = idxXXX + iSymbolLimit) {
                let iEnd = 0;
                let sThisSet = "";
                let sSep = "";
                if (idxXXX + iSymbolLimit < aSymbols.length) {
                    iEnd = idxXXX + iSymbolLimit;
                } else {
                    iEnd = aSymbols.length;
                }
                for (let idxSym = idxXXX; idxSym < iEnd; idxSym++) {
                    sThisSet = sThisSet + sSep + aSymbols[idxSym];
                    sSep = ",";
                }
                aServerUrls[aServerUrls.length] = sThisSet;
            }
        } else {
            aServerUrls[aServerUrls.length] = sSymbolsToUse;
        }

        for (let idxServerURL = 0; idxServerURL < aServerUrls.length; idxServerURL++) {
            sServerUrl = sServerUrlBase + DoURLEncode(aServerUrls[idxServerURL]);
            let sThisSetOfSymbols = "," + aServerUrls[idxServerURL] + ",";
            iTryCount = 0;
            while (iTryCount < 2) {
                let xhttp = null;
                let iInnerTryCount = 0;
                xhttp = oHTTP();
                while ((xhttp == null) && (iInnerTryCount < 5)) {
                    xhttp = oHTTP();
                    iInnerTryCount = iInnerTryCount + 1;
                }
                iInnerTryCount = 0;
                if (CheckHTTPOpenGet(xhttp, sServerUrl, "Error during xhttp.open to " + sServerUrl, false, false, "", "")) {
                    // set the request header
                    xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

                    // send the request
                    try {
                        //debugger
                        xhttp.send();
                        if (xhttp.responseText != null) {
                            if (xhttp.responseText != "") {
                                //alert("GetCurrentPrice xhttp.responseText length = " + xhttp.responseText.length);
                                oCM = myJSON.parse(xhttp.responseText);
                                switch (checkTDAPIError(oCM)) {
                                    case 0: //no error
                                        {
                                            for (let idxSymbol = 0; idxSymbol < gSymbolsAuto.length; idxSymbol++) {
                                                let sSymbol = gSymbolsAuto[idxSymbol].symbol;
                                                if (sThisSetOfSymbols.indexOf("," + sSymbol + ",") != -1) {
                                                    if (oCM[sSymbol] != null) {
                                                        if (gSymbolsAuto[idxSymbol].assetType == "OPTION") {
                                                            if (oCM[sSymbol].description == undefined) {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.description = "";
                                                            } else {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.description = oCM[sSymbol].description;
                                                            }
                                                            if (oCM[sSymbol].mark == undefined) {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.price = 0.0;
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.description = "Option price not found";
                                                            } else {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.price = oCM[sSymbol].mark;
                                                            }
                                                        } else {
                                                            if (oCM[sSymbol].description == undefined) {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.description = "";
                                                            } else {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.description = oCM[sSymbol].description;
                                                            }
                                                            if (oCM[sSymbol].quoteTimeInLong == undefined) {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.quoteTimeInLong = 0;
                                                            } else {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.quoteTimeInLong = oCM[sSymbol].quoteTimeInLong;
                                                            }
                                                            if (oCM[sSymbol].tradeTimeInLong == undefined) {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.tradeTimeInLong = 0;
                                                            } else {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.tradeTimeInLong = oCM[sSymbol].tradeTimeInLong;
                                                            }
                                                            if (oCM[sSymbol].totalVolume == undefined) {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.totalVolume = 0;
                                                            } else {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.totalVolume = oCM[sSymbol].totalVolume;
                                                            }
                                                            if (oCM[sSymbol].lastPrice == undefined) {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.price = 0.0;
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.description = "Lastprice not found";
                                                            } else {
                                                                gSymbolsAuto[idxSymbol].SymbolPrice.price = oCM[sSymbol].lastPrice;
                                                            }
                                                        }
                                                    } else {
                                                        gSymbolsAuto[idxSymbol].SymbolPrice.description = "Symbol not returned";
                                                        //debugger
                                                    }
                                                }
                                            }
                                            iTryCount = 2;
                                            break;
                                        }
                                    case 1: //acces code expired
                                        {
                                            xhttp = null;
                                            if (GetAccessCodeUsingRefreshToken()) {
                                                iTryCount++;
                                            } else {
                                                alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                                return;
                                            }
                                            break;
                                        }
                                    case 2: //other error
                                        {
                                            iTryCount = 2;
                                            break;
                                        }
                                    default:
                                        {
                                            iTryCount = 2;
                                            break;
                                        }
                                }
                            }
                            else {
                                iTryCount++;
                                if (iTryCount < 2) {
                                    xhttp = null;
                                }
                                else {
                                    //alert ("GetCurrentPriceAuto Error - HTTP response is blank." + " (" + iTryCount.toString() + ")");
                                }
                            }
                        }
                        else {
                            iTryCount++;
                            if (iTryCount < 2) {
                                xhttp = null;
                            }
                            else {
                                //alert ("GetCurrentPriceAuto Error - HTTP response is null." + " (" + iTryCount.toString() + ")");
                            }
                        }
                    }
                    catch (e1) {
                        //debugger
                        iTryCount++;
                        if (iTryCount < 2) {
                            xhttp = null;
                        }
                        else {
                            //alert("GetCurrentPriceAuto Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                        }
                    }
                }
                else {
                    break;
                }
            }
        }
    }
}

function GetdefaultUpdateGLDate(oWL) {
    if (oWL.name != "") {
        if (oWL.name.length > 9) {
            if (oWL.name.substr(oWL.name.length - 9, 1) == "-") {
                oWL.defaultUpdateGLDate = oWL.name.substr(oWL.name.length - 8, 4) + "-" + oWL.name.substr(oWL.name.length - 4, 2) + "-" + oWL.name.substr(oWL.name.length - 2, 2);
                oWL.name = oWL.name.substr(0, oWL.name.length - 9);
            }
        }
    }
}

function GetHighestUpdateDate(idxWL, bShowAlert) {
    //get the highest last update date
    let iHighestUpdateDate = 0;
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if (iHighestUpdateDate == 0) {
            iHighestUpdateDate = gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate;
        } else {
            if (gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate == 0) {
                if (bShowAlert) {
                    alert("New symbol encountered. Please enter a date to use to initialize the entire watchlist.")
                    return -1;
                }
            } else if (gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate > iHighestUpdateDate) {
                iHighestUpdateDate = gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate;
            }
        }
    }
    return iHighestUpdateDate;
}

function GetHighestUpdateDateImport(idxWL, bShowAlert) {
    //get the highest last update date
    let iHighestUpdateDate = 0;
    for (let idxWLItem = 0; idxWLItem < gWatchlistsToImport[idxWL].WLItems.length; idxWLItem++) {
        if (iHighestUpdateDate == 0) {
            iHighestUpdateDate = gWatchlistsToImport[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate;
        } else {
            if (gWatchlistsToImport[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate == 0) {
                if (bShowAlert) {
                    alert("New symbol encountered. Please enter a date to use to initialize the entire watchlist.")
                    return -1;
                }
            } else if (gWatchlistsToImport[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate > iHighestUpdateDate) {
                iHighestUpdateDate = gWatchlistsToImport[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate;
            }
        }
    }
    return iHighestUpdateDate;
}

function GetIndexValues() {
    if (gMarketIndexes.length > 0) {
        for (let idxIndex = 0; idxIndex < gMarketIndexes.length; idxIndex++) {
            if (oMDQ[gMarketIndexes[idxIndex].symbol] != null) {
                if (gMarketIndexes[idxIndex].symbol == gsMarketsOilGasActual) {
                    gMarketIndexes[idxIndex].lastPrice = oMDQ[gMarketIndexes[idxIndex].symbol].lastPriceInDouble;
                    gMarketIndexes[idxIndex].netChange = oMDQ[gMarketIndexes[idxIndex].symbol].changeInDouble;
                    gMarketIndexes[idxIndex].netPercentChangeInDouble = (oMDQ[gMarketIndexes[idxIndex].symbol].changeInDouble / oMDQ[gMarketIndexes[idxIndex].symbol].closePriceInDouble) * 100;
                } else {
                    gMarketIndexes[idxIndex].lastPrice = oMDQ[gMarketIndexes[idxIndex].symbol].lastPrice;
                    //gMarketIndexes[idxIndex].netChange = 1000.00;
                    //gMarketIndexes[idxIndex].netPercentChangeInDouble = 100.00;
                    gMarketIndexes[idxIndex].netChange = oMDQ[gMarketIndexes[idxIndex].symbol].netChange;
                    gMarketIndexes[idxIndex].netPercentChangeInDouble = oMDQ[gMarketIndexes[idxIndex].symbol].netPercentChangeInDouble;
                }
                document.getElementById(gMarketIndexes[idxIndex].tdName).innerText = gMarketIndexes[idxIndex].description;
                document.getElementById(gMarketIndexes[idxIndex].tdName + "Value").innerText = FormatMoney(gMarketIndexes[idxIndex].lastPrice);
                if (gbMarketShowChangePercentage) {
                    if (gMarketIndexes[idxIndex].netPercentChangeInDouble < 0.0) {
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").value = FormatDecimalNumber(gMarketIndexes[idxIndex].netPercentChangeInDouble, 5, 2, "") + "%";
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.backgroundColor = gsNegativeColor;
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.color = "white";
                    } else {
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").value = "+" + FormatDecimalNumber(gMarketIndexes[idxIndex].netPercentChangeInDouble, 5, 2, "") + "%";
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.backgroundColor = "green";
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.color = "white";
                    }
                } else {
                    if (gMarketIndexes[idxIndex].netChange < 0.0) {
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").value = FormatMoney(gMarketIndexes[idxIndex].netChange);
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.backgroundColor = gsNegativeColor;
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.color = "white";
                    } else {
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").value = "+" + FormatMoney(gMarketIndexes[idxIndex].netChange);
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.backgroundColor = "green";
                        document.getElementById(gMarketIndexes[idxIndex].tdName + "Change").style.color = "white";
                    }
                }

            }
        }
    }
    return;
}

function GetSectionHeights() {
    if (document.getElementById("tdIndexes") != null) {
        giSectionHeights.IndexSelection.height = document.getElementById("tdIndexes").offsetHeight;
        document.getElementById("chkShowIndexSelection").checked = giSectionHeights.IndexSelection.selected;
        ShowIndexSelectionLater(false, giSectionHeights.IndexSelection.selected);
    }
    if (document.getElementById("divIndexDisplay") != null) {
        giSectionHeights.Indexes.height = 60;
        document.getElementById("chkShowIndexes").checked = giSectionHeights.Indexes.selected;
        ShowIndexesLater(false, giSectionHeights.Indexes.selected);
    }
    if (document.getElementById("divTradeHistorySelection") != null) {
        giSectionHeights.TradeHistorySelection.height = document.getElementById("divTradeHistorySelection").offsetHeight;
        document.getElementById("chkShowTradeHistorySelection").checked = giSectionHeights.TradeHistorySelection.selected;
        ShowTradeHistorySelectionLater(false, giSectionHeights.TradeHistorySelection.selected);
    }
    if (document.getElementById("divPriceHistorySelection") != null) {
        giSectionHeights.PriceHistorySelection.height = document.getElementById("divPriceHistorySelection").offsetHeight;
        document.getElementById("chkShowPriceHistorySelection").checked = giSectionHeights.PriceHistorySelection.selected;
        ShowPriceHistorySelectionLater(false, giSectionHeights.PriceHistorySelection.selected);
    }
}

function GetStockPriceHistory() {
    let iTryCount = 0;
    let idxCandle = 0;
    let bOk = false;
    let bErrorGettingData = false;

    let sServerUrlBase = "https://api.tdameritrade.com/v1/marketdata/aaaaaaa/pricehistory?startDate=xxxxxxx&endDate=yyyyyyy&needExtendedHoursData=zzzzzzz";

    let dShortTime = 0;
    let dLongTime = 0;

    let sStartDateShort = "";
    let sStartDateLong = "";
    let sStartDateShortOrig = "";
    let sStartDateLongOrig = "";

    let dDate = Date.now();

    let sEndDate = dDate.toString();
    let oPriceLastShort = new PriceInfo();
    let oPriceLastLong = new PriceInfo();

    let sTextAlignHeader = "center";
    let sTextAlign = "center";

    let skBackgroundColorNotSpecial = "#99CCFF";
    let skBackgroundColorShort = "green";
    let skBackgroundColorLong = "yellow";

    let skTextColorNotSpecial = "black";
    let skTextColorShort = "white";
    let skTextColorLong = "black";

    let sSymbolToLookup = "";
    let sSymbolsToLookupTmp = GetUniqueListOfSymbols(TrimLikeVB(document.getElementById("txtSymbols").value));

    let oCM;

    gbGettingStockPriceHistory = true;

    //if (!IsMarketOpen()) {
    //    if (!gbUseLastTradingDay) {
    //        alert("The market is currently closed. Click on Use last trading day.");
    //        gbDoingStockPriceHistory = false;
    //        gbGettingStockPriceHistory = false;
    //        SetDefault();
    //        return;
    //    }
    //}

    if (document.getElementById("txtShortTime").value == "") {
        dShortTime = 0;
    } else {
        dShortTime = parseInt(document.getElementById("txtShortTime").value);
    }
    if (document.getElementById("txtLongTime").value == "") {
        dLongTime = 0;
    } else {
        dLongTime = parseInt(document.getElementById("txtLongTime").value);
    }

    if ((dShortTime == 0) || (dLongTime == 0)) {
        alert("Please enter both short and long times greater than 0.");
        gbDoingStockPriceHistory = false;
        gbGettingStockPriceHistory = false;
        SetDefault();
        return;
    } else if (dLongTime <= dShortTime) {
        alert("The long time must be greater than the short time.");
        gbDoingStockPriceHistory = false;
        gbGettingStockPriceHistory = false;
        SetDefault();
        return;
    }

    if (sSymbolsToLookupTmp == "") {
        alert("Please enter at least one symbol.");
        gbDoingStockPriceHistory = false;
        gbGettingStockPriceHistory = false;
        SetDefault();
        return;
    }
    sSymbolsToLookup = sSymbolsToLookupTmp.split(",")

    if (gbUseLastTradingDay) {
        let sStartDate = document.getElementById("txtStartDate").value;
        if (!ValidateTDDate(sStartDate, true)) {
            gbDoingStockPriceHistory = false;
            gbGettingStockPriceHistory = false;
            SetDefault();
            return;
        }
        //debugger
        dDate = new Date(sStartDate + "T15:00:00.000Z");
        sStartDateLong = (dDate.getTime()).toString();
        sStartDateLongOrig = sStartDateLong;
        sEndDate = sStartDateLong

    } else {
        dDate = dDate - (dDate % 60000); //round down to nearest minute
        sStartDateShort = (dDate - (dShortTime * 60000)).toString();
        sStartDateShortOrig = sStartDateLong;
        sStartDateLong = (dDate - (dLongTime * 60000)).toString();
        sStartDateLongOrig = sStartDateLong;
    }

    //sStartDateShort = (dDate - (5 * 60000)).toString();
    //sStartDateLong = (dDate - (40 * 60000)).toString();


    //SetWait();

    gPriceInfo.length = 0;
    gPriceMinutes.length = 0;

    for (let idxSymbol = 0; idxSymbol < sSymbolsToLookup.length; idxSymbol++) {
        sSymbolToLookup = TrimLikeVB(sSymbolsToLookup[idxSymbol]).toUpperCase();
        if (sSymbolToLookup != "") {
            iTryCount = 0;
            oPriceLast = new PriceInfo();
            oPriceLastShort = oPriceLast.shortPIP;
            oPriceLastLong = oPriceLast.longPIP;
            oPriceLastLong.low = 1000000;
            oPriceLastShort.low = 1000000;
            oPriceLast.symbol = sSymbolToLookup;
            while (iTryCount < 2) {
                let sServerUrl = "";
                //-------------------------------------------------------------------------------------------------
                sServerUrl = sServerUrlBase.replace("xxxxxxx", sStartDateLongOrig);
                sServerUrl = sServerUrl.replace("yyyyyyy", sEndDate);
                sServerUrl = sServerUrl.replace("aaaaaaa", sSymbolToLookup);
                if (gbUseExtended) {
                    sServerUrl = sServerUrl.replace("zzzzzzz", "true");
                } else {
                    sServerUrl = sServerUrl.replace("zzzzzzz", "false");
                }

                let xhttp = null;
                let iInnerTryCount = 0;
                xhttp = oHTTP();
                while ((xhttp == null) && (iInnerTryCount < 5)) {
                    xhttp = oHTTP();
                    iInnerTryCount = iInnerTryCount + 1;
                }
                iInnerTryCount = 0;
                if (CheckHTTPOpenGet(xhttp, sServerUrl, "Error during xhttp.open to " + sServerUrl, false, false, "", "")) {
                    // set the request header
                    xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

                    // send the request
                    try {
                        xhttp.send();
                        if (xhttp.responseText != null) {
                            if (xhttp.responseText != "") {
                                //might be something like - "error":"The access token being passed has expired or is invalid."

                                //alert("GetStockPriceHistory xhttp.responseText length = " + xhttp.responseText.length);
                                let oCMLength = 0;
                                oCM = myJSON.parse(xhttp.responseText);
                                switch (checkTDAPIError(oCM)) {
                                    case 0: //no error
                                        {
                                            try {
                                                oCMLength = oCM.candles.length;
                                            } catch (e2) {
                                                oCMLength = 0;
                                                bErrorGettingData = true;
                                            }
                                            break;
                                        }
                                    case 1: //acces code expired
                                        {
                                            xhttp = null;
                                            if (GetAccessCodeUsingRefreshToken()) {
                                                oCMLength = 0;
                                                bErrorGettingData = true;
                                            } else {
                                                alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                                gbDoingStockPriceHistory = false;
                                                gbGettingStockPriceHistory = false;
                                                SetDefault();
                                                return;
                                            }
                                            break;
                                        }
                                    case 2: //other error
                                        {
                                            if (oCM.error.toUpperCase() == "BAD REQUEST.") {
                                                alert("Make sure the Start Date is a valid trading day and then try again.");
                                                gbDoingStockPriceHistory = false;
                                                gbGettingStockPriceHistory = false;
                                                SetDefault();
                                                return;
                                            } else {
                                                oCMLength = 0;
                                                bErrorGettingData = true;
                                            }
                                            break;
                                        }
                                    default:
                                        {
                                            oCMLength = 0;
                                            bErrorGettingData = true;
                                            break;
                                        }
                                }

                                if (oCMLength > 0) {
                                    bOk = true;
                                    let sPriceMinute = "";
                                    if (gbUseLastTradingDay) {
                                        sStartDateLong = oCM.candles[oCM.candles.length - 1].datetime - (dLongTime * 60000);
                                        sStartDateShort = oCM.candles[oCM.candles.length - 1].datetime - (dShortTime * 60000);
                                    } else if ((dDate - (dLongTime * 60000)) > oCM.candles[oCM.candles.length - 1].datetime) {
                                        sStartDateLong = oCM.candles[oCM.candles.length - 1].datetime - (dLongTime * 60000);
                                        sStartDateShort = oCM.candles[oCM.candles.length - 1].datetime - (dShortTime * 60000);
                                    }
                                    //if (gbUseLastTradingDay) {
                                    //    sStartDateLong = oCM.candles[oCM.candles.length - 1].datetime - ((dLongTime - 1) * 60000);
                                    //    sStartDateShort = oCM.candles[oCM.candles.length - 1].datetime - ((dShortTime - 1) * 60000);
                                    //} else if ((dDate - (dLongTime * 60000)) > oCM.candles[oCM.candles.length - 1].datetime) {
                                    //    sStartDateLong = oCM.candles[oCM.candles.length - 1].datetime - ((dLongTime - 1) * 60000);
                                    //    sStartDateShort = oCM.candles[oCM.candles.length - 1].datetime - ((dShortTime - 1) * 60000);
                                    //}
                                    for (idxCandle = 0; idxCandle < oCM.candles.length; idxCandle++) {
                                        oPriceLast.totalVolume = oPriceLast.totalVolume + oCM.candles[idxCandle].volume;
                                    }
                                    let iStartIdx = 0;
                                    if ((dLongTime + 5) < oCM.candles.length) {
                                        iStartIdx = oCM.candles.length - dLongTime - 5;
                                    } else {
                                        iStartIdx = 0;
                                    }
                                    //                                        for (idxCandle = iStartIdx; idxCandle < oCM.candles.length; idxCandle++) {
                                    for (idxCandle = oCM.candles.length - 1; idxCandle > iStartIdx - 1; idxCandle = idxCandle - 1) {
                                        let sDetailBackgroundColor = "";
                                        let sDetailColor = "";
                                        if (oCM.candles[idxCandle].datetime >= sStartDateLong) {
                                            if (gbCollectDetail) {
                                                sTmp = FormatDateWithTime(new Date(oCM.candles[idxCandle].datetime), false, false);
                                                sPriceMinute = sPriceMinute + "<tr>";
                                                if (oCM.candles[idxCandle].datetime >= sStartDateShort) {
                                                    sDetailColor = "black";
                                                    sDetailBackgroundColor = "lightsalmon";
                                                } else {
                                                    sDetailColor = "black";
                                                    sDetailBackgroundColor = skBackgroundColorNotSpecial;
                                                }

                                                sPriceMinute = sPriceMinute + "<td style=\"background-color:" + sDetailBackgroundColor + "; color:" + sDetailColor + "; width: 20%; text-align: " + sTextAlign + "; vertical-align: top; border-width:0px; \">" + sTmp + "</td>";

                                                sTmp = FormatMoney(oCM.candles[idxCandle].high);
                                                sPriceMinute = sPriceMinute + "<td style=\"background-color:" + sDetailBackgroundColor + "; color:" + sDetailColor + "; width: 16%; text-align:" + sTextAlign + "; vertical-align: top; border-width: 0px; \">" + sTmp + "</td>";

                                                sTmp = FormatMoney(oCM.candles[idxCandle].low);
                                                sPriceMinute = sPriceMinute + "<td style=\"background-color:" + sDetailBackgroundColor + "; color:" + sDetailColor + "; width: 16%; text-align:" + sTextAlign + "; vertical-align: top; border-width: 0px; \">" + sTmp + "</td>";

                                                sTmp = FormatInt(oCM.candles[idxCandle].volume);
                                                sPriceMinute = sPriceMinute + "<td style=\"background-color:" + sDetailBackgroundColor + "; color:" + sDetailColor + "; width: 16%; text-align:" + sTextAlign + "; vertical-align: top; border-width: 0px; \">" + sTmp + "</td>";

                                                sTmp = FormatMoney(oCM.candles[idxCandle].open);
                                                sPriceMinute = sPriceMinute + "<td style=\"background-color:" + sDetailBackgroundColor + "; color:" + sDetailColor + "; width: 16%; text-align:" + sTextAlign + "; vertical-align: top; border-width: 0px; \">" + sTmp + "</td>";

                                                sTmp = FormatMoney(oCM.candles[idxCandle].close);
                                                sPriceMinute = sPriceMinute + "<td style=\"background-color:" + sDetailBackgroundColor + "; color:" + sDetailColor + "; width: 16%; text-align:" + sTextAlign + "; vertical-align: top; border-width: 0px; \">" + sTmp + "</td>";
                                                sPriceMinute = sPriceMinute + "</tr>";
                                            }

                                            oPriceLastLong.count++;
                                            oPriceLastLong.highTotal = oPriceLastLong.highTotal + oCM.candles[idxCandle].high;
                                            oPriceLastLong.lowTotal = oPriceLastLong.lowTotal + oCM.candles[idxCandle].low;
                                            oPriceLastLong.openTotal = oPriceLastLong.openTotal + oCM.candles[idxCandle].open;
                                            oPriceLastLong.closeTotal = oPriceLastLong.closeTotal + oCM.candles[idxCandle].close;
                                            oPriceLastLong.volume = oPriceLastLong.volume + oCM.candles[idxCandle].volume;
                                            if (oPriceLastLong.high < oCM.candles[idxCandle].high) {
                                                oPriceLastLong.high = oCM.candles[idxCandle].high
                                            }
                                            if (oPriceLastLong.low > oCM.candles[idxCandle].low) {
                                                oPriceLastLong.low = oCM.candles[idxCandle].low
                                            }
                                        }
                                        if (oCM.candles[idxCandle].datetime >= sStartDateShort) {

                                            oPriceLastShort.count++;
                                            oPriceLastShort.highTotal = oPriceLastShort.highTotal + oCM.candles[idxCandle].high;
                                            oPriceLastShort.lowTotal = oPriceLastShort.lowTotal + oCM.candles[idxCandle].low;
                                            oPriceLastShort.openTotal = oPriceLastShort.openTotal + oCM.candles[idxCandle].open;
                                            oPriceLastShort.closeTotal = oPriceLastShort.closeTotal + oCM.candles[idxCandle].close;
                                            oPriceLastShort.volume = oPriceLastShort.volume + oCM.candles[idxCandle].volume;
                                            if (oPriceLastShort.high < oCM.candles[idxCandle].high) {
                                                oPriceLastShort.high = oCM.candles[idxCandle].high;
                                            }
                                            if (oPriceLastShort.low > oCM.candles[idxCandle].low) {
                                                oPriceLastShort.low = oCM.candles[idxCandle].low;
                                            }
                                        }

                                    }
                                    gPriceInfo[gPriceInfo.length] = oPriceLast;
                                    gPriceInfo[gPriceInfo.length - 1].idx = gPriceInfo.length - 1;

                                    if (gbCollectDetail) {
                                        gPriceMinutes[gPriceMinutes.length] = sPriceMinute;

                                        if (document.getElementById("miscname").innerHTML != "") {
                                            if (document.getElementById("miscname").innerHTML.indexOf(gPriceInfo[gPriceInfo.length - 1].symbol) != -1) {
                                                DoShowPriceHistoryDetail(gPriceInfo.length - 1, gPriceMinutes.length - 1, false);
                                            }
                                        }
                                    }

                                }

                                iTryCount = 2;
                            }
                            else {
                                iTryCount++;
                                if (iTryCount < 2) {
                                    xhttp = null;
                                }
                                else {
                                    //alert ("GetStockPriceHistory Error - HTTP response is blank." + " (" + iTryCount.toString() + ")");
                                    bErrorGettingData = true;
                                    bOk = false;
                                }
                            }
                        }
                        else {
                            iTryCount++;
                            if (iTryCount < 2) {
                                xhttp = null;
                            }
                            else {
                                //alert ("GetStockPriceHistory Error - HTTP response is null." + " (" + iTryCount.toString() + ")");
                                bErrorGettingData = true;
                                bOk = false;
                            }
                        }
                    }
                    catch (e1) {
                        //debugger
                        iTryCount++;
                        if (iTryCount < 2) {
                            xhttp = null;
                        }
                        else {
                            //                                alert("GetStockPriceHistory Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                            bErrorGettingData = true;
                            bOk = false;
                        }
                    }
                }
                else {
                    bErrorGettingData = true;
                    bOk = false;
                    break;
                }
            }
        }

    }
    if (bOk) {
        if (gPriceInfo.length > 0) {

            gPriceInfo.sort(sortByChgShortValue);

            let iPwdFormHeight = document.getElementById("pwdForm").clientHeight + 10;
            document.getElementById("tblSymbols").style.top = iPwdFormHeight.toString() + "px";
            document.getElementById("tblSymbols").style.left = "0px";

            document.getElementById("tblSymbols").style.width = "800px";
            document.getElementById("nameTitle").style.width = "780px";
            document.getElementById("tblSymbols").style.visibility = "visible";
            if (document.getElementById("miscname").innerHTML == "") {
                document.getElementById("tblDetail").style.visibility = "hidden";
            }
            //document.getElementById("tblDetail").style.width = "800px";
            //document.getElementById("tblDetail").style.left = "810px";
            //document.getElementById("tblDetail").style.top = iPwdFormHeight.toString() + "px";
            //if (gbCollectDetail) {
            //    document.getElementById("tblDetail").style.visibility = "visible";
            //} else {
            //    document.getElementById("tblDetail").style.visibility = "hidden";
            //}

            document.getElementById("nameTitle").innerHTML = "Symbol Price History";
            document.getElementById("nameID").style.fontSize = "14pt";
            let s = "<table style=\"width:100%;border-width:0px;border-collapse: collapse;\">";
            let oSymbolPrice = new SymbolPrice();
            let sTmp = "";
            let bFirstTime = true;


            let sTableColumnBorderRight = "border-right: 1px solid black;"
            let sTableColumnNoBorder = "border-width: 0px;"
            let sTableColumnBorderBottom = "border-bottom: 1px solid black;"
            for (let idxPriceInfo = 0; idxPriceInfo < gPriceInfo.length; idxPriceInfo++) {
                oSymbolPrice = new SymbolPrice();
                oPriceLastLong = gPriceInfo[idxPriceInfo].longPIP;
                oPriceLastShort = gPriceInfo[idxPriceInfo].shortPIP;

                if (bFirstTime) {
                    bFirstTime = false;
                    s = s + "<tr>";
                    s = s + "<th style=\"width:10%; text-align:" + sTextAlignHeader + "; vertical-align:top;" + sTableColumnBorderRight + sTableColumnBorderBottom + " \"><I>Symbol</I></th>";
                    s = s + "<th style=\"width:10%; text-align:" + sTextAlignHeader + ";vertical-align:top;" + sTableColumnBorderRight + sTableColumnBorderBottom + "\"><I>Current</I></th>";
                    s = s + "<th style=\"width:8%; text-align:" + sTextAlignHeader + ";vertical-align:top;" + sTableColumnNoBorder + sTableColumnBorderBottom + "\"><I>" + dShortTime.toString() + " Chg</I ></th > ";
                    s = s + "<th style=\"width:8%; text-align:" + sTextAlignHeader + ";vertical-align:top;" + sTableColumnBorderRight + sTableColumnBorderBottom + "\"><I>" + dLongTime.toString() + " Chg</I></th>";
                    s = s + "<th style=\"width:10%; text-align:" + sTextAlignHeader + ";vertical-align:top;" + sTableColumnNoBorder + sTableColumnBorderBottom + "\"><I>" + dShortTime.toString() + " High</I></th>";
                    s = s + "<th style=\"width:10%; text-align:" + sTextAlignHeader + ";vertical-align:top;" + sTableColumnBorderRight + sTableColumnBorderBottom + "\"><I>" + dShortTime.toString() + " Low</I></th>";
                    s = s + "<th style=\"width:10%; text-align:" + sTextAlignHeader + ";vertical-align:top;" + sTableColumnNoBorder + sTableColumnBorderBottom + "\"><I>" + dLongTime.toString() + " High</I></th>";
                    s = s + "<th style=\"width:10%; text-align:" + sTextAlignHeader + ";vertical-align:top;" + sTableColumnBorderRight + sTableColumnBorderBottom + "\"><I>" + dLongTime.toString() + " Low</I></th>";
                    s = s + "<th style=\"width:12%; text-align:" + sTextAlignHeader + ";vertical-align:top;" + sTableColumnNoBorder + sTableColumnBorderBottom + "\"><I>" + dShortTime.toString() + " Vol</I></th>";
                    s = s + "<th style=\"width:12%; text-align:" + sTextAlignHeader + ";vertical-align:top;" + sTableColumnNoBorder + sTableColumnBorderBottom + "\"><I>" + dLongTime.toString() + " Vol</I></th>";
                    s = s + "</tr>";
                }

                s = s + "<tr>";

                if (gbCollectDetail) {
                    s = s + "<td style=\"width:10%; text-align:" + sTextAlign + ";vertical-align:top;" + sTableColumnBorderRight + "\"><a href =\"JavaScript: DoShowPriceHistory(" + idxPriceInfo.toString() + "," + (gPriceInfo[idxPriceInfo].idx).toString() + ")\">" + gPriceInfo[idxPriceInfo].symbol + "</td>";
                } else {
                    s = s + "<td style=\"width:10%; text-align:" + sTextAlign + ";vertical-align:top;" + sTableColumnBorderRight + "\"><b>" + gPriceInfo[idxPriceInfo].symbol + "</b></td>";
                }

                oSymbolPrice = GetCurrentPrice(gPriceInfo[idxPriceInfo].symbol);

                let sBackgroundColor = "";
                let sBackgroundColorShort = "";
                let sBackgroundColorLong = "";
                let sTextColor = "";
                let sTextColorShort = "";
                let sTextColorLong = "";
                switch (SetSpecialPriceColor((oPriceLastShort.high - oPriceLastShort.low), (oPriceLastLong.high - oPriceLastLong.low), oSymbolPrice.price)) {
                    case 0: //not special
                        {
                            sBackgroundColor = skBackgroundColorNotSpecial;
                            sBackgroundColorShort = skBackgroundColorNotSpecial;
                            sBackgroundColorLong = skBackgroundColorNotSpecial;
                            sTextColor = skTextColorNotSpecial;
                            sTextColorShort = skTextColorNotSpecial;
                            sTextColorLong = skTextColorNotSpecial;
                            break;
                        }
                    case 1: //special short
                        {
                            sBackgroundColor = skBackgroundColorShort;
                            sBackgroundColorShort = skBackgroundColorShort;
                            sBackgroundColorLong = skBackgroundColorNotSpecial;
                            sTextColor = skTextColorShort;
                            sTextColorShort = skTextColorShort;
                            sTextColorLong = skTextColorNotSpecial;
                            break;
                        }
                    case 2: //special long
                        {
                            sBackgroundColor = skBackgroundColorLong;
                            sBackgroundColorShort = skBackgroundColorNotSpecial;
                            sBackgroundColorLong = skBackgroundColorLong;
                            sTextColor = skTextColorLong;
                            sTextColorShort = skTextColorNotSpecial;
                            sTextColorLong = skTextColorLong;
                            break;
                        }
                    case 3: //special short and long
                        {
                            sBackgroundColor = skBackgroundColorShort;
                            sBackgroundColorShort = skBackgroundColorShort;
                            sBackgroundColorLong = skBackgroundColorLong;
                            sTextColor = skTextColorShort;
                            sTextColorShort = skTextColorShort;
                            sTextColorLong = skTextColorLong;
                            break;
                        }
                }


                sTmp = FormatMoney(oSymbolPrice.price);
                s = s + "<td style=\"background-color:" + sBackgroundColor + "; color:" + sTextColor + "; width: 10%; text-align:" + sTextAlign + "; vertical-align: top;" + sTableColumnBorderRight + " \"><b>" + sTmp + "</b></td>";

                sTmp = FormatMoney(oPriceLastShort.high - oPriceLastShort.low);
                s = s + "<td style=\"background-color:" + sBackgroundColorShort + "; color:" + sTextColorShort + "; width:8%; text-align:" + sTextAlign + ";vertical-align:top;" + sTableColumnNoBorder + "\">" + sTmp + "</td>";
                sTmp = FormatMoney(oPriceLastLong.high - oPriceLastLong.low);
                s = s + "<td style=\"background-color:" + sBackgroundColorLong + "; color:" + sTextColorLong + "; width:8%; text-align:" + sTextAlign + ";vertical-align:top;" + sTableColumnBorderRight + "\">" + sTmp + "</td>";

                sTmp = FormatMoney(oPriceLastShort.high);
                s = s + "<td style=\"width:10%; text-align:" + sTextAlign + ";vertical-align:top;" + sTableColumnNoBorder + "\">" + sTmp + "</td>";
                sTmp = FormatMoney(oPriceLastShort.low);
                s = s + "<td style=\"width:10%; text-align:" + sTextAlign + ";vertical-align:top;" + sTableColumnBorderRight + "\">" + sTmp + "</td>";

                sTmp = FormatMoney(oPriceLastLong.high);
                s = s + "<td style=\"width:10%; text-align:" + sTextAlign + ";vertical-align:top;" + sTableColumnNoBorder + "\">" + sTmp + "</td>";
                sTmp = FormatMoney(oPriceLastLong.low);
                s = s + "<td style=\"width:10%; text-align:" + sTextAlign + ";vertical-align:top;" + sTableColumnBorderRight + "\">" + sTmp + "</td>";

                sTmp = FormatInt(oPriceLastShort.volume);
                s = s + "<td style=\"width:12%; text-align:" + sTextAlign + ";vertical-align:top;" + sTableColumnNoBorder + "\">" + sTmp + "</td>";
                sTmp = FormatInt(oPriceLastLong.volume);
                s = s + "<td style=\"width:12%; text-align:" + sTextAlign + ";vertical-align:top;" + sTableColumnNoBorder + "\">" + sTmp + "</td>";

                s = s + "</tr>";
            }
            s = s + "</table>";
            document.getElementById("name").innerHTML = s;
        }
        SetDefault();
        if (gbDoingStockPriceHistory) {
            gbGettingStockPriceHistory = false;
            document.getElementById("spanRunning").style.backgroundColor = "green";
            document.getElementById("spanRunning").style.Color = "white";
            window.setTimeout("GetStockPriceHistory()", 2000);
        }
    } else if (bErrorGettingData) {
        gbGettingStockPriceHistory = false;
        document.getElementById("spanRunning").style.backgroundColor = "red";
        document.getElementById("spanRunning").style.Color = "black";
        window.setTimeout("GetStockPriceHistory()", 2000);
    } else {
        gbGettingStockPriceHistory = false;
        gbDoingStockPriceHistory = false;
        SetDefault();
    }
}

function GetTDData(bFirstTime) {
    let iReturn = 0;
    let bOkToContinue = true;
    gbDoingGetTDData = true;
    giGetTDDataTimeoutId = 0;
    if (!gbDoingGetTrades && !gbDoingStockPriceHistory && !gbDoingDrag && !gbDoingCreateOrders) {
        if (IsMarketOpenForTrading(bFirstTime)) {
            giCurrentRefreshRate = giMarketOpenRefreshRate;
        } else {
            giCurrentRefreshRate = giMarketClosedRefreshRate;
        }
        if ((FormatCurrentDateForTD() == "2022-02-14") && (gsLogonUser == "pan3386") && (!gbUsingCell)) {
            if (document.getElementById("spanSpecialImage").style.display == "none") {
                document.getElementById("spanSpecialImage").style.display = "block";
            }
        } else {
            document.getElementById("spanSpecialImage").style.display = "none";
        }
        if (bFirstTime) {
            giCurrentRefreshRate = giMarketOpenRefreshRate;
        } else {
            if (gimySockIdx == -1) {
                giCurrentRefreshRate = giMarketOpenRefreshRate;
            } else {
                if (isUndefined(mySock[gimySockIdx].readyState)) {
                    giCurrentRefreshRate = giMarketOpenRefreshRate;
                } else {
                    if ((mySock[gimySockIdx].readyState == 1) || (mySock[gimySockIdx].readyState == 0)) {
                        giCurrentRefreshRate = giMarketOpenRefreshRate;
                    }
                }
            }
        }
        if (bFirstTime) {
            //get account user principal data
            iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/userprincipals?fields=streamerSubscriptionKeys,streamerConnectionInfo", 1);
            if (iReturn == 0) {
                GetAccounts();
                if (gAccounts.length > 0) {
                    OpenSocket();
                    iReturn - GetTDDataHTTP("https://api.tdameritrade.com/v1/accounts?fields=positions", 2);
                    if (iReturn == 0) {
                        GetAccountsDetails();
                    }
                }
                //get the watchlists
                //new stuff start
                let sAccounts = "";
                let sAccountsSep = "";
                let iAccountsCnt = 0;
                if (gAccounts.length > 0) {
                    for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
                        if (gAccounts[idxAccounts].CBliquidationValue >= gdAccountMinimumLiquidationValue) {
                            sAccounts = sAccounts + sAccountsSep + "'" + gAccounts[idxAccounts].accountId + "'";
                            sAccountsSep = ", ";
                            iAccountsCnt++;
                        }
                    }
                    if (iAccountsCnt < 10) {
                        for (let idx = iAccountsCnt; idx < 10; idx++) {
                            sAccounts = sAccounts + sAccountsSep + "''";
                            sAccountsSep = ", ";
                        }
                    }
                }

                let s = "<?xml version=\"1.0\"?>" + "\r\n";
                s = s + "<command><commandtext>";
                s = s + "GetAllWLByAccountWithViewable " + sAccounts;
                s = s + "</commandtext>";
                s = s + "<returnsvalues>True</returnsvalues>";
                s = s + "</command>";

                switch (PostWLHTTP(s, 2)) {
                    case 0: //success
                        {
                            //should have all watchlist info in oCMWL
                            GetWatchlistsNew(false);
                            if (gAccounts.length > 0) {
                                if (gWatchlists.length > 0) {
                                    SetupWatchlists(false);
                                }
                            }
                            if (oCMWL.length > 0) {
                                GetWatchlistsNew(false);
                                if (gAccounts.length > 0) {
                                    if (gWatchlists.length > 0) {
                                        SetupWatchlists(false);
                                    }
                                }
                            } else {
                                gsLastError = "No watchlists found.";
                                bOkToContinue = false;
                            }
                            break;
                        }
                    default: //unknown error
                        {
                            alert(gsLastError);
                            bOkToContinue = false;
                        }
                }
                //new stuff end

            //    iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/accounts/watchlists", 3);
            //    if (iReturn == 0) {
            //        GetWatchlists(false);
            //        if (gAccounts.length > 0) {
            //            if (gWatchlists.length > 0) {
            //                SetupWatchlists(false);
            //            }
            //        }

            //    } else {
            //        bOkToContinue = false;
            //    }
            } else {
                bOkToContinue = false;
            }
        }

        if (gbDoResetWatchlists) {
            gbDoResetWatchlists = false;
            if (gAccounts.length > 0) {

                //get the watchlists
                //new stuff start
                let sAccounts = "";
                let sAccountsSep = "";
                let iAccountsCnt = 0;
                if (gAccounts.length > 0) {
                    for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
                        if (gAccounts[idxAccounts].CBliquidationValue >= gdAccountMinimumLiquidationValue) {
                            sAccounts = sAccounts + sAccountsSep + "'" + gAccounts[idxAccounts].accountId + "'";
                            sAccountsSep = ", ";
                            iAccountsCnt++;
                        }
                    }
                    if (iAccountsCnt < 10) {
                        for (let idx = iAccountsCnt; idx < 10; idx++) {
                            sAccounts = sAccounts + sAccountsSep + "''";
                            sAccountsSep = ", ";
                        }
                    }
                }

                let s = "<?xml version=\"1.0\"?>" + "\r\n";
                s = s + "<command><commandtext>";
                s = s + "GetAllWLByAccountWithViewable " + sAccounts;
                s = s + "</commandtext>";
                s = s + "<returnsvalues>True</returnsvalues>";
                s = s + "</command>";

                switch (PostWLHTTP(s, 2)) {
                    case 0: //success
                        {
                            //should have all watchlist info in oCMWL
                            GetWatchlistsNew(true);
                            if (gAccounts.length > 0) {
                                if (gWatchlists.length > 0) {
                                    SetupWatchlists(false);
                                }
                            }
                            //if (oCMWL.length > 0) {
                            //    GetWatchlistsNew(true);
                            //    if (gAccounts.length > 0) {
                            //        if (gWatchlists.length > 0) {
                            //            SetupWatchlists(false);
                            //        }
                            //    }
                            //} else {
                            //    gsLastError = "No watchlists found.";
                            //    bOkToContinue = false;
                            //}
                            break;
                        }
                    default: //unknown error
                        {
                            alert(gsLastError);
                            bOkToContinue = false;
                        }
                }
                //new stuff end

            //    iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/accounts/watchlists", 3);
            //    if (iReturn == 0) {
            //        GetWatchlists(true);
            //        document.getElementById("spanWL").style.top = "40px";
            //        document.getElementById("spanWL").style.left = "800px";
            //    } else {
            //        bOkToContinue = false;
            //    }
            }
            SetDefault();
        }

        if (bOkToContinue) {
            //determine which symbols need quotes for indexes
            SetupIndexes(); //gsMarketsLastIndexes contains index symbols as symbol/desc,symbol/desc...
            let sSymbolsThatNeedQuotes = "";
            let sSep = "";
            if (gMarketIndexes.length > 0) {
                for (let idx = 0; idx < gMarketIndexes.length; idx++) {
                    sSymbolsThatNeedQuotes = sSymbolsThatNeedQuotes + sSep + gMarketIndexes[idx].symbol.toUpperCase();
                    sSep = ",";
                }
            }
            //let sMarketsToTrack = gsMarketsLastIndexes.split(",");
            //if (sMarketsToTrack.length > 0) {
            //    for (let idx = 0; idx < sMarketsToTrack.length; idx++) {
            //        let sMarket = sMarketsToTrack[idx].split("/");
            //        if (sMarket.length > 0) {
            //            sSymbolsThatNeedQuotes = sSymbolsThatNeedQuotes + sSep + sMarket[0].toUpperCase();
            //            sSep = ",";
            //        }
            //    }
            //}
            //determine which symbols need quotes for watchlists
            if (gWatchlists.length > 0) {
                //get account position data
                if (bFirstTime) {
                    for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
                        for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                            if (gWatchlists[idxWL].WLItems[idxWLItem].bSelected) {
                                sSymbolsThatNeedQuotes = sSymbolsThatNeedQuotes + sSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                                sSep = ",";
                            }
                        }
                    }
                } else {
                    iReturn - GetTDDataHTTP("https://api.tdameritrade.com/v1/accounts?fields=positions", 2);
                    if (iReturn == 0) {
                        GetAccountsDetails();
                        for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
                            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                                if (gWatchlists[idxWL].WLItems[idxWLItem].bSelected) {
                                    sSymbolsThatNeedQuotes = sSymbolsThatNeedQuotes + sSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                                    sSep = ",";
                                }
                            }
                        }
                        //for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
                        //    if (gWatchlists[idxWL].bSelected) {
                        //        for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                        //            if (gWatchlists[idxWL].WLItems[idxWLItem].bSelected) {
                        //                sSymbolsThatNeedQuotes = sSymbolsThatNeedQuotes + sSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                        //                sSep = ",";
                        //            }
                        //        }
                        //    }
                        //}
                    } else {
                        bOkToContinue = false;
                    }
                }
            }
            if (bOkToContinue) {
                SetLineCnt();
                let iSymbolLimit = 200;
                sSymbolsThatNeedQuotes = GetUniqueListOfSymbols(sSymbolsThatNeedQuotes);
                if (gimySockIdx != -1) {
                    if (!isUndefined(mySock[gimySockIdx].readyState)) {
                        if (mySock[gimySockIdx].readyState == 1) { //is the socket open - it could be closed if someone else logged on to the account or just not opened yet
                            if (!isUndefined(document.getElementById("imgStopLight"))) {
                                document.getElementById("imgStopLight").src = "TrafficLightGo16px.png";
                            }
                            if (gbLoggedIn) {
                                //get the new symbols - don't care about the ones that have been removed
                                let bDoGetQuotes = false;
                                if (gsSysmbolsThatNeedQuotes != "") {
                                    if (gsSysmbolsThatNeedQuotes == sSymbolsThatNeedQuotes) {
                                        sSymbolsThatNeedQuotes = "";
                                    } else {
                                        let vTmp = sSymbolsThatNeedQuotes.split(",");
                                        let sSep = "";
                                        let sTmp = "," + gsSysmbolsThatNeedQuotes + ",";
                                        sSymbolsThatNeedQuotes = "";
                                        for (let idxSymbol = 0; idxSymbol < vTmp.length; idxSymbol++) {
                                            if (sTmp.indexOf("," + vTmp[idxSymbol] + ",") == -1) {
                                                sSymbolsThatNeedQuotes = sSymbolsThatNeedQuotes + sSep + vTmp[idxSymbol];
                                                sSep = ",";
                                            }
                                        }
                                        if (sSymbolsThatNeedQuotes != "") {
                                            gsSysmbolsThatNeedQuotes = gsSysmbolsThatNeedQuotes + "," + sSymbolsThatNeedQuotes;
                                            sSymbolsThatNeedQuotes = gsSysmbolsThatNeedQuotes;
                                        }
                                    }
                                } else {
                                    gsSysmbolsThatNeedQuotes = sSymbolsThatNeedQuotes;
                                    bDoGetQuotes = true;
                                }
                                if (sSymbolsThatNeedQuotes.length > 0) {
                                    if (bDoGetQuotes) {

                                        let aServerUrls = new Array();
                                        let aSymbols = sSymbolsThatNeedQuotes.split(",");
                                        if (aSymbols.length > iSymbolLimit) {
                                            for (let idxXXX = 0; idxXXX < aSymbols.length; idxXXX = idxXXX + iSymbolLimit) {
                                                let iEnd = 0;
                                                let sThisSet = "";
                                                let sSep = "";
                                                if (idxXXX + iSymbolLimit < aSymbols.length) {
                                                    iEnd = idxXXX + iSymbolLimit;
                                                } else {
                                                    iEnd = aSymbols.length;
                                                }
                                                for (let idxSym = idxXXX; idxSym < iEnd; idxSym++) {
                                                    sThisSet = sThisSet + sSep + aSymbols[idxSym];
                                                    sSep = ",";
                                                }
                                                aServerUrls[aServerUrls.length] = sThisSet;
                                            }
                                        } else {
                                            aServerUrls[aServerUrls.length] = sSymbolsThatNeedQuotes;
                                        }

                                        for (let idxServerURL = 0; idxServerURL < aServerUrls.length; idxServerURL++) {
                                            if (idxServerURL == 0) {
                                                iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/marketdata/quotes?&symbol=" + DoURLEncode(aServerUrls[idxServerURL]), 4);
                                                if (iReturn != 0) {
                                                    bOkToContinue = false;
                                                }
                                            } else {
                                                iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/marketdata/quotes?&symbol=" + DoURLEncode(aServerUrls[idxServerURL]), 6);
                                                if (iReturn != 0) {
                                                    bOkToContinue = false;
                                                }
                                            }
                                        }
                                        //    iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/marketdata/quotes?&symbol=" + DoURLEncode(sSymbolsThatNeedQuotes), 4);
                                        //    if (iReturn != 0) {
                                        //        bOkToContinue = false;
                                        //    }
                                    }
                                    if (bOkToContinue) {
                                        let gQuoteRequest = "";
                                        if (("," + sSymbolsThatNeedQuotes + ",").indexOf(gsMarketsOilGasActual) != -1) {
                                            if (sSymbolsThatNeedQuotes != gsMarketsOilGasActual) {
                                                sSymbolsThatNeedQuotes = sSymbolsThatNeedQuotes.replace(gsMarketsOilGasActual + ",", "");
                                                giRequestId++;
                                                gQuoteRequest = {
                                                    "requests": [
                                                        {
                                                            "service": "QUOTE",
                                                            "requestid": giRequestId.toString(),
                                                            "command": "SUBS",
                                                            "account": oACCP.accounts[0].accountId,
                                                            "source": oACCP.streamerInfo.appId,
                                                            "parameters": {
                                                                "keys": sSymbolsThatNeedQuotes,
                                                                "fields": "0,1,2,3,4,5,6,7,8,9,12,13,15,16,17,18,24,26,27,28,29,30,31,32,33,34,39,40,43,44,47,48,49,50,51,52"
                                                            }
                                                        },
                                                        {
                                                            "service": "LEVELONE_FUTURES",
                                                            "requestid": (giRequestId + 1).toString(),
                                                            "command": "SUBS",
                                                            "account": oACCP.accounts[0].accountId,
                                                            "source": oACCP.streamerInfo.appId,
                                                            "parameters": {
                                                                "keys": gsMarketsOilGasActual,
                                                                "fields": "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35"
                                                            }
                                                        }
                                                    ]
                                                }
                                                giRequestId++;
                                            } else {
                                                giRequestId++;
                                                gQuoteRequest = {
                                                    "requests": [
                                                        {
                                                            "service": "LEVELONE_FUTURES",
                                                            "requestid": giRequestId.toString(),
                                                            "command": "SUBS",
                                                            "account": oACCP.accounts[0].accountId,
                                                            "source": oACCP.streamerInfo.appId,
                                                            "parameters": {
                                                                "keys": gsMarketsOilGasActual,
                                                                "fields": "0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        } else {
                                            giRequestId++;
                                            gQuoteRequest = {
                                                "requests": [
                                                    {
                                                        "service": "QUOTE",
                                                        "requestid": giRequestId.toString(),
                                                        "command": "SUBS",
                                                        "account": oACCP.accounts[0].accountId,
                                                        "source": oACCP.streamerInfo.appId,
                                                        "parameters": {
                                                            "keys": sSymbolsThatNeedQuotes,
                                                            "fields": "0,1,2,3,4,5,6,7,8,9,12,13,15,16,17,18,24,26,27,28,29,30,31,32,33,34,39,40,43,44,47,48,49,50,51,52"
                                                        }
                                                    }
                                                ]
                                            }
                                        }

                                        mySock[gimySockIdx].send(myJSON.stringify(gQuoteRequest));
                                    }
                                }
                                GetWatchlistPrices();
                                GetIndexValues();
                                GetWatchlistO();
                                GetWatchlistSO();
                                GetWatchlistSummary();
                            }

                        } else if (mySock[gimySockIdx].readyState == 3) { //socket is closed or couldn't be opened
                            //use http to get quotes
                            //get the new symbols - don't care about the ones that have been removed

                            if (!isUndefined(document.getElementById("imgStopLight"))) {
                                document.getElementById("imgStopLight").src = "TrafficLightStop16px.png";
                            }

                            gsSysmbolsThatNeedQuotes = sSymbolsThatNeedQuotes;
                            if (sSymbolsThatNeedQuotes.length > 0) {
                                let aServerUrls = new Array();
                                let aSymbols = sSymbolsThatNeedQuotes.split(",");
                                if (aSymbols.length > iSymbolLimit) {
                                    for (let idxXXX = 0; idxXXX < aSymbols.length; idxXXX = idxXXX + iSymbolLimit) {
                                        let iEnd = 0;
                                        let sThisSet = "";
                                        let sSep = "";
                                        if (idxXXX + iSymbolLimit < aSymbols.length) {
                                            iEnd = idxXXX + iSymbolLimit;
                                        } else {
                                            iEnd = aSymbols.length;
                                        }
                                        for (let idxSym = idxXXX; idxSym < iEnd; idxSym++) {
                                            sThisSet = sThisSet + sSep + aSymbols[idxSym];
                                            sSep = ",";
                                        }
                                        aServerUrls[aServerUrls.length] = sThisSet;
                                    }
                                } else {
                                    aServerUrls[aServerUrls.length] = sSymbolsThatNeedQuotes;
                                }

                                for (let idxServerURL = 0; idxServerURL < aServerUrls.length; idxServerURL++) {
                                    if (idxServerURL == 0) {
                                        iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/marketdata/quotes?&symbol=" + DoURLEncode(aServerUrls[idxServerURL]), 4);
                                        if (iReturn != 0) {
                                            bOkToContinue = false;
                                        }
                                    } else {
                                        iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/marketdata/quotes?&symbol=" + DoURLEncode(aServerUrls[idxServerURL]), 6);
                                        if (iReturn != 0) {
                                            bOkToContinue = false;
                                        }
                                    }
                                }

                                if (document.getElementById("spanDebug").innerHTML != "Stock prices no longer being streamed due to logon to the same account.") {
                                    if (gimySockIdx < 10) {
                                        OpenSocket();
                                        giCurrentRefreshRate = giMarketOpenRefreshRate;
                                        gsSysmbolsThatNeedQuotes = "";
                                    } else {
                                        document.getElementById("spanDebug").innerHTML = "Open socket limit reached.";
                                    }
                                }

                                if (bOkToContinue) {
                                    GetWatchlistPrices();
                                    GetIndexValues();
                                    GetWatchlistO();
                                    GetWatchlistSO();
                                    GetWatchlistSummary();
                                }
                                //    iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/marketdata/quotes?&symbol=" + DoURLEncode(sSymbolsThatNeedQuotes), 4);
                                //    if (iReturn == 0) {
                                //        GetWatchlistPrices();
                                //        GetIndexValues();
                                //        GetWatchlistSO();
                                //        GetWatchlistSummary();
                                //    } else {
                                //        bOkToContinue = false;
                                //    }
                            }
                        }
                    }


                //} else {

                }
            }
        }
    }

    if (gAccounts.length > 1) { //if more than one account then allow selecting an account to use to setup Old GL symbols
        if ((document.getElementById("spanOldGLAccount") != null) && (!isUndefined(document.getElementById("spanOldGLAccount")))) {
            if (document.getElementById("spanOldGLAccount").style.display == "none") {
                //let sSelect = "<br>Account name to use as a filter during Get Trades:" + "<select id=\"optOldGLAccount\">";
                let sSelect = "<br>Select Account:&nbsp;" + "<select id=\"optOldGLAccount\">";
                let bFirstLine = true;
                for (let idx = 0; idx < gAccounts.length; idx++) {
                    if (gAccounts[idx].CBliquidationValue >= gdAccountMinimumLiquidationValue) {
                        if (bFirstLine) {
                            bFirstLine = false;
                            sSelect = sSelect + "<option selected value=\"\">&nbsp;</option>";
                        }
                        sSelect = sSelect + "<option value=\"" + gAccounts[idx].accountId + "\">" + gAccounts[idx].accountName + "</option>";
                    }
                }
                sSelect = sSelect + "</select>";
                document.getElementById("spanOldGLAccount").innerHTML = sSelect;
            }
            document.getElementById("spanOldGLAccount").style.display = "inline";
        }
    }

    giGetTDDataTimeoutId = window.setTimeout("GetTDData(false)", giCurrentRefreshRate);
    gbDoingGetTDData = false;
}

function GetTDDataHTTP(sServerURL, oCMindex) {
    let iTryCount = 0;
    let iReturn = 0;

    iTryCount = 0;
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------

        let xhttp = null;
        let iInnerTryCount = 0;
        let bBadoCMIndex = false;
        let iCheckTDAPIReturn = 0;
        let sAPIError = "";
        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpenGet(xhttp, sServerURL, "Error during xhttp.open to " + sServerURL, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

            // send the request
            try {
                //debugger
                xhttp.send();
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {

                        switch (oCMindex) {
                            case 0: //returns oCMTemp
                                {
                                    oCMTemp = myJSON.parse(xhttp.responseText);
                                    iCheckTDAPIReturn = checkTDAPIError(oCMTemp);
                                    if (iCheckTDAPIReturn != 0) {
                                        if (!(isUndefined(oCMTemp.error))) {
                                            sAPIError = oCMTemp.error;
                                        }
                                    }
                                    break;
                                }
                            case 1: //account principals
                                {
                                    oACCP = myJSON.parse(xhttp.responseText);
                                    iCheckTDAPIReturn = checkTDAPIError(oACCP);
                                    if (iCheckTDAPIReturn != 0) {
                                        if (!(isUndefined(oACCP.error))) {
                                            sAPIError = oACCP.error;
                                        }
                                    }
                                    break;
                                }
                            case 2: //account positions
                                {
                                    oACC = myJSON.parse(xhttp.responseText);
                                    iCheckTDAPIReturn = checkTDAPIError(oACC);
                                    if (iCheckTDAPIReturn != 0) {
                                        if (!(isUndefined(oACC.error))) {
                                            sAPIError = oACC.error;
                                        }
                                    }
                                    break;
                                }
                            case 3: //account watchlists
                                {
                                    oCMWLToImport = myJSON.parse(xhttp.responseText);
                                    iCheckTDAPIReturn = checkTDAPIError(oCMWLToImport);
                                    if (iCheckTDAPIReturn != 0) {
                                        if (!(isUndefined(oCMWLToImport.error))) {
                                            sAPIError = oCMWLToImport.error;
                                        }
                                    }
                                    break;
                                }
                            case 4: //market data quotes
                                {
                                    oMDQ = myJSON.parse(xhttp.responseText);
                                    iCheckTDAPIReturn = checkTDAPIError(oMDQ);
                                    if (iCheckTDAPIReturn != 0) {
                                        if (!(isUndefined(oMDQ.error))) {
                                            sAPIError = oMDQ.error;
                                        }
                                    }
                                    break;
                                }
                            case 5: //saved orders
                                {
                                    oCMSavedOrders = myJSON.parse(xhttp.responseText);
                                    iCheckTDAPIReturn = checkTDAPIError(oCMSavedOrders);
                                    if (iCheckTDAPIReturn != 0) {
                                        if (!(isUndefined(oCMSavedOrders.error))) {
                                            sAPIError = oCMSavedOrders.error;
                                        }
                                    }
                                    break;
                                }
                            case 6: //additional market data quotes
                                {
                                    oMDQ2 = myJSON.parse(xhttp.responseText);
                                    iCheckTDAPIReturn = checkTDAPIError(oMDQ2);
                                    if (iCheckTDAPIReturn != 0) {
                                        if (!(isUndefined(oMDQ2.error))) {
                                            sAPIError = oMDQ2.error;
                                        }
                                    } else {
                                        oMDQ = extendMDQ(oMDQ, oMDQ2);
                                    }
                                    break;
                                }
                            case 7: //orders
                                {
                                    oCMOrders = myJSON.parse(xhttp.responseText);
                                    iCheckTDAPIReturn = checkTDAPIError(oCMOrders);
                                    if (iCheckTDAPIReturn != 0) {
                                        if (!(isUndefined(oCMOrders.error))) {
                                            sAPIError = oCMOrders.error;
                                        }
                                    }
                                    break;
                                }
                            default:
                                {
                                    bBadoCMIndex = true;
                                    break;
                                }
                        }
                        if (!bBadoCMIndex) {
                            switch (iCheckTDAPIReturn) {
                                case 0: //no error
                                    {
                                        iReturn = 0;
                                        gsLastError = "";
                                        iTryCount = 2;
                                        break;
                                    }
                                case 1: //acces code expired
                                    {
                                        xhttp = null;
                                        if (GetAccessCodeUsingRefreshToken()) {
                                            iTryCount++;
                                        } else {
                                            iReturn = 1;
                                            gsLastError = "Access code expired. Refresh failed."
                                            iTryCount = 2;
                                        }
                                        break;
                                    }
                                case 2: //other error
                                    {
                                        if (sAPIError.toUpperCase() == "BAD REQUEST.") {
                                            iReturn = 21;
                                            gsLastError = "Invalid search arguments.";
                                        } else {
                                            iReturn = 2;
                                            gsLastError = sAPIError;
                                        }
                                        iTryCount = 2;
                                        break;
                                    }
                                default:
                                    {
                                        iReturn = 3;
                                        gsLastError = "Unknown error.";
                                        iTryCount = 2;
                                        break;
                                    }
                            }
                        } else {
                            iReturn = 8;
                            gsLastError = "Bad oCM Index."
                            iTryCount = 2;
                        }
                    }
                    else {
                        iTryCount++;
                        if (iTryCount < 2) {
                            xhttp = null;
                        }
                        else {
                            iReturn = 4;
                            gsLastError = "HTTP response is blank.";
                        }
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        iReturn = 5;
                        gsLastError = "HTTP response is null.";
                    }
                }
            }
            catch (e1) {
                //debugger
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    //alert("GetIndexValues Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                    iReturn = 6;
                    gsLastError = e1.message;
                }
            }
        }
        else {
            iReturn = 7; //error during HTTP open request
            gsLastError = "Error during HTTP open request";
            iTryCount = 2;
            break;
        }
    }

    return iReturn;
}

function GetTradeFees(oCM, idxTrade) {
    let dFees = 0.0;
    //"fees": {
    //    "rFee": 0,
    //    "additionalFee": 0,
    //    "cdscFee": 0,
    //    "regFee": 0,
    //    "otherCharges": 0,
    //    "commission": 0,
    //    "optRegFee": 0,
    //    "secFee": 0
    //},
    if (!isUndefined(oCM[idxTrade].fees)) {
        if (!isUndefined(oCM[idxTrade].fees.rFee)) {
            dFees = dFees + oCM[idxTrade].fees.rFee;
        }
        if (!isUndefined(oCM[idxTrade].fees.additionalFee)) {
            dFees = dFees + oCM[idxTrade].fees.additionalFee;
        }
        if (!isUndefined(oCM[idxTrade].fees.cdscFee)) {
            dFees = dFees + oCM[idxTrade].fees.cdscFee;
        }
        if (!isUndefined(oCM[idxTrade].fees.regFee)) {
            dFees = dFees + oCM[idxTrade].fees.regFee;
        }
        if (!isUndefined(oCM[idxTrade].fees.otherCharges)) {
            dFees = dFees + oCM[idxTrade].fees.otherCharges;
        }
        if (!isUndefined(oCM[idxTrade].fees.commission)) {
            dFees = dFees + oCM[idxTrade].fees.commission;
        }
        if (!isUndefined(oCM[idxTrade].fees.optRegFee)) {
            dFees = dFees + oCM[idxTrade].fees.optRegFee;
        }
    //    if (!isUndefined(oCM[idxTrade].fees.secFee)) {
    //        dFees = dFees + oCM[idxTrade].fees.secFee;
    //    }
    }
    return dFees;
}

function GetTrades(bFirstTime) {
    let iTryCount = 0;
    let vTmp = null;
    let sTmp = "";
    let bNeedToAddSymbol = false;
    let bOk = true;

    let sBodyTextAlign = "center";
    let sHeadingTextAlign = "center";
    let sTotalsBackcolor = "#99CCFF";
    let sTotalsColorGain = "green";
    let sTotalsColorLoss = gsNegativeColor;
    let sReplaceThisDivHeading = "xxxDivHeadingxxx";
    let sReplaceThisDivHeadingData = "&nbsp;";


    //debugger
    let sServerUrlBase = "https://api.tdameritrade.com/v1/accounts/xxxxx/transactions?symbol=aaaaaaa&startDate=yyyyy&endDate=zzzzz";
    let sServerUrlBaseAllSymbols = "https://api.tdameritrade.com/v1/accounts/xxxxx/transactions?startDate=yyyyy&endDate=zzzzz";
    //        let sServerUrlBase = "https://api.tdameritrade.com/v1/accounts/xxxxx/transactions?type=TRADE&symbol=aaaaaaa&startDate=yyyyy&endDate=zzzzz";
    //        let sServerUrlBaseAllSymbols = "https://api.tdameritrade.com/v1/accounts/xxxxx/transactions?type=TRADE&startDate=yyyyy&endDate=zzzzz";
    let sStartDate = "";
    let sEndDate = "";

    let sSymbolToLookup = "";
    let sSymbolsToLookupTmp = TrimLikeVB(document.getElementById("txtSymbols").value);

    let oCM;
    let sSymbolsToLookup = "";
    let sSymbolsToLookupServer = "";

    let bEndDateISTodaysDate = false;
    let idxDatesStart = 0;
    let bDoneGettingSymbolData = false;
    let idxStart = 0;

    if (bFirstTime) {
        gbDoingGetTrades = true;
        gGetTradesContext = new GetTradesContext();
        setCookie(gsMarketCookieName, SetCurrentCookie(), 30);

        if (gAccounts.length > 1) { //if more than one account then allow selecting an account to use to setup Old GL symbols
            if ((document.getElementById("spanOldGLAccount") != null) && (!isUndefined(document.getElementById("spanOldGLAccount")))) {
                if (document.getElementById("spanOldGLAccount").style.display != "none") {
                    gGetTradesContext.OldGLAccountId = document.getElementById("optOldGLAccount").options[document.getElementById("optOldGLAccount").selectedIndex].value;
                    gGetTradesContext.OldGLAccountName = document.getElementById("optOldGLAccount").options[document.getElementById("optOldGLAccount").selectedIndex].text;
                    if (gGetTradesContext.OldGLAccountId != "") {
                        gGetTradesContext.bUseOnlySelectAccount = true;
                        gGetTradesContext.sFilter = "<span>&nbsp;(Only&nbsp;-&nbsp;" + MyHTMLEncode(gGetTradesContext.OldGLAccountName) +  ")</span>"
                    }
                }
            }
        }


        if (sSymbolsToLookupTmp == "") {
            sSymbolsToLookup = "ALLSYMBOLS"; //set to this if nothing entered or more than one symbol entered
            sSymbolsToLookupServer = "ALLSYMBOLS";
        } else {
            sSymbolsToLookupTmp = GetUniqueListOfSymbols(sSymbolsToLookupTmp); //1/19/21
            vTmp = sSymbolsToLookupTmp.split(",");
            if (vTmp.length == 1) {
                sSymbolsToLookupServer = sSymbolsToLookupTmp.toUpperCase();
            } else {
                sSymbolsToLookupServer = "ALLSYMBOLS"; //set to this if nothing entered or more than one symbol entered
            }
            sSymbolsToLookup = "," + sSymbolsToLookupTmp.toUpperCase() + ",";
        }
        sStartDate = document.getElementById("txtStartDate").value;
        sEndDate = document.getElementById("txtEndDate").value;
        if (!ValidateTDDate(sStartDate, true) || !ValidateTDDate(sEndDate, true)) {
            GetTradesCanceled();
            return;
        }
        if (sEndDate < sStartDate) {
            alert("Invalid TD date. Please enter an end date greater than or equal to the start date.");
            GetTradesCanceled();
            return;
        }

        bEndDateISTodaysDate = BuildStartEndDates(sStartDate, sEndDate);

        gTrades.length = 0;
        gSymbols.length = 0;
        gSymbolsTotalDivLong = 0.0;
        gSymbolsTotalDivShort = 0.0;

        //        let sSymbolsToLookup = sSymbolsToLookupTmp.split(",")

        giProgress = 0;
        ShowProgress(true, false);
        idxDatesStart = gsStartDates.length - 1;

        let iAccountCnt = 0;
        if (gGetTradesContext.bUseOnlySelectAccount) {
            iAccountCnt = 1;
        } else {
            for (let idx = 0; idx < gAccounts.length; idx++) {
                if (gAccounts[idx].CBliquidationValue >= gdAccountMinimumLiquidationValue) {
                    iAccountCnt++;
                }
            }
        }

        gGetTradesContext.iProgressIncrement = 100 / (iAccountCnt * gsStartDates.length);

        //gGetTradesContext.iProgressIncrement = Math.floor(100 / (gAccounts.length * gsStartDates.length)) + 1;
        //if ((gGetTradesContext.iProgressIncrement * (gAccounts.length * gsStartDates.length)) > 120) {
        //    gGetTradesContext.iProgressIncrement = gGetTradesContext.iProgressIncrement - 1;
        //}

        idxStart = 0;
    } else {
        sServerUrlBase = gGetTradesContext.sServerUrlBase;
        sServerUrlBaseAllSymbols = gGetTradesContext.sServerUrlBaseAllSymbols;
        sStartDate = gGetTradesContext.sStartDate;
        sEndDate = gGetTradesContext.sEndDate;

        sSymbolToLookup = gGetTradesContext.sSymbolToLookup;
        sSymbolsToLookupTmp = gGetTradesContext.sSymbolsToLookupTmp;

        sSymbolsToLookup = gGetTradesContext.sSymbolsToLookup;
        sSymbolsToLookupServer = gGetTradesContext.sSymbolsToLookupServer;

        bEndDateISTodaysDate = gGetTradesContext.bEndDateISTodaysDate;
        idxDatesStart = gGetTradesContext.idxDatesStart;

        bOk = gGetTradesContext.bOk;
        bDoneGettingSymbolData = gGetTradesContext.bDoneGettingSymbolData;
        bNeedToAddSymbol = gGetTradesContext.bNeedToAddSymbol;
        idxStart = gGetTradesContext.idxStart;

    }

    for (let idxDates = idxDatesStart; idxDates > -1; idxDates--) {
        if (gbStopGetTrades) {
            GetTradesCanceled();
            return;
        }
        sStartDate = gsStartDates[idxDates];
        sEndDate = gsEndDates[idxDates];
        if (gAccounts.length > 0) {
            for (let idx = idxStart; idx < gAccounts.length; idx++) {
                if (gbStopGetTrades) {
                    GetTradesCanceled();
                    return;
                }
                if ((!gGetTradesContext.bUseOnlySelectAccount) || (gGetTradesContext.bUseOnlySelectAccount && (gAccounts[idx].accountId == gGetTradesContext.OldGLAccountId))) {
                    //ignore accounts with less than $1000 liquidation value
                    if (gAccounts[idx].CBliquidationValue >= gdAccountMinimumLiquidationValue) {
                        if (giProgress < 100) {
                            giProgress = giProgress + gGetTradesContext.iProgressIncrement;
                        }
                        iTryCount = 0;
                        while (iTryCount < 2) {
                            let sServerUrl = "";
                            if (sSymbolsToLookupServer == "ALLSYMBOLS") {
                                sServerUrl = sServerUrlBaseAllSymbols.replace("xxxxx", gAccounts[idx].accountId);
                            } else {
                                sServerUrl = sServerUrlBase.replace("aaaaaaa", sSymbolsToLookupServer);
                                sServerUrl = sServerUrl.replace("xxxxx", gAccounts[idx].accountId);
                            }
                            sServerUrl = sServerUrl.replace("yyyyy", sStartDate);
                            sServerUrl = sServerUrl.replace("zzzzz", sEndDate);

                            let xhttp = null;
                            let iInnerTryCount = 0;
                            xhttp = oHTTP();
                            while ((xhttp == null) && (iInnerTryCount < 5)) {
                                xhttp = oHTTP();
                                iInnerTryCount = iInnerTryCount + 1;
                            }
                            iInnerTryCount = 0;
                            if (CheckHTTPOpenGet(xhttp, sServerUrl, "Error during xhttp.open to " + sServerUrl, false, false, "", "")) {
                                // set the request header
                                xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

                                // send the request
                                try {
                                    //                                    debugger
                                    xhttp.send();
                                    if (xhttp.responseText != null) {
                                        if (xhttp.responseText != "") {
                                            //alert("GetTrades xhttp.responseText length = " + xhttp.responseText.length);

                                            let oCMLength = 0;
                                            oCM = myJSON.parse(xhttp.responseText);
                                            switch (checkTDAPIError(oCM)) {
                                                case 0: //no error
                                                    {
                                                        try {
                                                            oCMLength = oCM.length;
                                                        } catch (e2) {
                                                            oCMLength = 0;
                                                        }
                                                        break;
                                                    }
                                                case 1: //acces code expired
                                                    {
                                                        xhttp = null;
                                                        if (GetAccessCodeUsingRefreshToken()) {
                                                            oCMLength = -1;
                                                        } else {
                                                            alert("An error occurred attempting to refresh the access code. Please logoff or reload the app.");
                                                            GetTradesCanceled();
                                                            return;
                                                        }
                                                        break;
                                                    }
                                                case 2: //other error
                                                    {
                                                        oCMLength = 0;
                                                        break;
                                                    }
                                                default:
                                                    {
                                                        oCMLength = 0;
                                                        break;
                                                    }
                                            }

                                            if (oCMLength > 0) {
                                                let bUseTradeRS = false;
                                                let oTradeRS = new Trade();
                                                for (let idxTrade = 0; idxTrade < oCM.length; idxTrade++) {
                                                    if (gbStopGetTrades) {
                                                        GetTradesCanceled();
                                                        return;
                                                    }
                                                    if (oCM[idxTrade].type == "DIVIDEND_OR_INTEREST") {
                                                        bUseTradeRS = false;
                                                        if (!isUndefined(oCM[idxTrade].transactionItem.instrument)) {
                                                            gAccounts[0].totalTrades++;

                                                            let oTrade = new Trade();
                                                            oTrade.accountId = gAccounts[idx].accountId;
                                                            oTrade.accountName = gAccounts[idx].accountName;
                                                            oTrade.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                            oTrade.date = oCM[idxTrade].transactionDate;
                                                            oTrade.amount = 0;
                                                            oTrade.price = 0;
                                                            oTrade.cost = 0;
                                                            oTrade.netAmount = oCM[idxTrade].netAmount;
                                                            oTrade.divAmount = oCM[idxTrade].netAmount;
                                                            if (isUndefined(oCM[idxTrade].transactionSubType)) {
                                                                oTrade.transactionSubType = "";
                                                            } else {
                                                                oTrade.transactionSubType = oCM[idxTrade].transactionSubType;
                                                            }
                                                            oTrade.fees = GetTradeFees(oCM, idxTrade); //get the fees associated with the trade
                                                            oTrade.rFee = oTrade.fees;
                                                            oTrade.type = oCM[idxTrade].type;
                                                            if (!isUndefined(oCM[idxTrade].transactionId)) {
                                                                oTrade.transactionId = oCM[idxTrade].transactionId;
                                                            }
                                                            //gTrades[gTrades.length] = oTrade;

                                                            //now update the Symbols
                                                            if (!isUndefined(oCM[idxTrade].transactionItem)) {
                                                                if (!isUndefined(oCM[idxTrade].transactionItem.instrument)) {
                                                                    if (!isUndefined(oCM[idxTrade].transactionItem.instrument.symbol)) {
                                                                        bNeedToAddSymbol = false;
                                                                        if ((sSymbolsToLookup.indexOf("," + oCM[idxTrade].transactionItem.instrument.symbol.toUpperCase() + ",") != -1) ||
                                                                            (sSymbolsToLookup == "ALLSYMBOLS")) {
                                                                            bNeedToAddSymbol = true;
                                                                            if (gSymbols.length > 0) {
                                                                                for (let idxTmp = 0; idxTmp < gSymbols.length; idxTmp++) {
                                                                                    if ((gSymbols[idxTmp].symbol == oCM[idxTrade].transactionItem.instrument.symbol) &&
                                                                                        (gSymbols[idxTmp].accountId == gAccounts[idx].accountId)) {
                                                                                        bNeedToAddSymbol = false;
                                                                                        gSymbols[idxTmp].sell = gSymbols[idxTmp].sell + oCM[idxTrade].netAmount;
                                                                                        gSymbols[idxTmp].divAmount = gSymbols[idxTmp].divAmount + oCM[idxTrade].netAmount;
                                                                                        gSymbols[idxTmp].trades[gSymbols[idxTmp].trades.length] = oTrade;
                                                                                        gSymbols[idxTmp].fees = gSymbols[idxTmp].fees + oTrade.fees;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        if (bNeedToAddSymbol) {
                                                                            let oSymbol = new Symbol();
                                                                            oSymbol.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                                            oSymbol.accountId = gAccounts[idx].accountId;
                                                                            oSymbol.accountName = gAccounts[idx].accountName;
                                                                            oSymbol.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                                            oSymbol.sell = oCM[idxTrade].netAmount;
                                                                            oSymbol.divAmount = oCM[idxTrade].netAmount;
                                                                            oSymbol.trades[oSymbol.trades.length] = oTrade;
                                                                            oSymbol.fees = oTrade.fees;
                                                                            gSymbols[gSymbols.length] = oSymbol;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    } else if (oCM[idxTrade].type == "RECEIVE_AND_DELIVER") {
                                                        if (!isUndefined(oCM[idxTrade].transactionItem)) {
                                                            if (!isUndefined(oCM[idxTrade].transactionItem.instrument)) {
                                                                if (!isUndefined(oCM[idxTrade].transactionSubType)) {
                                                                    let bFoundSubType = false;
                                                                    let oTrade = new Trade();
                                                                    let sRADSymbol = "";
                                                                    oTrade.transactionSubType = oCM[idxTrade].transactionSubType;
                                                                    if (oCM[idxTrade].transactionSubType == "TI") {
                                                                        bUseTradeRS = false;
                                                                        //TRANSFER OF SECURITY OR OPTION IN
                                                                        oTrade.accountId = gAccounts[idx].accountId;
                                                                        oTrade.accountName = gAccounts[idx].accountName;
                                                                        oTrade.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                                        sRADSymbol = oTrade.symbol;
                                                                        oTrade.date = oCM[idxTrade].transactionDate;
                                                                        oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                                                        oTrade.fees = GetTradeFees(oCM, idxTrade); //get the fees associated with the trade
                                                                        oTrade.rFee = oTrade.fees;
                                                                        oTrade.type = oCM[idxTrade].type;
                                                                        oTrade.transactionId = oCM[idxTrade].transactionId;
                                                                        //need to get price on the transaction date
                                                                        let vTmp = oTrade.date.split("T"); //"2020-04-13T12:48:34+0000"
                                                                        if (gaFixedPrices.length > 0) {
                                                                            for (let idxFP = 0; idxFP < gaFixedPrices.length; idxFP++) {
                                                                                let oFP = new FixedPrice();
                                                                                oFP = gaFixedPrices[idxFP];
                                                                                if ((oFP.symbol == sRADSymbol.toUpperCase()) &&
                                                                                    (oFP.date == vTmp[0])) {
                                                                                    oTrade.price = oFP.price;
                                                                                    oTrade.cost = -1 * (oTrade.price * oTrade.amount); //negative because a buy trade
                                                                                    oTrade.netAmount = oTrade.cost;
                                                                                    oTrade.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                                                    bFoundSubType = true;
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    } else if (oCM[idxTrade].transactionSubType == "RS") {
                                                                        //MANDATORY REVERSE SPLIT
                                                                        oTrade.accountId = gAccounts[idx].accountId;
                                                                        oTrade.accountName = gAccounts[idx].accountName;
                                                                        oTrade.date = oCM[idxTrade].transactionDate;
                                                                        oTrade.price = 0.0;
                                                                        oTrade.cost = 0.0;
                                                                        oTrade.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                                        oTrade.fees = GetTradeFees(oCM, idxTrade); //get the fees associated with the trade
                                                                        oTrade.rFee = oTrade.fees;
                                                                        oTrade.type = oCM[idxTrade].type;
                                                                        oTrade.transactionId = oCM[idxTrade].transactionId;
                                                                        if (isUndefined(oCM[idxTrade].transactionItem.instrument.symbol)) {
                                                                            //decreasing number of shares - cost 0
                                                                            oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                                                            oTrade.netAmount = 0.0;
                                                                            //need to lookup cusip to get symbol
                                                                            let iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/instruments?symbol=" + oCM[idxTrade].transactionItem.instrument.cusip + "&projection=symbol-search", 0);
                                                                            if (iReturn == 0) {
                                                                                if (!isUndefined(oCMTemp[oCM[idxTrade].transactionItem.instrument.cusip])) {
                                                                                    oTrade.symbol = oCMTemp[oCM[idxTrade].transactionItem.instrument.cusip].symbol;
                                                                                    oTrade.cusip = oCM[idxTrade].transactionItem.instrument.cusip;
                                                                                    sRADSymbol = oTrade.symbol;
                                                                                    bFoundSubType = true;
                                                                                    bUseTradeRS = false;
                                                                                } else {
                                                                                    oTradeRS = new Trade();
                                                                                    oTradeRS.accountId = oTrade.accountId
                                                                                    oTradeRS.accountName = oTrade.accountName;
                                                                                    oTradeRS.amount = oTrade.amount;
                                                                                    oTradeRS.assetType = oTrade.assetType;
                                                                                    oTradeRS.cost = oTrade.cost;
                                                                                    oTradeRS.date = oTrade.date;
                                                                                    oTradeRS.netAmount = oTrade.netAmount;
                                                                                    oTradeRS.fees = oTrade.fees;
                                                                                    oTradeRS.price = oTrade.price;
                                                                                    oTradeRS.transactionSubType = oCM[idxTrade].transactionSubType;
                                                                                    bUseTradeRS = true;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            //increasing number of shares - cost 0
                                                                            oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                                                            oTrade.netAmount = -0.00001;
                                                                            oTrade.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                                            sRADSymbol = oTrade.symbol;
                                                                            bFoundSubType = true;
                                                                        }
                                                                    } else if (oCM[idxTrade].transactionSubType == "SP") {
                                                                        //STOCK SPLIT
                                                                        bUseTradeRS = false;
                                                                        oTrade.accountId = gAccounts[idx].accountId;
                                                                        oTrade.accountName = gAccounts[idx].accountName;
                                                                        oTrade.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                                        sRADSymbol = oTrade.symbol;
                                                                        oTrade.date = oCM[idxTrade].transactionDate;
                                                                        oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                                                        oTrade.fees = GetTradeFees(oCM, idxTrade); //get the fees associated with the trade
                                                                        oTrade.rFee = oTrade.fees;
                                                                        oTrade.type = oCM[idxTrade].type;
                                                                        oTrade.transactionId = oCM[idxTrade].transactionId;

                                                                        oTrade.price = 0.00001;
                                                                        oTrade.cost = -0.00001; //negative because a buy trade
                                                                        oTrade.netAmount = oTrade.cost;
                                                                        oTrade.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                                        bFoundSubType = true;

                                                                        //    //need to get price on the transaction date
                                                                        //    let vTmp = oTrade.date.split("T"); //"2020-04-13T12:48:34+0000"
                                                                        //    if (gaFixedPrices.length > 0) {
                                                                        //        for (let idxFP = 0; idxFP < gaFixedPrices.length; idxFP++) {
                                                                        //            let oFP = new FixedPrice();
                                                                        //            oFP = gaFixedPrices[idxFP];
                                                                        //            if ((oFP.symbol == sRADSymbol.toUpperCase()) &&
                                                                        //                (oFP.date == vTmp[0])) {
                                                                        //                oTrade.price = oFP.price;
                                                                        //                oTrade.cost = -1 * (oTrade.price * oTrade.amount); //negative because a buy trade
                                                                        //                oTrade.netAmount = oTrade.cost;
                                                                        //                oTrade.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                                        //                bFoundSubType = true;
                                                                        //                break;
                                                                        //            }
                                                                        //        }
                                                                        //    }
                                                                    } else {
                                                                        bUseTradeRS = false;
                                                                    }

                                                                    //if (oCM[idxTrade].transactionSubType == "RS") {
                                                                    //    //MANDATORY REVERSE SPLIT
                                                                    //    oTrade.accountId = gAccounts[idx].accountId;
                                                                    //    oTrade.accountName = gAccounts[idx].accountName;
                                                                    //    oTrade.date = oCM[idxTrade].transactionDate;
                                                                    //    oTrade.price = 0.0;
                                                                    //    oTrade.cost = 0.0;
                                                                    //    oTrade.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                                    //    if (isUndefined(oCM[idxTrade].transactionItem.instrument.symbol)) {
                                                                    //        //decreasing number of shares - cost 0
                                                                    //        oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                                                    //        oTrade.netAmount = 0.0;
                                                                    //        //need to lookup cusip to get symbol
                                                                    //        let iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/instruments?symbol=" + oCM[idxTrade].transactionItem.instrument.cusip + "&projection=symbol-search", 0);
                                                                    //        if (iReturn == 0) {
                                                                    //            if (!isUndefined(oCMTemp[oCM[idxTrade].transactionItem.instrument.cusip])) {
                                                                    //                oTrade.symbol = oCMTemp[oCM[idxTrade].transactionItem.instrument.cusip].symbol;
                                                                    //                sRADSymbol = oTrade.symbol;
                                                                    //                bFoundSubType = true;
                                                                    //            }
                                                                    //        }
                                                                    //    } else {
                                                                    //        //increasing number of shares - cost 0
                                                                    //        oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                                                    //        oTrade.netAmount = -0.00001;
                                                                    //        oTrade.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                                    //        sRADSymbol = oTrade.symbol;
                                                                    //        bFoundSubType = true;
                                                                    //    }
                                                                    //}
                                                                    if (bFoundSubType) {
                                                                        if (bUseTradeRS) {
                                                                            bUseTradeRS = false;
                                                                            oTradeRS.symbol = sRADSymbol;
                                                                            GetTradesAddSymbol(idx, sSymbolsToLookup, sRADSymbol, oTradeRS);
                                                                        }
                                                                        GetTradesAddSymbol(idx, sSymbolsToLookup, sRADSymbol, oTrade);
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    } else if (oCM[idxTrade].type == "TRADE") {
                                                        bUseTradeRS = false;
                                                        gAccounts[0].totalTrades++;
                                                        let oTrade = new Trade();
                                                        oTrade.accountId = gAccounts[idx].accountId;
                                                        oTrade.accountName = gAccounts[idx].accountName;
                                                        oTrade.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                        oTrade.date = oCM[idxTrade].transactionDate;
                                                        oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                                        oTrade.price = oCM[idxTrade].transactionItem.price;
                                                        oTrade.cost = oCM[idxTrade].transactionItem.cost;
                                                        oTrade.netAmount = oCM[idxTrade].netAmount;
                                                        oTrade.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                        if (isUndefined(oCM[idxTrade].transactionSubType)) {
                                                            oTrade.transactionSubType = "";
                                                        } else {
                                                            oTrade.transactionSubType = oCM[idxTrade].transactionSubType;
                                                        }
                                                        oTrade.fees = GetTradeFees(oCM, idxTrade); //get the fees associated with the trade
                                                        oTrade.rFee = oTrade.fees;
                                                        oTrade.type = oCM[idxTrade].type;
                                                        oTrade.transactionId = oCM[idxTrade].transactionId;
                                                        //gTrades[gTrades.length] = oTrade;

                                                        //now update the Symbols
                                                        if (!isUndefined(oCM[idxTrade].transactionItem)) {
                                                            if (!isUndefined(oCM[idxTrade].transactionItem.instrument)) {
                                                                if (!isUndefined(oCM[idxTrade].transactionItem.instrument.symbol)) {
                                                                    bNeedToAddSymbol = false;
                                                                    if ((sSymbolsToLookup.indexOf("," + oCM[idxTrade].transactionItem.instrument.symbol.toUpperCase() + ",") != -1) ||
                                                                        (sSymbolsToLookup == "ALLSYMBOLS")) {
                                                                        bNeedToAddSymbol = true;
                                                                        if (gSymbols.length > 0) {
                                                                            for (let idxTmp = 0; idxTmp < gSymbols.length; idxTmp++) {
                                                                                if ((gSymbols[idxTmp].symbol == oCM[idxTrade].transactionItem.instrument.symbol) &&
                                                                                    (gSymbols[idxTmp].accountId == gAccounts[idx].accountId)) {
                                                                                    bNeedToAddSymbol = false;
                                                                                    if (oCM[idxTrade].netAmount < 0.0) {
                                                                                        //buy
                                                                                        gSymbols[idxTmp].shares = gSymbols[idxTmp].shares + oCM[idxTrade].transactionItem.amount;
                                                                                        gSymbols[idxTmp].buy = gSymbols[idxTmp].buy - oCM[idxTrade].netAmount;
                                                                                    } else {
                                                                                        //sell
                                                                                        gSymbols[idxTmp].shares = gSymbols[idxTmp].shares - oCM[idxTrade].transactionItem.amount;
                                                                                        gSymbols[idxTmp].sell = gSymbols[idxTmp].sell + oCM[idxTrade].netAmount;
                                                                                    }
                                                                                    gSymbols[idxTmp].trades[gSymbols[idxTmp].trades.length] = oTrade;
                                                                                    gSymbols[idxTmp].fees = gSymbols[idxTmp].fees + oTrade.fees;
                                                                                    break;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    if (bNeedToAddSymbol) {
                                                                        let oSymbol = new Symbol();
                                                                        oSymbol.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                                        oSymbol.accountId = gAccounts[idx].accountId;
                                                                        oSymbol.accountName = gAccounts[idx].accountName;
                                                                        oSymbol.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                                        if (oCM[idxTrade].netAmount < 0.0) {
                                                                            //buy
                                                                            oSymbol.shares = oCM[idxTrade].transactionItem.amount;
                                                                            oSymbol.buy = -1 * oCM[idxTrade].netAmount;
                                                                        } else {
                                                                            //sell
                                                                            oSymbol.shares = -1 * oCM[idxTrade].transactionItem.amount;
                                                                            oSymbol.sell = oCM[idxTrade].netAmount;
                                                                        }
                                                                        oSymbol.trades[oSymbol.trades.length] = oTrade;
                                                                        oSymbol.fees = oTrade.fees;
                                                                        gSymbols[gSymbols.length] = oSymbol;
                                                                    }

                                                                }
                                                            }
                                                        }
                                                    } else {
                                                        bUseTradeRS = false;
                                                    }
                                                }
                                            }
                                            if (oCMLength != -1) {
                                                iTryCount = 2;
                                            }
                                        }
                                        else {
                                            iTryCount++;
                                            if (iTryCount < 2) {
                                                xhttp = null;
                                            }
                                            else {
                                                //alert ("GetTrades Error - HTTP response is blank." + " (" + iTryCount.toString() + ")");
                                            }
                                        }
                                    }
                                    else {
                                        iTryCount++;
                                        if (iTryCount < 2) {
                                            xhttp = null;
                                        }
                                        else {
                                            //alert ("GetTrades Error - HTTP response is null." + " (" + iTryCount.toString() + ")");
                                        }
                                    }
                                }
                                catch (e1) {
                                    //debugger
                                    iTryCount++;
                                    if (iTryCount < 2) {
                                        xhttp = null;
                                    }
                                    else {
                                        alert("GetTrades Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                                        bOk = false;
                                    }
                                }
                            }
                            else {
                                break;
                            }
                        }
                        gGetTradesContext.sServerUrlBase = sServerUrlBase;
                        gGetTradesContext.sServerUrlBaseAllSymbols = sServerUrlBaseAllSymbols;
                        gGetTradesContext.sStartDate = sStartDate;
                        gGetTradesContext.sEndDate = sEndDate;

                        gGetTradesContext.sSymbolToLookup = sSymbolToLookup;
                        gGetTradesContext.sSymbolsToLookupTmp = sSymbolsToLookupTmp;

                        gGetTradesContext.sSymbolsToLookup = sSymbolsToLookup;
                        gGetTradesContext.sSymbolsToLookupServer = sSymbolsToLookupServer;

                        gGetTradesContext.bEndDateISTodaysDate = bEndDateISTodaysDate;
                        gGetTradesContext.idxDatesStart = idxDates;

                        gGetTradesContext.bOk = bOk;
                        gGetTradesContext.bDoneGettingSymbolData = bDoneGettingSymbolData;
                        gGetTradesContext.bNeedToAddSymbol = bNeedToAddSymbol;
                        gGetTradesContext.idxStart = idx + 1;

                        window.setTimeout("GetTrades(false)", 100);
                        return;
                    }
                }
            }
        }

        if (!bOk) {
            break;
        }
        gGetTradesContext.sServerUrlBase = sServerUrlBase;
        gGetTradesContext.sServerUrlBaseAllSymbols = sServerUrlBaseAllSymbols;
        gGetTradesContext.sStartDate = sStartDate;
        gGetTradesContext.sEndDate = sEndDate;

        gGetTradesContext.sSymbolToLookup = sSymbolToLookup;
        gGetTradesContext.sSymbolsToLookupTmp = sSymbolsToLookupTmp;

        gGetTradesContext.sSymbolsToLookup = sSymbolsToLookup;
        gGetTradesContext.sSymbolsToLookupServer = sSymbolsToLookupServer;

        gGetTradesContext.bEndDateISTodaysDate = bEndDateISTodaysDate;
        gGetTradesContext.idxDatesStart = idxDates - 1;

        gGetTradesContext.bOk = bOk;
        gGetTradesContext.bDoneGettingSymbolData = bDoneGettingSymbolData;
        gGetTradesContext.bNeedToAddSymbol = bNeedToAddSymbol;
        gGetTradesContext.idxStart = 0;

        window.setTimeout("GetTrades(false)", 10);
        return;

    }
    if (gbStopGetTrades) {
        GetTradesCanceled();
        return;
    }
    if (bOk) {
        if (gSymbols.length > 0) {

            GetCurrentPrices();

            gSymbols.sort(sortBySymbolAndAccountname);

            //let sSymbolDisplay = "<table style=\"width:100%;border-width:0px;\">";
            let sSymbolDisplay = "";
            let s = "";
            let sLastSymbol = "";
            let sSymbol = "";
            let sTmp = "";
            let sAccountName = "";
            let dTotalBuy = 0.0;
            let dTotalSell = 0.0;
            let dTotalShares = 0.0;
            let dTotalDiv = 0.0;
            let dCurrentPrice = 0.0;
            let dTotalFees = 0.0;

            let dTotalLongShort = 0.0;
            let dTotalLongShortDiv = 0.0;
            let dTotalLongShortFees = 0.0;
            let iTotalLongShortSymbols = 0;

            let sLastAssetType = "";
            let bNeedTotal = false;

            let totalBackgroundColor = "lightgray";
            let symbolTextColor = "blue";

            let iTRId = 0;
            let sTRId = "";

            //debugger
            //------------------------------------------------------------
            let bDoingLong = true;
            let bNeedTotalLongShort = false;
            let bNeedDivColumnLong = false;
            let bNeedDivColumnShort = false;
            for (let idxLongShort = 0; idxLongShort < 2; idxLongShort++) {
                sLastSymbol = "";
                s = "";
                sReplaceThisDivHeadingData = "&nbsp;";
                if (idxLongShort == 0) {
                    bDoingLong = true;
                } else {
                    if (dTotalLongShortDiv != 0.0) {
                        bNeedDivColumnLong = true;
                    }
                    dTotalLongShortDiv = 0.0;
                    bNeedTotalLongShort = false;
                    bDoingLong = false;
                }
                for (let idx = 0; idx < gSymbols.length; idx++) {
                    if (sLastSymbol == "") {
                        sSymbol = gSymbols[idx].symbol;
                        sLastSymbol = sSymbol;
                        dTotalDiv = gSymbols[idx].divAmount;
                        dTotalShares = gSymbols[idx].shares;
                        bNeedTotal = true;
                    } else if (sLastSymbol == gSymbols[idx].symbol) {
                        sSymbol = gSymbols[idx].symbol;
                        dTotalDiv = dTotalDiv + gSymbols[idx].divAmount;
                        dTotalShares = dTotalShares + gSymbols[idx].shares;
                    } else {
                        let bOkToContinue = false;
                        if (dTotalShares < 0.0) {
                            if (!bDoingLong) {
                                bOkToContinue = true;
                                bNeedTotalLongShort = true;
                            }
                        } else {
                            if (bDoingLong) {
                                bOkToContinue = true;
                                bNeedTotalLongShort = true;
                            }
                        }
                        if (bOkToContinue) {
                            dTotalLongShortDiv = dTotalLongShortDiv + dTotalDiv;
                        }

                        sSymbol = gSymbols[idx].symbol;

                        sLastSymbol = sSymbol;
                        dTotalDiv = gSymbols[idx].divAmount;
                        dTotalShares = gSymbols[idx].shares;
                        bNeedTotal = true;
                    }
                }
                if (bNeedTotal) {
                    dTotalLongShortDiv = dTotalLongShortDiv + dTotalDiv;
                    bNeedTotal = false;
                    if (dTotalShares < 0.0) {
                        if (!bDoingLong) {
                            bNeedTotalLongShort = true;
                        }
                    } else {
                        if (bDoingLong) {
                            bNeedTotalLongShort = true;
                        }
                    }
                }
                if (bNeedTotalLongShort) {
                    if (bDoingLong) {
                    } else {
                        if (dTotalLongShortDiv != 0.0) {
                            bNeedDivColumnShort = true;
                        }
                    }
                }
            }

            let sColSpan = "";
            let iPwdFormHeight = document.getElementById("pwdForm").clientHeight + 10;
            document.getElementById("tblSymbols").style.top = iPwdFormHeight.toString() + "px";
            document.getElementById("tblSymbols").style.left = "0px";
            if (bNeedDivColumnLong || bNeedDivColumnShort) {
                document.getElementById("tblSymbols").style.width = "570px";
                document.getElementById("nameTitle").style.width = "550px";
                sColSpan = "7";
            } else {
                document.getElementById("tblSymbols").style.width = "500px";
                document.getElementById("nameTitle").style.width = "480px";
                sColSpan = "6";
            }
            document.getElementById("tblSymbols").style.visibility = "visible";
            giZIndex++;
            document.getElementById("tblSymbols").style.zIndex = giZIndex.toString();
            document.getElementById("tblDetail").style.visibility = "hidden";
            document.getElementById("nameTitle").innerHTML = "Symbols" + gGetTradesContext.sFilter;

            //------------------------------------------------------------
            sSymbolDisplay = "";
            s = "";
            sLastSymbol = "";
            sSymbol = "";
            sTmp = "";
            sAccountName = "";
            dTotalBuy = 0.0;
            dTotalSell = 0.0;
            dTotalShares = 0.0;
            dTotalDiv = 0.0;
            dCurrentPrice = 0.0;
            dTotalFees = 0.0;

            dTotalLongShort = 0.0;
            dTotalLongShortDiv = 0.0;
            dTotalLongShortFees = 0.0;
            iTotalLongShortSymbols = 0;

            sLastAssetType = "";
            bNeedTotal = false;

            totalBackgroundColor = "lightgray";
            symbolTextColor = "blue";

            iTRId = 0;
            sTRId = "";

            let sFieldWidths = {
                "Account": "width:20%;",
                "Buy": "width:19%;",
                "Sell": "width:19%;",
                "Shares": "width:13%;",
                "Price": "width:14%;",
                "GL": "width:15%;",
                "Div": "width:13%;"
            }

            let sFieldWidthsDiv = {
                "Account": "width:19%;",
                "Buy": "width:16%;",
                "Sell": "width:16%;",
                "Shares": "width:11%;",
                "Price": "width:12%;",
                "GL": "width:13%;",
                "Div": "width:13%;"
            }

            if (bNeedDivColumnLong || bNeedDivColumnShort) {
                sFieldWidths.Account = sFieldWidthsDiv.Account;
                sFieldWidths.Buy = sFieldWidthsDiv.Buy;
                sFieldWidths.Sell = sFieldWidthsDiv.Sell;
                sFieldWidths.Shares = sFieldWidthsDiv.Shares;
                sFieldWidths.Price = sFieldWidthsDiv.Price;
                sFieldWidths.GL = sFieldWidthsDiv.GL;
            }

            bDoingLong = true;
            bNeedTotalLongShort = false;
            for (let idxLongShort = 0; idxLongShort < 2; idxLongShort++) {
                sLastSymbol = "";
                s = "";
                let sCurrentDiv = "";
                if (idxLongShort == 0) {
                    sSymbolDisplay = sSymbolDisplay + "<table style=\"border-collapse:collapse; border: 0px solid black;width:100%;border-width:0px;\">";
                    sSymbolDisplay = sSymbolDisplay + "<tr><td colspan=\"" + sColSpan + "\" style=\"text-align:center; color:" + gsNegativeColor + "; font-size:16pt;height:30px;width:100%;vertical-align:middle;border-width:0px;border-style: solid;border-spacing:1px;border-color: White\"><b>Long Symbols</b>&nbsp;&nbsp;" + gsReplaceImgSymbolsLong + "</td></tr>";
                    sSymbolDisplay = sSymbolDisplay + "</table>"
                    sSymbolDisplay = sSymbolDisplay + "<div id =\"divSymbolsLong\" name=\"divSymbolsLong\" style=\"" + gsReplaceTableHeightOverflowSymbolsLong + "\">";
                    sSymbolDisplay = sSymbolDisplay + "<table style=\"border-collapse:collapse; border: 0px solid black;width:100%;border-width:0px;\">";
                    iTotalLongShortSymbols = 0;
                    bDoingLong = true;
                    sCurrentDiv = "divSymbolsLong";
                } else {
                    dTotalLongShort = 0.0;
                    dTotalLongShortFees = 0.0;
                    dTotalLongShortDiv = 0.0;
                    bNeedTotalLongShort = false;
                    sSymbolDisplay = sSymbolDisplay + "</table></div>";
                    sSymbolDisplay = sSymbolDisplay + "<table style=\"border-collapse:collapse; border: 0px solid black;width:100%;border-width:0px;\">";
                    sSymbolDisplay = sSymbolDisplay + "<tr><td colspan=\"" + sColSpan + "\" style=\"text-align:center; color:" + gsNegativeColor + "; font-size:16pt;height:30px;width:100%;vertical-align:middle;border-width:0px;border-style:solid;border-spacing:1px;border-color:White\"><b>Short Symbols</b>&nbsp;&nbsp;" + gsReplaceImgSymbolsShort + "</td></tr>";
                    sSymbolDisplay = sSymbolDisplay + "</table>"
                    sSymbolDisplay = sSymbolDisplay + "<div id =\"divSymbolsShort\" name=\"divSymbolsShort\" style=\"" + gsReplaceTableHeightOverflowSymbolsShort + "\">";
                    sSymbolDisplay = sSymbolDisplay + "<table style=\"border-collapse:collapse; border: 0px solid black;width:100%;border-width:0px;\">";
                    iTotalLongShortSymbols = 0;
                    bDoingLong = false;
                    sCurrentDiv = "divSymbolsShort";
                }


                for (let idx = 0; idx < gSymbols.length; idx++) {
                    if (sLastSymbol == "") {
                        sSymbol = gSymbols[idx].symbol;
                        //if (sSymbol.toUpperCase() == "ETSY") {
                        //    debugger
                        //}
                        sLastSymbol = sSymbol;
                        sAccountName = gSymbols[idx].accountName;
                        s = s + "<tr><td colspan=\"" + sColSpan + "\" style=\"color:" + symbolTextColor + "; height:20px; width:100%; vertical-align:top; border-width:0px; border-style:solid; border-spacing:1px; border-color:White\"><b>" + (gSymbols[idx].assetType === "OPTION" ? " <span style='color:red;'>*&nbsp;</span>" : "") + sSymbol + "</b> - xxxxxxxxxxxx</td></tr > ";
                        s = s + "<tr>";

                        s = s + "<td style=\"" + sFieldWidths.Account + " vertical-align:top;border-width:0px;\"><I>Account</I></td>";
                        s = s + "<td style=\"" + sFieldWidths.Buy + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>Buy</I></td>";
                        s = s + "<td style=\"" + sFieldWidths.Sell + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>Sell</I></td>";
                        s = s + "<td style=\"" + sFieldWidths.Shares + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>Shares</I></td>";
                        s = s + "<td style=\"" + sFieldWidths.Price + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>Price</I></td>";
                        s = s + "<td style=\"" + sFieldWidths.GL + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>G/L</I></td>";
                        if (bNeedDivColumnLong || bNeedDivColumnShort) {
                            s = s + "<td style=\"" + sFieldWidths.Div + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>" + sReplaceThisDivHeading + "</I></td>";
                        }

                        s = s + "</tr>";

                        s = s + "<tr>";

                        iTRId++;
                        sTRId = "TDSym" + iTRId.toString();
                        s = s + "<td id=\"" + sTRId + "\" style=\"" + sFieldWidths.Account + " vertical-align:top;border-width:0px;\"><a href=\"JavaScript: DoGetTradesBySymbol('" + sSymbol + "','" + gSymbols[idx].accountId + "','" + sAccountName + "','" + sTRId + "', " + idx.toString() + ",'" + sCurrentDiv + "') \">" + sAccountName + SetFeeIndicator(idx) + "</a></td > ";

                        //                        sTmp = FormatMoney(gSymbols[idx].buy);
                        sTmp = FormatDecimalNumber(gSymbols[idx].buy, 5, 2, "");
                        s = s + "<td style=\"" + sFieldWidths.Buy + " text-align:" + sBodyTextAlign + "; vertical - align: top; border - width: 0px; \">" + sTmp + "</td>";
                        dTotalBuy = gSymbols[idx].buy;

                        //                        sTmp = FormatMoney(gSymbols[idx].sell);
                        sTmp = FormatDecimalNumber(gSymbols[idx].sell, 5, 2, "");
                        s = s + "<td style=\"" + sFieldWidths.Sell + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        dTotalSell = gSymbols[idx].sell;

                        //                        sTmp = FormatInt(gSymbols[idx].shares);
                        sTmp = FormatDecimalNumber(gSymbols[idx].shares, 3, 1, "");
                        s = s + "<td style=\"" + sFieldWidths.Shares + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        dTotalShares = gSymbols[idx].shares;

                        //sTmp = FormatDecimalNumber(gSymbols[idx].fees, 5, 2, "");
                        //s = s + "<td style=\"width:19%; text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        dTotalFees = gSymbols[idx].fees;

                        let oSymbolPrice = new SymbolPrice();
                        sLastAssetType = gSymbols[idx].assetType;
                        oSymbolPrice = gSymbols[idx].SymbolPrice;
                        if (sLastAssetType == "OPTION") {
                            gSymbols[idx].description = oSymbolPrice.description;
                            dCurrentPrice = oSymbolPrice.price; //get the current price here
                            s = s.replace("xxxxxxxxxxxx", oSymbolPrice.description);
                            dCurrentPrice = oSymbolPrice.price; //get the current price here
                            //                            sTmp = FormatMoney(dCurrentPrice);
                            sTmp = FormatDecimalNumber(dCurrentPrice, 3, 2, "");
                            s = s + "<td style=\"" + sFieldWidths.Price + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                            //                            sTmp = FormatMoney((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * 100 * dCurrentPrice));
                            sTmp = FormatDecimalNumber((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * 100 * dCurrentPrice), 3, 2, "");
                        } else {
                            gSymbols[idx].description = oSymbolPrice.description;
                            dCurrentPrice = oSymbolPrice.price; //get the current price here
                            s = s.replace("xxxxxxxxxxxx", oSymbolPrice.description);
                            dCurrentPrice = oSymbolPrice.price; //get the current price here
                            //                            sTmp = FormatMoney(dCurrentPrice);
                            sTmp = FormatDecimalNumber(dCurrentPrice, 3, 2, "");
                            s = s + "<td style=\"" + sFieldWidths.Price + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                            //                            sTmp = FormatMoney((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * dCurrentPrice));
                            sTmp = FormatDecimalNumber((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * dCurrentPrice), 3, 2, "");
                        }

                        let sOnclick = "";

                        if (sTmp.indexOf("-") != -1) {
                            s = s + "<td " + sOnclick + " style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorLoss + ";" + sFieldWidths.GL + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        } else {
                            s = s + "<td " + sOnclick + " style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorGain + ";" + sFieldWidths.GL + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        }

                        if (bNeedDivColumnLong || bNeedDivColumnShort) {
                            sTmp = FormatDecimalNumber(gSymbols[idx].divAmount, 3, 2, "");
                            if (sTmp.indexOf("-") != -1) {
                                s = s + "<td style=\" color: " + sTotalsColorLoss + ";" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                                sReplaceThisDivHeadingData = "Div";
                            } else {
                                if (sTmp == "0.00") {
                                    s = s + "<td style=\" color: black;" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">&nbsp;</td>";
                                } else {
                                    s = s + "<td style=\" color: " + sTotalsColorGain + ";" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                                    sReplaceThisDivHeadingData = "Div";
                                }
                            }
                            dTotalDiv = gSymbols[idx].divAmount;
                        }

                        s = s + "</tr>";
                        bNeedTotal = true;


                    } else if (sLastSymbol == gSymbols[idx].symbol) {
                        sSymbol = gSymbols[idx].symbol;
                        sAccountName = gSymbols[idx].accountName;
                        s = s + "<tr>";

                        iTRId++;
                        sTRId = "TDSym" + iTRId.toString();
                        s = s + "<td id=\"" + sTRId + "\" style=\"" + sFieldWidths.Account + " vertical-align:top;border-width:0px;\"><a href=\"JavaScript: DoGetTradesBySymbol('" + sSymbol + "','" + gSymbols[idx].accountId + "','" + sAccountName + "','" + sTRId + "', " + idx.toString() + ",'" + sCurrentDiv + "') \">" + sAccountName + SetFeeIndicator(idx) + "</a></td > ";
                        //                        sTmp = FormatMoney(gSymbols[idx].buy);
                        sTmp = FormatDecimalNumber(gSymbols[idx].buy, 5, 2, "");
                        s = s + "<td style=\"" + sFieldWidths.Buy + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        dTotalBuy = dTotalBuy + gSymbols[idx].buy;

                        //                        sTmp = FormatMoney(gSymbols[idx].sell);
                        sTmp = FormatDecimalNumber(gSymbols[idx].sell, 5, 2, "");
                        s = s + "<td style=\"" + sFieldWidths.Sell + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        dTotalSell = dTotalSell + gSymbols[idx].sell;

                        //                        sTmp = FormatInt(gSymbols[idx].shares);
                        sTmp = FormatDecimalNumber(gSymbols[idx].shares, 3, 1, "");
                        s = s + "<td style=\"" + sFieldWidths.Shares + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        dTotalShares = dTotalShares + gSymbols[idx].shares;

                        //sTmp = FormatDecimalNumber(gSymbols[idx].fees, 5, 2, "");
                        //s = s + "<td style=\"width:19%; text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        dTotalFees = dTotalFees + gSymbols[idx].fees;

                        //                        sTmp = FormatMoney(dCurrentPrice);
                        sTmp = FormatDecimalNumber(dCurrentPrice, 3, 2, "");
                        s = s + "<td style=\"" + sFieldWidths.Price + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";


                        if (sLastAssetType == "OPTION") {
                            //                            sTmp = FormatMoney((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * 100 * dCurrentPrice));
                            sTmp = FormatDecimalNumber((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * 100 * dCurrentPrice), 3, 2, "");
                        } else {
                            //                            sTmp = FormatMoney((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * dCurrentPrice));
                            sTmp = FormatDecimalNumber((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * dCurrentPrice), 3, 2, "");
                        }

                        let sOnclick = "";

                        if (sTmp.indexOf("-") != -1) {
                            s = s + "<td " + sOnclick + " style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorLoss + ";" + sFieldWidths.GL + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        } else {
                            s = s + "<td " + sOnclick + " style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorGain + ";" + sFieldWidths.GL + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        }

                        if (bNeedDivColumnLong || bNeedDivColumnShort) {
                            sTmp = FormatDecimalNumber(gSymbols[idx].divAmount, 3, 2, "");
                            if (sTmp.indexOf("-") != -1) {
                                s = s + "<td style=\" color: " + sTotalsColorLoss + ";" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                                sReplaceThisDivHeadingData = "Div";
                            } else {
                                if (sTmp == "0.00") {
                                    s = s + "<td style=\" color: black;" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">&nbsp;</td>";
                                } else {
                                    s = s + "<td style=\" color: " + sTotalsColorGain + ";" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                                    sReplaceThisDivHeadingData = "Div";
                                }
                            }
                            dTotalDiv = dTotalDiv + gSymbols[idx].divAmount;
                        }

                        s = s + "</tr>";

                    } else {
                        let bOkToContinue = false;
                        if (dTotalShares < 0.0) {
                            if (!bDoingLong) {
                                bOkToContinue = true;
                                bNeedTotalLongShort = true;
                            }
                        } else {
                            if (bDoingLong) {
                                bOkToContinue = true;
                                bNeedTotalLongShort = true;
                            }
                        }
                        if (bOkToContinue) {
                            iTotalLongShortSymbols++;
                            dTotalLongShortFees = dTotalLongShortFees + dTotalFees;
                            dTotalLongShortDiv = dTotalLongShortDiv + dTotalDiv;
                            //show total and then first lines of new symbol
                            s = s + "<tr style=\"background-color:" + totalBackgroundColor + "; \">";

                            s = s + "<td style=\"" + sFieldWidths.Account + " vertical-align:top;border-width:0px;\"><I>Total</I></td > ";
                            //                        sTmp = FormatMoney(dTotalBuy);
                            sTmp = FormatDecimalNumber(dTotalBuy, 5, 2, "");
                            s = s + "<td style=\"" + sFieldWidths.Buy + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                            //                        sTmp = FormatMoney(dTotalSell);
                            sTmp = FormatDecimalNumber(dTotalSell, 5, 2, "");
                            s = s + "<td style=\"" + sFieldWidths.Sell + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                            //                        sTmp = FormatInt(gSymbols[idx].shares);
                            sTmp = FormatDecimalNumber(dTotalShares, 3, 1, "");
                            s = s + "<td style=\"" + sFieldWidths.Shares + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                            //                        sTmp = FormatMoney(dCurrentPrice);
                            sTmp = FormatDecimalNumber(dCurrentPrice, 3, 2, "");
                            s = s + "<td style=\"" + sFieldWidths.Price + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                            if (sLastAssetType == "OPTION") {
                                //                            sTmp = FormatMoney((-1 * dTotalBuy) + dTotalSell + (dTotalShares * 100 * dCurrentPrice));
                                sTmp = FormatDecimalNumber((-1 * dTotalBuy) + dTotalSell + (dTotalShares * 100 * dCurrentPrice), 3, 2, "");
                                dTotalLongShort = dTotalLongShort + ((-1 * dTotalBuy) + dTotalSell + (dTotalShares * 100 * dCurrentPrice));
                            } else {
                                //                            sTmp = FormatMoney((-1 * dTotalBuy) + dTotalSell + (dTotalShares * dCurrentPrice));
                                sTmp = FormatDecimalNumber((-1 * dTotalBuy) + dTotalSell + (dTotalShares * dCurrentPrice), 3, 2, "");
                                dTotalLongShort = dTotalLongShort + ((-1 * dTotalBuy) + dTotalSell + (dTotalShares * dCurrentPrice));
                            }

                            if (sTmp.indexOf("-") != -1) {
                                s = s + "<td style=\"background-color:" + totalBackgroundColor + "; color: " + sTotalsColorLoss + ";" + sFieldWidths.GL + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                            } else {
                                s = s + "<td style=\"background-color:" + totalBackgroundColor + "; color: " + sTotalsColorGain + ";" + sFieldWidths.GL + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                            }

                            if (bNeedDivColumnLong || bNeedDivColumnShort) {
                                sTmp = FormatDecimalNumber(dTotalDiv, 3, 2, "");
                                if (sTmp.indexOf("-") != -1) {
                                    s = s + "<td style=\" color: " + sTotalsColorLoss + ";" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                                    sReplaceThisDivHeadingData = "Div";
                                } else {
                                    if (sTmp == "0.00") {
                                        s = s + "<td style=\" color: black;" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">&nbsp;</td>";
                                    } else {
                                        s = s + "<td style=\" color: " + sTotalsColorGain + ";" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                                        sReplaceThisDivHeadingData = "Div";
                                    }
                                }
                            }

                            s = s + "</tr>";
                            s = s.replace(sReplaceThisDivHeading, sReplaceThisDivHeadingData);
                            sSymbolDisplay = sSymbolDisplay + s;
                        }

                        s = "";
                        sReplaceThisDivHeadingData = "&nbsp;";

                        sSymbol = gSymbols[idx].symbol;

                        sLastSymbol = sSymbol;
                        sAccountName = gSymbols[idx].accountName;
                        s = s + "<tr><td colspan=\"" + sColSpan + "\" style=\"color: " + symbolTextColor + "; height: 20px; width: 100 %; vertical - align: top; border - width: 0px; border - style: solid; border - spacing: 1px; border - color: White\"><b>" + (gSymbols[idx].assetType === "OPTION" ? " <span style='color: red;'>*&nbsp;</span>" : "") + sSymbol + "</b> - xxxxxxxxxxxx</td></tr>";
                        s = s + "<tr>";

                        s = s + "<td style=\"" + sFieldWidths.Account + " vertical-align:top;border-width:0px;\"><I>Account</I></td>";
                        s = s + "<td style=\"" + sFieldWidths.Buy + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>Buy</I></td>";
                        s = s + "<td style=\"" + sFieldWidths.Sell + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>Sell</I></td>";
                        s = s + "<td style=\"" + sFieldWidths.Shares + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>Shares</I></td>";
                        s = s + "<td style=\"" + sFieldWidths.Price + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>Price</I></td>";
                        s = s + "<td style=\"" + sFieldWidths.GL + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>G/L</I></td>";
                        if (bNeedDivColumnLong || bNeedDivColumnShort) {
                            s = s + "<td style=\"" + sFieldWidths.Div + " text-align:" + sHeadingTextAlign + ";vertical-align:top;border-width:0px;\"><I>" + sReplaceThisDivHeading + "</I></td>";
                        }

                        s = s + "</tr>";

                        s = s + "<tr style=\"border-width; 2px 0px 0px 0px;border-bottom-color:black;\">";

                        iTRId++;
                        sTRId = "TDSym" + iTRId.toString();
                        s = s + "<td id=\"" + sTRId + "\" style=\"" + sFieldWidths.Account + " vertical-align:top;border-width:0px;\"><a href=\"JavaScript: DoGetTradesBySymbol('" + sSymbol + "','" + gSymbols[idx].accountId + "','" + sAccountName + "','" + sTRId + "', " + idx.toString() + ",'" + sCurrentDiv + "') \">" + sAccountName + SetFeeIndicator(idx) + "</a></td > ";

                        //                        sTmp = FormatMoney(gSymbols[idx].buy);
                        sTmp = FormatDecimalNumber(gSymbols[idx].buy, 5, 2, "");
                        s = s + "<td style=\"" + sFieldWidths.Buy + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        dTotalBuy = gSymbols[idx].buy;

                        //                        sTmp = FormatMoney(gSymbols[idx].sell);
                        sTmp = FormatDecimalNumber(gSymbols[idx].sell, 5, 2, "");
                        s = s + "<td style=\"" + sFieldWidths.Sell + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        dTotalSell = gSymbols[idx].sell;

                        //                        sTmp = FormatInt(gSymbols[idx].shares);
                        sTmp = FormatDecimalNumber(gSymbols[idx].shares, 3, 1, "");
                        s = s + "<td style=\"" + sFieldWidths.Shares + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        dTotalShares = gSymbols[idx].shares;

                        //sTmp = FormatDecimalNumber(gSymbols[idx].fees, 5, 2, "");
                        //s = s + "<td style=\"width:19%; text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        dTotalFees = gSymbols[idx].fees;

                        let oSymbolPrice = new SymbolPrice();
                        sLastAssetType = gSymbols[idx].assetType;
                        oSymbolPrice = gSymbols[idx].SymbolPrice;
                        if (sLastAssetType == "OPTION") {
                            gSymbols[idx].description = oSymbolPrice.description;
                            dCurrentPrice = oSymbolPrice.price; //get the current price here
                            s = s.replace("xxxxxxxxxxxx", oSymbolPrice.description);
                            dCurrentPrice = oSymbolPrice.price; //get the current price here
                            //                            sTmp = FormatMoney(dCurrentPrice);
                            sTmp = FormatDecimalNumber(dCurrentPrice, 3, 2, "");
                            s = s + "<td style=\"" + sFieldWidths.Price + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                            //                            sTmp = FormatMoney((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * 100 * dCurrentPrice));
                            sTmp = FormatDecimalNumber((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * 100 * dCurrentPrice), 3, 2, "");
                        } else {
                            gSymbols[idx].description = oSymbolPrice.description;
                            dCurrentPrice = oSymbolPrice.price; //get the current price here
                            s = s.replace("xxxxxxxxxxxx", oSymbolPrice.description);
                            dCurrentPrice = oSymbolPrice.price; //get the current price here
                            //                            sTmp = FormatMoney(dCurrentPrice);
                            sTmp = FormatDecimalNumber(dCurrentPrice, 3, 2, "");
                            s = s + "<td style=\"" + sFieldWidths.Price + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                            //                            sTmp = FormatMoney((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * dCurrentPrice));
                            sTmp = FormatDecimalNumber((-1 * gSymbols[idx].buy) + gSymbols[idx].sell + (gSymbols[idx].shares * dCurrentPrice), 3, 2, "");
                        }

                        let sOnclick = "";

                        if (sTmp.indexOf("-") != -1) {
                            s = s + "<td " + sOnclick + " style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorLoss + ";" + sFieldWidths.GL + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        } else {
                            s = s + "<td " + sOnclick + " style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorGain + ";" + sFieldWidths.GL + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        }

                        if (bNeedDivColumnLong || bNeedDivColumnShort) {
                            sTmp = FormatDecimalNumber(gSymbols[idx].divAmount, 3, 2, "");
                            if (sTmp.indexOf("-") != -1) {
                                s = s + "<td style=\" color: " + sTotalsColorLoss + ";" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                                sReplaceThisDivHeadingData = "Div";
                            } else {
                                if (sTmp == "0.00") {
                                    s = s + "<td style=\" color: black;" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">&nbsp;</td>";
                                } else {
                                    s = s + "<td style=\" color: " + sTotalsColorGain + ";" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                                    sReplaceThisDivHeadingData = "Div";
                                }
                            }
                            dTotalDiv = gSymbols[idx].divAmount;
                        }

                        s = s + "</tr>";
                        bNeedTotal = true;

                    }
                }
                if (bNeedTotal) {
                    bNeedTotal = false;
                    let bOkToContinue = false;
                    if (dTotalShares < 0.0) {
                        if (!bDoingLong) {
                            bOkToContinue = true;
                            bNeedTotalLongShort = true;
                        }
                    } else {
                        if (bDoingLong) {
                            bOkToContinue = true;
                            bNeedTotalLongShort = true;
                        }
                    }
                    if (bOkToContinue) {
                        iTotalLongShortSymbols++;
                        dTotalLongShortFees = dTotalLongShortFees + dTotalFees;
                        dTotalLongShortDiv = dTotalLongShortDiv + dTotalDiv;
                        s = s + "<tr style=\"background-color:" + totalBackgroundColor + "; \">";

                        s = s + "<td style=\"" + sFieldWidths.Account + " vertical-align:top;border-width:0px;\"><I>Total</I></td > ";
                        //                    sTmp = FormatMoney(dTotalBuy);
                        sTmp = FormatDecimalNumber(dTotalBuy, 5, 2, "");
                        s = s + "<td style=\"" + sFieldWidths.Buy + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                        //                    sTmp = FormatMoney(dTotalSell);
                        sTmp = FormatDecimalNumber(dTotalSell, 5, 2, "");
                        s = s + "<td style=\"" + sFieldWidths.Sell + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                        //                    sTmp = FormatInt(dTotalShares);
                        sTmp = FormatDecimalNumber(dTotalShares, 3, 1, "");
                        s = s + "<td style=\"" + sFieldWidths.Shares + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                        //                    sTmp = FormatMoney(dCurrentPrice);
                        sTmp = FormatDecimalNumber(dCurrentPrice, 3, 2, "");
                        s = s + "<td style=\"" + sFieldWidths.Price + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

                        if (sLastAssetType == "OPTION") {
                            //                        sTmp = FormatMoney((-1 * dTotalBuy) + dTotalSell + (dTotalShares * 100 * dCurrentPrice));
                            sTmp = FormatDecimalNumber((-1 * dTotalBuy) + dTotalSell + (dTotalShares * 100 * dCurrentPrice), 3, 2, "");
                            dTotalLongShort = dTotalLongShort + ((-1 * dTotalBuy) + dTotalSell + (dTotalShares * 100 * dCurrentPrice));
                        } else {
                            //                        sTmp = FormatMoney((-1 * dTotalBuy) + dTotalSell + (dTotalShares * dCurrentPrice));
                            sTmp = FormatDecimalNumber((-1 * dTotalBuy) + dTotalSell + (dTotalShares * dCurrentPrice), 3, 2, "");
                            dTotalLongShort = dTotalLongShort + ((-1 * dTotalBuy) + dTotalSell + (dTotalShares * dCurrentPrice));
                        }
                        if (sTmp.indexOf("-") != -1) {
                            s = s + "<td style=\"background-color:" + totalBackgroundColor + "; color: " + sTotalsColorLoss + ";" + sFieldWidths.GL + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px; \">" + sTmp + "</td>";
                        } else {
                            s = s + "<td style=\"background-color:" + totalBackgroundColor + "; color: " + sTotalsColorGain + ";" + sFieldWidths.GL + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                        }

                        if (bNeedDivColumnLong || bNeedDivColumnShort) {
                            sTmp = FormatDecimalNumber(dTotalDiv, 3, 2, "");
                            if (sTmp.indexOf("-") != -1) {
                                s = s + "<td style=\" color: " + sTotalsColorLoss + ";" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                                sReplaceThisDivHeadingData = "Div";
                            } else {
                                if (sTmp == "0.00") {
                                    s = s + "<td style=\" color: black;" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">&nbsp;</td>";
                                } else {
                                    s = s + "<td style=\" color: " + sTotalsColorGain + ";" + sFieldWidths.Div + " text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
                                    sReplaceThisDivHeadingData = "Div";
                                }
                            }

                        }

                        s = s + "</tr>";
                        s = s.replace(sReplaceThisDivHeading, sReplaceThisDivHeadingData);
                        sSymbolDisplay = sSymbolDisplay + s;

                    }
                }
                if (bNeedTotalLongShort) {
                    s = "</table></div><div><table style=\"border-collapse:collapse; border:0px solid black;width:100%;border-width:0px;\"><tr style=\"background-color:darkgray; \">";

                    if (bDoingLong) {

                        if (dTotalLongShortDiv != 0.0) {
                            sTmp = FormatDecimalNumber(dTotalLongShortDiv, 5, 2, "");
                            if (sTmp.indexOf("-") != -1) {
                                s = s + "<td colspan=\"" + sColSpan + "\" style=\"text-align:left; vertical-align:top;border-width:0px;\"><I>" + iTotalLongShortSymbols.toString() + "&nbsp;Symbols&nbsp;Long</I>&nbsp;---&nbsp;Fees:&nbsp;<span style=\"color: " + sTotalsColorLoss + ";text-align:right;vertical-align:top;border-width:0px;\">" + FormatDecimalNumber(dTotalLongShortFees, 5, 2, "") + "<span><span style=\"color: black;text-align:right;vertical-align:top;border-width:0px;\">&nbsp;---&nbsp;Dividend:&nbsp;<span><span style=\"color: " + sTotalsColorLoss + ";text-align:right;vertical-align:top;border-width:0px;\">" + FormatDecimalNumber(dTotalLongShortDiv, 5, 2, "") + "</span></td > ";
                            } else {
                                s = s + "<td colspan=\"" + sColSpan + "\" style=\"text-align:left; vertical-align:top;border-width:0px;\"><I>" + iTotalLongShortSymbols.toString() + "&nbsp;Symbols&nbsp;Long</I>&nbsp;---&nbsp;Fees:&nbsp;<span style=\"color: " + sTotalsColorLoss + ";text-align:right;vertical-align:top;border-width:0px;\">" + FormatDecimalNumber(dTotalLongShortFees, 5, 2, "") + "<span><span style=\"color: black;text-align:right;vertical-align:top;border-width:0px;\">&nbsp;---&nbsp;Dividend:&nbsp;<span><span style=\"color: " + sTotalsColorGain + ";text-align:right;vertical-align:top;border-width:0px;\">" + FormatDecimalNumber(dTotalLongShortDiv, 5, 2, "") + "</span></td > ";
                            }
                        } else {
                            s = s + "<td colspan=\"" + sColSpan + "\" style=\"text-align:left; vertical-align:top;border-width:0px;\"><I>" + iTotalLongShortSymbols.toString() + "&nbsp;Symbols&nbsp;Long</I>&nbsp;---&nbsp;Fees:&nbsp;<span style=\"color: " + sTotalsColorLoss + ";text-align:right;vertical-align:top;border-width:0px;\">" + FormatDecimalNumber(dTotalLongShortFees, 5, 2, "") + "<span></td > ";
                            //s = s + "<td colspan=\"" + sColSpan + "\" style=\"text-align:left; vertical-align:top;border-width:0px;\"><I>" + iTotalLongShortSymbols.toString() + " Symbols Short --- Fees $" + FormatDecimalNumber(dTotalLongShortFees, 5, 2, "") + "</I ></td > ";
                        }
                        if (iTotalLongShortSymbols > 3) {
                            sSymbolDisplay = sSymbolDisplay.replace(gsReplaceImgSymbolsLong, gsImgSymbolsLong);
                            sSymbolDisplay = sSymbolDisplay.replace(gsReplaceTableHeightOverflowSymbolsLong, "height:400px;overflow-Y:auto;");
                        } else {
                            sSymbolDisplay = sSymbolDisplay.replace(gsReplaceImgSymbolsLong, "");
                        }
                    } else {
                        if (dTotalLongShortDiv != 0.0) {
                            sTmp = FormatDecimalNumber(dTotalLongShortDiv, 5, 2, "");
                            if (sTmp.indexOf("-") != -1) {
                                s = s + "<td colspan=\"" + sColSpan + "\" style=\"text-align:left; vertical-align:top;border-width:0px;\"><I>" + iTotalLongShortSymbols.toString() + "&nbsp;Symbols&nbsp;Short</I>&nbsp;---&nbsp;Fees:&nbsp;<span style=\"color: " + sTotalsColorLoss + ";text-align:right;vertical-align:top;border-width:0px;\">" + FormatDecimalNumber(dTotalLongShortFees, 5, 2, "") + "<span><span style=\"color: black;text-align:right;vertical-align:top;border-width:0px;\">&nbsp;---&nbsp;Dividend:&nbsp;<span><span style=\"color: " + sTotalsColorLoss + ";text-align:right;vertical-align:top;border-width:0px;\">" + FormatDecimalNumber(dTotalLongShortDiv, 5, 2, "") + "</span></td > ";
                            } else {
                                s = s + "<td colspan=\"" + sColSpan + "\" style=\"text-align:left; vertical-align:top;border-width:0px;\"><I>" + iTotalLongShortSymbols.toString() + "&nbsp;Symbols&nbsp;Short</I>&nbsp;---&nbsp;Fees:&nbsp;<span style=\"color: " + sTotalsColorLoss + ";text-align:right;vertical-align:top;border-width:0px;\">" + FormatDecimalNumber(dTotalLongShortFees, 5, 2, "") + "<span><span style=\"color: black;text-align:right;vertical-align:top;border-width:0px;\">&nbsp;---&nbsp;Dividend:&nbsp;<span><span style=\"color: " + sTotalsColorGain + ";text-align:right;vertical-align:top;border-width:0px;\">" + FormatDecimalNumber(dTotalLongShortDiv, 5, 2, "") + "</span></td > ";
                            }
                        } else {
                            s = s + "<td colspan=\"" + sColSpan + "\" style=\"text-align:left; vertical-align:top;border-width:0px;\"><I>" + iTotalLongShortSymbols.toString() + "&nbsp;Symbols&nbsp;Short</I>&nbsp;---&nbsp;Fees:&nbsp;<span style=\"color: " + sTotalsColorLoss + ";text-align:right;vertical-align:top;border-width:0px;\">" + FormatDecimalNumber(dTotalLongShortFees, 5, 2, "") + "<span></td > ";
                            //s = s + "<td colspan=\"" + sColSpan + "\" style=\"text-align:left; vertical-align:top;border-width:0px;\"><I>" + iTotalLongShortSymbols.toString() + " Symbols Short --- Fees $" + FormatDecimalNumber(dTotalLongShortFees, 5, 2, "") + "</I ></td > ";
                        }
                        if (iTotalLongShortSymbols > 3) {
                            sSymbolDisplay = sSymbolDisplay.replace(gsReplaceImgSymbolsShort, gsImgSymbolsShort);
                            sSymbolDisplay = sSymbolDisplay.replace(gsReplaceTableHeightOverflowSymbolsShort, "height:400px;overflow-Y:auto;");
                        } else {
                            sSymbolDisplay = sSymbolDisplay.replace(gsReplaceImgSymbolsShort, "");
                        }
                    }
                    sTmp = FormatDecimalNumber(dTotalLongShort, 3, 2, "");
                    if (sTmp.indexOf("-") != -1) {
                        s = s + "<td style=\"color: black;text-align:right;vertical-align:top;border-width:0px;\">G/L:&nbsp;<span style=\"color: " + sTotalsColorLoss + ";text-align:right;vertical-align:top;border-width:0px;\"><b>" + sTmp + "</b></span></td>";
                    } else {
                        s = s + "<td style=\"color: black;text-align:right;vertical-align:top;border-width:0px;\">G/L:&nbsp;<span style=\"color: " + sTotalsColorGain + ";text-align:right;vertical-align:top;border-width:0px;\"><b>" + sTmp + "</b></span></td>";
                    }

                    s = s + "</tr>";
                    sSymbolDisplay = sSymbolDisplay + s;
                } else {
                    if (bDoingLong) {
                        sSymbolDisplay = sSymbolDisplay.replace(gsReplaceImgSymbolsLong, "");
                    } else {
                        sSymbolDisplay = sSymbolDisplay.replace(gsReplaceImgSymbolsShort, "");
                    }
                }

            }
            sSymbolDisplay = sSymbolDisplay + "</table></div>";
            document.getElementById("name").innerHTML = sSymbolDisplay;

        } else {
            let iPwdFormHeight = document.getElementById("pwdForm").clientHeight + 10;
            document.getElementById("tblSymbols").style.top = iPwdFormHeight.toString() + "px";
            document.getElementById("tblSymbols").style.width = "500px";
            document.getElementById("nameTitle").style.width = "480px";
            document.getElementById("tblSymbols").style.visibility = "visible";
            document.getElementById("tblDetail").style.visibility = "hidden";
            let s = "<table style=\"width:100%;border-width:0px;\">";
            s = s + "<tr><td colspan=\"6\" style=\"height:20px;width:100%;vertical-align:top;border-width:0px; border-style:solid;border-spacing:1px;border-color:White\">Account information not found for the specified symbols.</td></tr>";
            s = s + "</table>";
            document.getElementById("name").innerHTML = s;
        }

    }

    //ShowProgress(false, true);
    //SetDefault();
    //document.pwdForm.btnGetTrades.value = "Get Trades";
    //gbDoingGetTrades = false;
    GetTradesCanceled();
}

function GetTradesAddSymbol(iAccountsIdx, sSymbolsToLookup, sRADSymbol, oTradeIn) {
    let oTrade = new Trade();
    let bNeedToAddSymbol = false;
    oTrade.accountId = oTradeIn.accountId
    oTrade.accountName = oTradeIn.accountName;
    oTrade.amount = oTradeIn.amount;
    oTrade.assetType = oTradeIn.assetType;
    oTrade.cost = oTradeIn.cost;
    oTrade.date = oTradeIn.date;
    oTrade.netAmount = oTradeIn.netAmount;
    oTrade.fees = oTradeIn.fees;
    oTrade.price = oTradeIn.price;
    oTrade.symbol = oTradeIn.symbol;
    oTrade.transactionSubType = oTradeIn.transactionSubType;

    oTrade.rFee = oTradeIn.rFee;
    oTrade.type = oTradeIn.type;
    oTrade.transactionId = oTradeIn.transactionId;

    if ((sSymbolsToLookup.indexOf("," + sRADSymbol.toUpperCase() + ",") != -1) ||
        (sSymbolsToLookup == "ALLSYMBOLS")) {
        bNeedToAddSymbol = true;
        if (gSymbols.length > 0) {
            for (let idxTmp = 0; idxTmp < gSymbols.length; idxTmp++) {
                if ((gSymbols[idxTmp].symbol == sRADSymbol) &&
                    (gSymbols[idxTmp].accountId == gAccounts[iAccountsIdx].accountId)) {
                    bNeedToAddSymbol = false;
                    if (oTrade.netAmount < 0.0) {
                        //buy
                        gSymbols[idxTmp].shares = gSymbols[idxTmp].shares + oTrade.amount;
                        gSymbols[idxTmp].buy = gSymbols[idxTmp].buy - oTrade.netAmount;
                    } else {
                        //sell
                        gSymbols[idxTmp].shares = gSymbols[idxTmp].shares - oTrade.amount;
                        gSymbols[idxTmp].sell = gSymbols[idxTmp].sell + oTrade.netAmount;
                    }
                    gSymbols[idxTmp].trades[gSymbols[idxTmp].trades.length] = oTrade;
                    gSymbols[idxTmp].fees = gSymbols[idxTmp].fees + oTrade.fees;
                    break;
                }
            }
        }
    }
    if (bNeedToAddSymbol) {
        let oSymbol = new Symbol();
        oSymbol.symbol = oTrade.symbol;
        oSymbol.accountId = gAccounts[iAccountsIdx].accountId;
        oSymbol.accountName = gAccounts[iAccountsIdx].accountName;
        oSymbol.assetType = oTrade.assetType;
        if (oTrade.netAmount < 0.0) {
            //buy
            oSymbol.shares = oTrade.amount;
            oSymbol.buy = -1 * oTrade.netAmount;
        } else {
            //sell
            oSymbol.shares = -1 * oTrade.amount;
            oSymbol.sell = oTrade.netAmount;
        }
        oSymbol.trades[oSymbol.trades.length] = oTrade;
        oSymbol.fees = oTrade.fees; //03/10/21 changed oSymbol = to oSymbol.fees = 
        gSymbols[gSymbols.length] = oSymbol;
    }

}

function GetTradesAddSymbolAuto(idxWL, sSymbolsToLookup, sRADSymbol, oTradeIn) {
    let oTrade = new Trade();
    let bNeedToAddSymbol = false;
    oTrade.accountId = oTradeIn.accountId
    oTrade.accountName = oTradeIn.accountName;
    oTrade.amount = oTradeIn.amount;
    oTrade.assetType = oTradeIn.assetType;
    oTrade.cost = oTradeIn.cost;
    oTrade.date = oTradeIn.date;
    oTrade.netAmount = oTradeIn.netAmount;
    oTrade.fees = oTradeIn.fees;
    oTrade.price = oTradeIn.price;
    oTrade.symbol = oTradeIn.symbol;
    oTrade.transactionSubType = oTradeIn.transactionSubType;

    //if ((sSymbolsToLookup.indexOf("," + sRADSymbol.toUpperCase() + ",") != -1) ||
    //    (sSymbolsToLookup == "ALLSYMBOLS")) {
    if (sSymbolsToLookup.indexOf("," + sRADSymbol.toUpperCase() + ",") != -1) {
        bNeedToAddSymbol = true;
        if (gSymbolsAuto.length > 0) {
            for (let idxTmp = 0; idxTmp < gSymbolsAuto.length; idxTmp++) {
                if (gSymbolsAuto[idxTmp].symbol == sRADSymbol) {
                    bNeedToAddSymbol = false;
                    if (oTrade.netAmount < 0.0) {
                        //buy
                        gSymbolsAuto[idxTmp].shares = gSymbolsAuto[idxTmp].shares + oTrade.amount;
                        gSymbolsAuto[idxTmp].buy = gSymbolsAuto[idxTmp].buy - oTrade.netAmount;
                    } else {
                        //sell
                        gSymbolsAuto[idxTmp].shares = gSymbolsAuto[idxTmp].shares - oTrade.amount;
                        gSymbolsAuto[idxTmp].sell = gSymbolsAuto[idxTmp].sell + oTrade.netAmount;
                    }
                    gSymbolsAuto[idxTmp].trades[gSymbolsAuto[idxTmp].trades.length] = oTrade;
                    gSymbolsAuto[idxTmp].fees = gSymbolsAuto[idxTmp].fees + oTrade.fees;
                    break;
                }
            }
        }
    }
    if (bNeedToAddSymbol) {
        let oSymbol = new Symbol();
        oSymbol.symbol = oTrade.symbol;
        oSymbol.accountId = gWatchlists[idxWL].accountId;
        oSymbol.accountName = "";
        oSymbol.assetType = oTrade.assetType;
        if (oTrade.netAmount < 0.0) {
            //buy
            oSymbol.shares = oTrade.amount;
            oSymbol.buy = -1 * oTrade.netAmount;
        } else {
            //sell
            oSymbol.shares = -1 * oTrade.amount;
            oSymbol.sell = oTrade.netAmount;
        }
        oSymbol.trades[oSymbol.trades.length] = oTrade;
        oSymbol.fees = oTrade.fees;  
        gSymbolsAuto[gSymbolsAuto.length] = oSymbol;
    }

}

function GetTradesAuto(bFirstTime, iStartDateIn, idxWL, bInitializing) {
    GetTradesAutoBase(bFirstTime, iStartDateIn, idxWL, bInitializing, "", 0, "", false, "", "", "", "", true);
}

function GetTradesAutoBase(bFirstTime, iStartDateIn, idxWL, bInitializing, sSymbolIn, iEndDateIn, sPurchasedDateIn, bAddStartDateToName, sThisIdToRemove, sCatalystDate, sDescription, sOldGL, bOnlyUpdateGL) {
    let iTryCount = 0;
    let vTmp = null;
    let sTmp = "";
    let bNeedToAddSymbol = false;
    let bOk = true;

    //debugger
    let sServerUrlBase = "https://api.tdameritrade.com/v1/accounts/xxxxx/transactions?symbol=aaaaaaa&startDate=yyyyy&endDate=zzzzz";
    let sServerUrlBaseAllSymbols = "https://api.tdameritrade.com/v1/accounts/xxxxx/transactions?startDate=yyyyy&endDate=zzzzz";
    let sStartDate = FormatDateForTD(new Date(iStartDateIn));
    let iLastUpdateDateTime = iStartDateIn;
    let sEndDate = "";
    let iEndDate = iEndDateIn;

    let sSymbolToLookup = "";
    let sSymbolsToLookupTmp = "";

    let oCM;
    let sSymbolsToLookup = "";
    let sSymbolsToLookupServer = "";

    let bEndDateISTodaysDate = false;
    let idxDatesStart = 0;
    let bDoneGettingSymbolData = false;

    if (bFirstTime) {
        gbDoingGetTrades = true;
        gGetTradesContextAuto = new GetTradesContext();
        let sSymbolsToLookupSep = "";
        if (sSymbolIn != "") {
            sSymbolsToLookupTmp = sSymbolIn;
        } else {
            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                sSymbolsToLookupTmp = sSymbolsToLookupTmp + sSymbolsToLookupSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                sSymbolsToLookupSep = ",";
                //    if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
                //        sSymbolsToLookupTmp = sSymbolsToLookupTmp + sSymbolsToLookupSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                //        sSymbolsToLookupSep = ",";
                //    }
            }
        }

        sSymbolsToLookupTmp = GetUniqueListOfSymbols(sSymbolsToLookupTmp); 
        sSymbolsToLookupServer = sSymbolsToLookupTmp.toUpperCase();
        vTmp = sSymbolsToLookupTmp.split(",");
        if (vTmp.length == 1) {
            sSymbolsToLookupServer = sSymbolsToLookupTmp.toUpperCase();
        } else {
            sSymbolsToLookupServer = "ALLSYMBOLS"; //set to this if nothing entered or more than one symbol entered
        }
        sSymbolsToLookup = "," + sSymbolsToLookupTmp.toUpperCase() + ",";

        if (iEndDate == 0) {
            iEndDate = new Date().getTime();
        }
        sEndDate = FormatDateForTD(new Date(iEndDate));

        bEndDateISTodaysDate = BuildStartEndDates(sStartDate, sEndDate);

        gTradesAuto.length = 0;
        gSymbolsAuto.length = 0;

        gbDoingCreateOrders = true;

        SetWait();
        giProgress = 0;
        ShowProgress(true, false);
        idxDatesStart = gsStartDates.length - 1;

        gGetTradesContextAuto.iProgressIncrement = 100 / gsStartDates.length;
        gGetTradesContextAuto.iLastUpdateDateTime = iLastUpdateDateTime;
        gGetTradesContextAuto.iEndDate = iEndDate;

        idxStart = 0;
    } else {
        sServerUrlBase = gGetTradesContextAuto.sServerUrlBase;
        sServerUrlBaseAllSymbols = gGetTradesContextAuto.sServerUrlBaseAllSymbols;
        sStartDate = gGetTradesContextAuto.sStartDate;
        sEndDate = gGetTradesContextAuto.sEndDate;

        sSymbolToLookup = gGetTradesContextAuto.sSymbolToLookup;
        sSymbolsToLookupTmp = gGetTradesContextAuto.sSymbolsToLookupTmp;

        sSymbolsToLookup = gGetTradesContextAuto.sSymbolsToLookup;
        sSymbolsToLookupServer = gGetTradesContextAuto.sSymbolsToLookupServer;

        bEndDateISTodaysDate = gGetTradesContextAuto.bEndDateISTodaysDate;
        idxDatesStart = gGetTradesContextAuto.idxDatesStart;
        iLastUpdateDateTime = gGetTradesContextAuto.iLastUpdateDateTime;

        bOk = gGetTradesContextAuto.bOk;
        bDoneGettingSymbolData = gGetTradesContextAuto.bDoneGettingSymbolData;
        bNeedToAddSymbol = gGetTradesContextAuto.bNeedToAddSymbol;
        idxStart = gGetTradesContextAuto.idxStart;

    }

    for (let idxDates = idxDatesStart; idxDates > -1; idxDates--) {
        //if (gbStopGetTrades) {
        //    GetTradesCanceled();
        //    return;
        //}
        sStartDate = gsStartDates[idxDates];
        sEndDate = gsEndDates[idxDates];
        if (giProgress < 100) {
            giProgress = giProgress + gGetTradesContextAuto.iProgressIncrement;
        }

        iTryCount = 0;
        while (iTryCount < 2) {
            let sServerUrl = "";
            if (sSymbolsToLookupServer == "ALLSYMBOLS") {
                sServerUrl = sServerUrlBaseAllSymbols.replace("xxxxx", gWatchlists[idxWL].accountId);
            } else {
                sServerUrl = sServerUrlBase.replace("aaaaaaa", sSymbolsToLookupServer);
                sServerUrl = sServerUrl.replace("xxxxx", gWatchlists[idxWL].accountId);
            }
            sServerUrl = sServerUrl.replace("yyyyy", sStartDate);
            sServerUrl = sServerUrl.replace("zzzzz", sEndDate);

            let xhttp = null;
            let iInnerTryCount = 0;
            xhttp = oHTTP();
            while ((xhttp == null) && (iInnerTryCount < 5)) {
                xhttp = oHTTP();
                iInnerTryCount = iInnerTryCount + 1;
            }
            iInnerTryCount = 0;
            if (CheckHTTPOpenGet(xhttp, sServerUrl, "Error during xhttp.open to " + sServerUrl, false, false, "", "")) {
                // set the request header
                xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

                // send the request
                try {
                    //                                    debugger
                    xhttp.send();
                    if (xhttp.responseText != null) {
                        if (xhttp.responseText != "") {
                            //alert("GetTrades xhttp.responseText length = " + xhttp.responseText.length);

                            let oCMLength = 0;
                            oCM = myJSON.parse(xhttp.responseText);
                            switch (checkTDAPIError(oCM)) {
                                case 0: //no error
                                    {
                                        try {
                                            oCMLength = oCM.length;
                                        } catch (e2) {
                                            oCMLength = 0;
                                        }
                                        break;
                                    }
                                case 1: //acces code expired
                                    {
                                        xhttp = null;
                                        if (GetAccessCodeUsingRefreshToken()) {
                                            oCMLength = -1;
                                        } else {
                                            alert("An error occurred attempting to refresh the access code. Please logoff or reload the app.");
                                            GetTradesCanceled();
                                            return;
                                        }
                                        break;
                                    }
                                case 2: //other error
                                    {
                                        oCMLength = 0;
                                        break;
                                    }
                                default:
                                    {
                                        oCMLength = 0;
                                        break;
                                    }
                            }

                            if (oCMLength > 0) {
                                let bUseTradeRS = false;
                                let oTradeRS = new Trade();
                                for (let idxTrade = 0; idxTrade < oCM.length; idxTrade++) {
                                    //if (gbStopGetTrades) {
                                    //    GetTradesCanceled();
                                    //    return;
                                    //}
                                    let iTxDate = new Date(oCM[idxTrade].transactionDate.split("+")[0] + "+00:00").getTime();
                                    if ((iTxDate > iLastUpdateDateTime) && (iTxDate <= iEndDate)) {
                                        if (oCM[idxTrade].type == "DIVIDEND_OR_INTEREST") {
                                            bUseTradeRS = false;
                                            if (!isUndefined(oCM[idxTrade].transactionItem.instrument)) {
                                                let oTrade = new Trade();
                                                oTrade.accountId = gWatchlists[idxWL].accountId;
                                                oTrade.accountName = "";
                                                oTrade.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                oTrade.date = oCM[idxTrade].transactionDate;
                                                oTrade.amount = 0;
                                                oTrade.price = 0;
                                                oTrade.cost = 0;
                                                oTrade.netAmount = oCM[idxTrade].netAmount;
                                                if (isUndefined(oCM[idxTrade].transactionSubType)) {
                                                    oTrade.transactionSubType = "";
                                                } else {
                                                    oTrade.transactionSubType = oCM[idxTrade].transactionSubType;
                                                }
                                                oTrade.fees = 0;

                                                //now update the Symbols
                                                if (!isUndefined(oCM[idxTrade].transactionItem)) {
                                                    if (!isUndefined(oCM[idxTrade].transactionItem.instrument)) {
                                                        if (!isUndefined(oCM[idxTrade].transactionItem.instrument.symbol)) {
                                                            bNeedToAddSymbol = false;
                                                            //if ((sSymbolsToLookup.indexOf("," + oCM[idxTrade].transactionItem.instrument.symbol.toUpperCase() + ",") != -1) ||
                                                            //    (sSymbolsToLookup == "ALLSYMBOLS")) {
                                                            if (sSymbolsToLookup.indexOf("," + oCM[idxTrade].transactionItem.instrument.symbol.toUpperCase() + ",") != -1) {
                                                                bNeedToAddSymbol = true;
                                                                if (gSymbolsAuto.length > 0) {
                                                                    for (let idxTmp = 0; idxTmp < gSymbolsAuto.length; idxTmp++) {
                                                                        if (gSymbolsAuto[idxTmp].symbol == oCM[idxTrade].transactionItem.instrument.symbol) {
                                                                            bNeedToAddSymbol = false;
                                                                            gSymbolsAuto[idxTmp].sell = gSymbolsAuto[idxTmp].sell + oCM[idxTrade].netAmount;
                                                                            gSymbolsAuto[idxTmp].trades[gSymbolsAuto[idxTmp].trades.length] = oTrade;
                                                                            gSymbolsAuto[idxTmp].fees = gSymbolsAuto[idxTmp].fees + oTrade.fees;
                                                                            break;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            if (bNeedToAddSymbol) {
                                                                let oSymbol = new Symbol();
                                                                oSymbol.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                                oSymbol.accountId = gWatchlists[idxWL].accountId;
                                                                oSymbol.accountName = "";
                                                                oSymbol.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                                oSymbol.sell = oCM[idxTrade].netAmount;
                                                                oSymbol.trades[oSymbol.trades.length] = oTrade;
                                                                oSymbol.fees = oTrade.fees;
                                                                gSymbolsAuto[gSymbolsAuto.length] = oSymbol;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        } else if (oCM[idxTrade].type == "RECEIVE_AND_DELIVER") {
                                            if (!isUndefined(oCM[idxTrade].transactionItem)) {
                                                if (!isUndefined(oCM[idxTrade].transactionItem.instrument)) {
                                                    if (!isUndefined(oCM[idxTrade].transactionSubType)) {
                                                        let bFoundSubType = false;
                                                        let oTrade = new Trade();
                                                        let sRADSymbol = "";
                                                        oTrade.transactionSubType = oCM[idxTrade].transactionSubType;
                                                        if (oCM[idxTrade].transactionSubType == "TI") {
                                                            bUseTradeRS = false;
                                                            //TRANSFER OF SECURITY OR OPTION IN
                                                            oTrade.accountId = gWatchlists[idxWL].accountId;
                                                            oTrade.accountName = "";
                                                            oTrade.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                            sRADSymbol = oTrade.symbol;
                                                            oTrade.date = oCM[idxTrade].transactionDate;
                                                            oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                                            oTrade.fees = 0;
                                                            //need to get price on the transaction date
                                                            let vTmp = oTrade.date.split("T"); //"2020-04-13T12:48:34+0000"
                                                            if (gaFixedPrices.length > 0) {
                                                                for (let idxFP = 0; idxFP < gaFixedPrices.length; idxFP++) {
                                                                    let oFP = new FixedPrice();
                                                                    oFP = gaFixedPrices[idxFP];
                                                                    if ((oFP.symbol == sRADSymbol.toUpperCase()) &&
                                                                        (oFP.date == vTmp[0])) {
                                                                        oTrade.price = oFP.price;
                                                                        oTrade.cost = -1 * (oTrade.price * oTrade.amount); //negative because a buy trade
                                                                        oTrade.netAmount = oTrade.cost;
                                                                        oTrade.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                                        bFoundSubType = true;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        } else if (oCM[idxTrade].transactionSubType == "RS") {
                                                            //MANDATORY REVERSE SPLIT
                                                            oTrade.accountId = gWatchlists[idxWL].accountId;
                                                            oTrade.accountName = "";
                                                            oTrade.date = oCM[idxTrade].transactionDate;
                                                            oTrade.price = 0.0;
                                                            oTrade.cost = 0.0;
                                                            oTrade.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                            oTrade.fees = 0;
                                                            if (isUndefined(oCM[idxTrade].transactionItem.instrument.symbol)) {
                                                                //decreasing number of shares - cost 0
                                                                oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                                                oTrade.netAmount = 0.0;
                                                                //need to lookup cusip to get symbol
                                                                let iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/instruments?symbol=" + oCM[idxTrade].transactionItem.instrument.cusip + "&projection=symbol-search", 0);
                                                                if (iReturn == 0) {
                                                                    if (!isUndefined(oCMTemp[oCM[idxTrade].transactionItem.instrument.cusip])) {
                                                                        oTrade.symbol = oCMTemp[oCM[idxTrade].transactionItem.instrument.cusip].symbol;
                                                                        sRADSymbol = oTrade.symbol;
                                                                        bFoundSubType = true;
                                                                        bUseTradeRS = false;
                                                                    } else {
                                                                        oTradeRS = new Trade();
                                                                        oTradeRS.accountId = oTrade.accountId
                                                                        oTradeRS.accountName = oTrade.accountName;
                                                                        oTradeRS.amount = oTrade.amount;
                                                                        oTradeRS.assetType = oTrade.assetType;
                                                                        oTradeRS.cost = oTrade.cost;
                                                                        oTradeRS.date = oTrade.date;
                                                                        oTradeRS.netAmount = oTrade.netAmount;
                                                                        oTradeRS.fees = oTrade.fees;
                                                                        oTradeRS.price = oTrade.price;
                                                                        oTradeRS.transactionSubType = oCM[idxTrade].transactionSubType;
                                                                        bUseTradeRS = true;
                                                                    }
                                                                }
                                                            } else {
                                                                //increasing number of shares - cost 0
                                                                oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                                                oTrade.netAmount = -0.00001;
                                                                oTrade.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                                sRADSymbol = oTrade.symbol;
                                                                bFoundSubType = true;
                                                            }
                                                        } else if (oCM[idxTrade].transactionSubType == "SP") {
                                                            //STOCK SPLIT
                                                            bUseTradeRS = false;
                                                            oTrade.accountId = gWatchlists[idxWL].accountId;
                                                            oTrade.accountName = "";
                                                            oTrade.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                            sRADSymbol = oTrade.symbol;
                                                            oTrade.date = oCM[idxTrade].transactionDate;
                                                            oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                                            oTrade.fees = GetTradeFees(oCM, idxTrade); //get the fees associated with the trade

                                                            oTrade.price = 0.00001;
                                                            oTrade.cost = -0.00001; //negative because a buy trade
                                                            oTrade.netAmount = oTrade.cost;
                                                            oTrade.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                            bFoundSubType = true;


                                                            //    //need to get price on the transaction date
                                                            //    let vTmp = oTrade.date.split("T"); //"2020-04-13T12:48:34+0000"
                                                            //    if (gaFixedPrices.length > 0) {
                                                            //        for (let idxFP = 0; idxFP < gaFixedPrices.length; idxFP++) {
                                                            //            let oFP = new FixedPrice();
                                                            //            oFP = gaFixedPrices[idxFP];
                                                            //            if ((oFP.symbol == sRADSymbol.toUpperCase()) &&
                                                            //                (oFP.date == vTmp[0])) {
                                                            //                oTrade.price = oFP.price;
                                                            //                oTrade.cost = -1 * (oTrade.price * oTrade.amount); //negative because a buy trade
                                                            //                oTrade.netAmount = oTrade.cost;
                                                            //                oTrade.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                            //                bFoundSubType = true;
                                                            //                break;
                                                            //            }
                                                            //        }
                                                            //    }
                                                        } else {
                                                            bUseTradeRS = false;
                                                        }

                                                        if (bFoundSubType) {
                                                            if (bUseTradeRS) {
                                                                bUseTradeRS = false;
                                                                oTradeRS.symbol = sRADSymbol;
                                                                GetTradesAddSymbolAuto(idxWL, sSymbolsToLookup, sRADSymbol, oTradeRS);
                                                            }
                                                            GetTradesAddSymbolAuto(idxWL, sSymbolsToLookup, sRADSymbol, oTrade);
                                                        //} else {
                                                        //    let sThisSymbol = "";
                                                        //    if (!isUndefined(oCM[idxTrade].transactionItem.instrument.symbol)) {
                                                        //        sThisSymbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                        //    }

                                                        //    if (sThisSymbol != "") {
                                                        //        if (sSymbolsToLookup.indexOf("," + sThisSymbol.toUpperCase() + ",") != -1) {
                                                        //            let sConfirmMsg = "";
                                                        //            sConfirmMsg = "Warning!! Possible split transaction for (" + sThisSymbol + ") missing necessary subtype. Click Ok to continue this update, or click Cancel to cancel. ";
                                                        //            if (!AreYouSure(sConfirmMsg)) {
                                                        //                gbDoingCreateOrders = false;
                                                        //                GetTradesCanceled();
                                                        //                return;
                                                        //            }
                                                        //        }
                                                        //    }
                                                        }
                                                    //} else {
                                                    //    let sThisSymbol = "";
                                                    //    if (!isUndefined(oCM[idxTrade].transactionItem.instrument.symbol)) {
                                                    //        sThisSymbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                    //    }

                                                    //    if (sThisSymbol != "") {
                                                    //        if (sSymbolsToLookup.indexOf("," + sThisSymbol.toUpperCase() + ",") != -1) {
                                                    //            let sConfirmMsg = "";
                                                    //            sConfirmMsg = "Warning!! Possible split transaction for (" + sThisSymbol + ") missing necessary subtype. Click Ok to continue this update, or click Cancel to cancel. ";
                                                    //            if (!AreYouSure(sConfirmMsg)) {
                                                    //                gbDoingCreateOrders = false;
                                                    //                GetTradesCanceled();
                                                    //                return;
                                                    //            }
                                                    //        }
                                                    //    }
                                                    }
                                                }
                                            }

                                        } else if (oCM[idxTrade].type == "TRADE") {
                                            bUseTradeRS = false;
                                            let oTrade = new Trade();
                                            oTrade.accountId = gWatchlists[idxWL].accountId;
                                            oTrade.accountName = "";
                                            oTrade.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                            oTrade.date = oCM[idxTrade].transactionDate;
                                            oTrade.amount = oCM[idxTrade].transactionItem.amount;
                                            oTrade.price = oCM[idxTrade].transactionItem.price;
                                            oTrade.cost = oCM[idxTrade].transactionItem.cost;
                                            oTrade.netAmount = oCM[idxTrade].netAmount;
                                            oTrade.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                            if (isUndefined(oCM[idxTrade].transactionSubType)) {
                                                oTrade.transactionSubType = "";
                                            } else {
                                                oTrade.transactionSubType = oCM[idxTrade].transactionSubType;
                                            }
                                            oTrade.fees = 0;

                                            //now update the Symbols
                                            if (!isUndefined(oCM[idxTrade].transactionItem)) {
                                                if (!isUndefined(oCM[idxTrade].transactionItem.instrument)) {
                                                    if (!isUndefined(oCM[idxTrade].transactionItem.instrument.symbol)) {
                                                        bNeedToAddSymbol = false;
                                                        //if ((sSymbolsToLookup.indexOf("," + oCM[idxTrade].transactionItem.instrument.symbol.toUpperCase() + ",") != -1) ||
                                                        //    (sSymbolsToLookup == "ALLSYMBOLS")) {
                                                        if (sSymbolsToLookup.indexOf("," + oCM[idxTrade].transactionItem.instrument.symbol.toUpperCase() + ",") != -1) {
                                                            bNeedToAddSymbol = true;
                                                            if (gSymbolsAuto.length > 0) {
                                                                for (let idxTmp = 0; idxTmp < gSymbolsAuto.length; idxTmp++) {
                                                                    if (gSymbolsAuto[idxTmp].symbol == oCM[idxTrade].transactionItem.instrument.symbol) {
                                                                        bNeedToAddSymbol = false;
                                                                        if (oCM[idxTrade].netAmount < 0.0) {
                                                                            //buy
                                                                            gSymbolsAuto[idxTmp].shares = gSymbolsAuto[idxTmp].shares + oCM[idxTrade].transactionItem.amount;
                                                                            gSymbolsAuto[idxTmp].buy = gSymbolsAuto[idxTmp].buy - oCM[idxTrade].netAmount;
                                                                        } else {
                                                                            //sell
                                                                            gSymbolsAuto[idxTmp].shares = gSymbolsAuto[idxTmp].shares - oCM[idxTrade].transactionItem.amount;
                                                                            gSymbolsAuto[idxTmp].sell = gSymbolsAuto[idxTmp].sell + oCM[idxTrade].netAmount;
                                                                        }
                                                                        gSymbolsAuto[idxTmp].trades[gSymbolsAuto[idxTmp].trades.length] = oTrade;
                                                                        gSymbolsAuto[idxTmp].fees = gSymbolsAuto[idxTmp].fees + oTrade.fees;
                                                                        break;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (bNeedToAddSymbol) {
                                                            let oSymbol = new Symbol();
                                                            oSymbol.symbol = oCM[idxTrade].transactionItem.instrument.symbol;
                                                            oSymbol.accountId = gWatchlists[idxWL].accountId;
                                                            oSymbol.accountName = "";
                                                            oSymbol.assetType = oCM[idxTrade].transactionItem.instrument.assetType;
                                                            if (oCM[idxTrade].netAmount < 0.0) {
                                                                //buy
                                                                oSymbol.shares = oCM[idxTrade].transactionItem.amount;
                                                                oSymbol.buy = -1 * oCM[idxTrade].netAmount;
                                                            } else {
                                                                //sell
                                                                oSymbol.shares = -1 * oCM[idxTrade].transactionItem.amount;
                                                                oSymbol.sell = oCM[idxTrade].netAmount;
                                                            }
                                                            oSymbol.trades[oSymbol.trades.length] = oTrade;
                                                            oSymbol.fees = oTrade.fees;
                                                            gSymbolsAuto[gSymbolsAuto.length] = oSymbol;
                                                        }

                                                    }
                                                }
                                            }
                                        } else {
                                            bUseTradeRS = false;
                                        }

                                    }

                                }
                            }
                            if (oCMLength != -1) {
                                iTryCount = 2;
                            }
                        }
                        else {
                            iTryCount++;
                            if (iTryCount < 2) {
                                xhttp = null;
                            }
                            else {
                                //alert ("GetTradesAutoBase Error - HTTP response is blank." + " (" + iTryCount.toString() + ")");
                            }
                        }
                    }
                    else {
                        iTryCount++;
                        if (iTryCount < 2) {
                            xhttp = null;
                        }
                        else {
                            //alert ("GetTradesAutoBase Error - HTTP response is null." + " (" + iTryCount.toString() + ")");
                        }
                    }
                }
                catch (e1) {
                    //debugger
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        alert("GetTradesAutoBase Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                        bOk = false;
                    }
                }
            }
            else {
                break;
            }
        }

        if (!bOk) {
            break;
        }
        gGetTradesContextAuto.sServerUrlBase = sServerUrlBase;
        gGetTradesContextAuto.sServerUrlBaseAllSymbols = sServerUrlBaseAllSymbols;
        gGetTradesContextAuto.sStartDate = sStartDate;
        gGetTradesContextAuto.sEndDate = sEndDate;

        gGetTradesContextAuto.sSymbolToLookup = sSymbolToLookup;
        gGetTradesContextAuto.sSymbolsToLookupTmp = sSymbolsToLookupTmp;

        gGetTradesContextAuto.sSymbolsToLookup = sSymbolsToLookup;
        gGetTradesContextAuto.sSymbolsToLookupServer = sSymbolsToLookupServer;

        gGetTradesContextAuto.bEndDateISTodaysDate = bEndDateISTodaysDate;
        gGetTradesContextAuto.idxDatesStart = idxDates - 1;

        gGetTradesContextAuto.bOk = bOk;
        gGetTradesContextAuto.bDoneGettingSymbolData = bDoneGettingSymbolData;
        gGetTradesContextAuto.bNeedToAddSymbol = bNeedToAddSymbol;
        gGetTradesContextAuto.idxStart = 0;

        window.setTimeout("GetTradesAutoBase(false, " + iLastUpdateDateTime.toString() + ", " + idxWL.toString() + ", " + bInitializing + ", '" + sSymbolIn + "', " + iEndDate + ", '" + sPurchasedDateIn + "'," + bAddStartDateToName + ", '" + sThisIdToRemove + "', '" + sCatalystDate + "', '" + sDescription + "', '" + sOldGL + "', " + bOnlyUpdateGL + ")", 100);
        return;

    }
    //if (gbStopGetTrades) {
    //    GetTradesCanceled();
    //    return;
    //}
    if (bOk) {
        if ((sSymbolIn != "") && (!bOnlyUpdateGL)) {
            if (gSymbolsAuto.length > 0) {
                //there should only be one symbol
                let dSelectNum = (-1 * gSymbolsAuto[0].buy) + gSymbolsAuto[0].sell; // + (gSymbolsAuto[idxSym].shares * 100 * dCurrentPrice);



                window.setTimeout("GenerateWLOpenSymbolOrders('" + gWatchlists[idxWL].accountId + "', " + idxWL + ", '" + sThisIdToRemove + "', '" + sSymbolIn + "', '" + sPurchasedDateIn + "', '" + FormatDecimalNumber(dSelectNum, 3, 2, "") +  "', " + iStartDateIn + ", " + iEndDate + ", '" + sDescription + "', '" + sOldGL + "', '" + sCatalystDate + "')", 10);
                gbDoingGetTrades = false;
                gbStopGetTrades = false;
            } else {
                window.setTimeout("GenerateWLOpenSymbolOrders('" + gWatchlists[idxWL].accountId + "', " + idxWL + ", '" + sThisIdToRemove + "', '" + sSymbolIn + "', '" + sPurchasedDateIn + "', '0', " + iStartDateIn + ", " + iEndDate + ", '" + sDescription + "', '" + sOldGL + "', '" + sCatalystDate + "')", 10);
                gbDoingGetTrades = false;
                gbStopGetTrades = false;
            }
        } else {
        //    if (gSymbolsAuto.length > 0) {
        //        gSymbolsAuto.sort(sortBySymbol);
        //    }
        //    window.setTimeout("GenerateWLAutoCloseSymbolOrders('" + gWatchlists[idxWL].accountId + "', " + iLastUpdateDateTime + ", " + idxWL + ", " + bInitializing + ", " + iEndDate + ")", 10);
            if (gSymbolsAuto.length > 0) {
                //GetCurrentPricesAuto();
                gSymbolsAuto.sort(sortBySymbol);
                window.setTimeout("GenerateWLAutoCloseSymbolOrders('" + gWatchlists[idxWL].accountId + "', " + iLastUpdateDateTime + ", " + idxWL + ", " + bInitializing + ", " + iEndDate + ", " + bAddStartDateToName + ")", 10);
            } else {
                if (sSymbolsToLookupTmp.split(",").length == 1) {
                    alert("No trades found since " + FormatDateWithTime(new Date(iLastUpdateDateTime), true, false) + " for the symbol in this watchlist.");
                } else {
                    alert("No trades found since " + FormatDateWithTime(new Date(iLastUpdateDateTime), true, false) + " for the symbols in this watchlist.");
                }
                //if (sSymbolsToLookupTmp.split(",").length == 1) {
                //    alert("No trades found for the selected symbol.");
                //} else {
                //    alert("No trades found for the selected symbols.");
                //}
                gbDoingCreateOrders = false;
                GetTradesCanceled();
            }
        }
    } else {
        if (sSymbolIn != "") {
            window.setTimeout("GenerateWLOpenSymbolOrders('" + gWatchlists[idxWL].accountId + "', " + idxWL + ", '" + sSymbolIn + "', '" + sPurchasedDateIn + "', '0', " + iStartDateIn + ", " + iEndDate + ")", 10);
            gbDoingGetTrades = false;
            gbStopGetTrades = false;
        } else {
            gbDoingCreateOrders = false;
            GetTradesCanceled();
        }
    }
//    GetTradesCanceled();
}

function GetTradesBySymbol(sSymbolToLookup, sAccountID, sAccountName, sTRId, idxSymbol, sCurrentDiv) {
    let sBodyTextAlign = "right";
    let sTotalsBackcolor = gsBodyBackgroundColor;
    let sTotalsColorGain = "green";
    let sTotalsColorLoss = gsNegativeColor;

    //        //debugger
    let oTrade = new Trade();

    let oSymbolPrice = new SymbolPrice();

    sStartDate = gsLastStartDate;
    sEndDate = gsLastEndDate;
    gTrades.length = 0;
    SetWait();

    let iPwdFormHeight = document.getElementById("pwdForm").clientHeight + 10;

    //let iDetailTop = iPwdFormHeight + document.getElementById(sCurrentDiv).offsetTop + document.getElementById(sTRId).offsetTop - document.getElementById(sCurrentDiv).scrollTop;
    let iDetailTop = document.getElementById("tblSymbols").offsetTop + document.getElementById(sCurrentDiv).offsetTop + document.getElementById(sTRId).offsetTop - document.getElementById(sCurrentDiv).scrollTop;
    let iDetailLeft = document.getElementById("tblSymbols").clientWidth + document.getElementById("tblSymbols").offsetLeft + 10;

    let spanName = gsSymbolDetailSpanPrefix + sAccountID + sSymbolToLookup;
    let sDetailDiv = "<div style=\"background-color: #99CCFF; width: 500px;\">" +
        "<table style=\"width:100%; border-width:1px; border-style:solid;border-spacing:1px;border-color:White\">" +
        "<tr>" +
        "<th style=\"width:480px; font-family:Arial, Helvetica, sans-serif; font-size:12pt; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid;border-spacing:1px;border-color:White\">Detail</th>" +
        "<th style=\"width:18px; text-align:right; font-family:Arial, Helvetica, sans-serif; font-size:12pt; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid;border-spacing:1px;border-color:White;\" onclick=\"RemoveDiv('" + spanName + "')\">X&nbsp;&nbsp;</th>" +
        "</tr>" +
        "<tr>" +
        "<td colspan=\"2\" style=\"font-family:Arial, Helvetica, sans-serif; font-size:12pt;width:100%; vertical-align:top;border-width:1px; border-style:solid;border-spacing:1px;border-color:White\">" +
        "<DIV STYLE=\"width:100%; overflow:hidden\">xxxxmiscname</DIV> " +
        "<DIV STYLE=\"border-width:0px; width:100%; overflow:hidden\">xxxxmischead</DIV>" +
        "<DIV STYLE=\"width:100%; overflow: auto\">xxxxmiscmisc</DIV>" +
        "</td>" +
        "</tr>" +
        "</table>" +
        "</div>";

    //now show in table
    let s = "";
    let sTmp = "";
    let iTotalShares = 0;
    let dTotalFees = 0.0;
    let dTotalNet = 0.0;

    //debugger
    let oTrades = new Array();
    oTrades = gSymbols[idxSymbol].trades;
    for (let idx = 0; idx < oTrades.length; idx++) {
        oTrade = oTrades[idx];

        if (idx == 0) {
            if (oTrades.length > 10) {
                s = "<div style=\"height:300px;overflow-y:scroll;width:100%;border-width:0px;\"><table style=\"width:100%;border-width:0px;\">";
            } else {
                s = "<div style=\"width:100%;border-width:0px;\"><table style=\"width:100%;border-width:0px;\">";
            }
        }
        s = s + "<tr>";

        let d = new Date(oTrade.date.split("+")[0] + "+00:00");
        d = new Date(d.getTime() - 300 * 60 * 1000);
        let sDate = FormatTDTradeDate(d, true, true) + "&nbsp;(" + oTrade.transactionSubType + ")";

        s = s + "<td style=\"width:42%; font-size:10pt; vertical-align:center;border-width:0px;\">" + sDate + "</td > ";
        sTmp = FormatInt(oTrade.amount);
        if (oTrade.netAmount < 0.0) {
            iTotalShares = iTotalShares + oTrade.amount;
            s = s + "<td style=\"width:10%; text-align:center;vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
        } else {
            iTotalShares = iTotalShares - oTrade.amount;
            if (sTmp == "0") {
                s = s + "<td style=\"width:10%; text-align:center;vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
            } else {
                s = s + "<td style=\"width:10%; text-align:center;vertical-align:top;border-width:0px;\">-" + sTmp + "</td>";
            }
        }

        sTmp = FormatMoney(oTrade.price);
        //                                    sTmp = FormatDecimalNumber(oTrade.price, 5, 2, "");
        s = s + "<td style=\"width:18%; text-align:center;vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

        dTotalFees = dTotalFees + oTrade.fees;
        if (oTrade.fees == 0) {
            sTmp = "&nbsp;";
            s = s + "<td style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorLoss + ";width:12%; text-align:center; vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
        } else {
            sTmp = FormatMoney(oTrade.fees);
            s = s + "<td style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorLoss + ";width:12%; text-align:center; vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
            //    sTmp = FormatMoney(oTrade.cost);
            //    //                                    sTmp = FormatDecimalNumber(oTrade.cost, 5, 2, "");
            //    if (sTmp.indexOf("-") != -1) {
            //        s = s + "<td style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorLoss + ";width:18%; text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
            //    } else {
            //        s = s + "<td style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorGain + ";width:18%; text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
            //    }
        }
        dTotalNet = dTotalNet + oTrade.netAmount;
        sTmp = FormatMoney(oTrade.netAmount);
        //                                    sTmp = FormatDecimalNumber(oTrade.netAmount, 5, 2, "");
        if (sTmp.indexOf("-") != -1) {
            s = s + "<td style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorLoss + ";width:18%; text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
        } else {
            s = s + "<td style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorGain + ";width:18%; text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
        }
        s = s + "</tr>";

    }
    //add a total row
    s = s + "<tr>";
    s = s + "<td style=\"width:36%; vertical-align:center;border-width:0px;\"><b>Total</b></td > ";
    sTmp = FormatInt(iTotalShares);
    s = s + "<td style=\"width:10%; text-align:center;vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

    if (oTrade.assetType == "OPTION") {
        oSymbolPrice = GetCurrentPriceOption(sSymbolToLookup);
    } else {
        oSymbolPrice = GetCurrentPrice(sSymbolToLookup);
    }

    sTmp = FormatMoney(oSymbolPrice.price);
    s = s + "<td style=\"width:18%; text-align:center;vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

    sTmp = FormatMoney(dTotalFees);
    s = s + "<td style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorLoss + ";width:18%; text-align:center; vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
    //    s = s + "<td style=\"width:10%; text-align:center;vertical-align:top;border-width:0px;\">" + sTmp + "</td>";

    if (iTotalShares != 0) {
        if (oTrade.assetType == "OPTION") {
            dTotalNet = dTotalNet + (iTotalShares * 100 * oSymbolPrice.price);
        } else {
            dTotalNet = dTotalNet + (iTotalShares * oSymbolPrice.price);
        }
    }
    sTmp = FormatMoney(dTotalNet);
    //                                    sTmp = FormatDecimalNumber(oTrade.netAmount, 5, 2, "");
    if (sTmp.indexOf("-") != -1) {
        s = s + "<td style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorLoss + ";width:18%; text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
    } else {
        s = s + "<td style=\"background-color:" + sTotalsBackcolor + "; color: " + sTotalsColorGain + ";width:18%; text-align:" + sBodyTextAlign + ";vertical-align:top;border-width:0px;\">" + sTmp + "</td>";
    }

    s = s + "</tr>";

    s = s + "</table></div>";
    sDetailDiv = sDetailDiv.replace("xxxxmiscmisc", s);
//    document.getElementById("misc").innerHTML = s;

    s = "<table style=\"border-width:0px; border-style:solid;border-spacing:0px;border-color:White;width:100%\"><tr><th style=\"height:18px;border-width:1px;border-style:solid;border-spacing:1px;border-color:White;\">";

    s = s + sSymbolToLookup + " - " + sAccountName;

    s = s + "</th></tr></table>";

    sDetailDiv = sDetailDiv.replace("xxxxmiscname", s);
//    document.getElementById("miscname").innerHTML = s;

    s = "<table style=\"border-width:0px;width:100%\">";
    s = s + "<tr>";
    s = s + "<th style=\"width:36%; vertical-align:top;border-width:0px;\"><I>Date</I></th>";
    s = s + "<th style=\"width:10%; text-align:center;vertical-align:top;border-width:0px;\"><I>Shares</I></th>";
    s = s + "<th style=\"width:18%; text-align:center;vertical-align:top;border-width:0px;\"><I>Price</I></th>";
    s = s + "<th style=\"width:18%; text-align:center;vertical-align:top;border-width:0px;\"><I>Fees</I></th>";
    s = s + "<th style=\"width:18%; text-align:center;vertical-align:top;border-width:0px;\"><I>Net</I></th>";
    s = s + "</tr></table>";
    sDetailDiv = sDetailDiv.replace("xxxxmischead", s);
//    document.getElementById("mischead").innerHTML = s;

    AddDiv(spanName, sDetailDiv, iDetailTop, iDetailLeft);

    SetDefault();
}

function GetTradesCanceled() {
    ShowProgress(false, true);
    document.pwdForm.btnGetTrades.value = "Get Trades";
    gbDoingGetTrades = false;
    gbStopGetTrades = false;
    SetDefault();
}

function GetUniqueListOfSymbols(sInSymbols) {
    let sOrigSymbols = TrimLikeVB(sInSymbols.toUpperCase());
    if (sOrigSymbols != "") {
        let aSymbols = sOrigSymbols.split(",");
        let sSymbols = ",";
        let sSep = ",";
        for (let idx = 0; idx < aSymbols.length; idx++) {
            let sTmp = TrimLikeVB(aSymbols[idx]);
            if (sTmp != "") {
                if (sSymbols.indexOf(sSep + sTmp + sSep) == -1) {
                    sSymbols = sSymbols + sTmp + sSep;
                }
            }
        }
        if (sSymbols.length > 1) {
            return sSymbols.substr(1, sSymbols.length - 2); //remove preceding and trailing commas
        } else {
            return "";
        }

    } else {
        return "";
    }

}

function GetWatchlistO() {
    let dt = new Date();
    let sDate = FormatDateWithTime(dt, true, false);
    let sStatusSpacesP = "";
    let sStatusSpacesT = "";
    let sActionSpacesP = "";
    let sActionSpacesT = "";
    let sQuantitySpacesP = "";
    let sQuantitySpacesT = "";
    let sSymbolSpacesP = "";
    let sSymbolSpacesT = "";
    let sOrderTypeSpacesP = "";
    let sOrderTypeSpacesT = "";
    let sPriceSpacesP = "";
    let sPriceSpacesT = "";
    let sActivationPriceSpacesP = "";
    let sActivationPriceSpacesT = "";
    let sTimeEnteredSpacesP = "";
    let sTimeEnteredSpacesT = "";
    let sTimeInForceSpacesP = "&nbsp;&nbsp;&nbsp;";
    let sTimeInForceSpacesT = "";
    let sReportedSpacesP = "";
    let sReportedSpacesT = "";

    if (gWatchlists.length > 0) {
        for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
            if (gWatchlists[idxWL].bSelectedO) {
                //let sThisDiv = "";
                //let sThisTable = "";
                let sLastWLName = "";
                let sLastWLAccountName = "";
                let sLastWLAccountId = "";
                let sThisId = "";
                let sTableRowVerticalAlignment = "middle";
                let sTmp = "";
                let bEverythingIsChecked = true;
                let iNumChecked = 0;
                let sThisTable = "";
                let sThisDiv = "";
                let sThisTableTitle = "";
                let sThisTableTitleInside = "";
                let iLineCnt = 0;

                //get list of currently selected orders
                let oCurrentOIDs = [];
                if (gWatchlists[idxWL].WLItems.length > 0) {
                    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                        let oWLOItem = new WLItemOrder();
                        oWLOItem = gWatchlists[idxWL].WLItems[idxWLItem];
                        if (oWLOItem.bSelectedForOrder) {
                            oCurrentOIDs[oWLOItem.orderId] = oWLOItem.bSelectedForOrder;
                        }
                    }
                }

                sLastWLName = gWatchlists[idxWL].name;
                sLastWLAccountName = gWatchlists[idxWL].accountName;
                sLastWLAccountId = gWatchlists[idxWL].accountId;
                sThisId = gWatchlists[idxWL].watchlistId + sLastWLAccountId;

                //?fromEnteredTime=2021-06-28&toEnteredTime=2021-06-29
                let sFromTo = "";
                if (gWatchlists[idxWL].spanName != "") {
                    if (document.getElementById(gWatchlists[idxWL].spanName).innerHTML != "") {
                        if ((document.getElementById("txtOStart" + sThisId) != null) && (!isUndefined(document.getElementById("txtOStart" + sThisId)))) {
                            if (document.getElementById("chkUseDates" + sThisId).checked) {
                                let sStart = TrimLikeVB(document.getElementById("txtOStart" + sThisId).value);
                                if (sStart != "") {
                                    if (ValidateTDDate(sStart, false)) {
                                        let sEnd = TrimLikeVB(document.getElementById("txtOEnd" + sThisId).value);
                                        if (ValidateTDDate(sEnd, false)) {
                                            sFromTo = "?fromEnteredTime=" + sStart + "&toEnteredTime=" + sEnd;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                let iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/accounts/" + gWatchlists[idxWL].accountId + "/orders" + sFromTo, 7);
                if (iReturn == 0) {
                    gWatchlists[idxWL].WLItems.length = 0;
                    if (!isUndefined(oCMOrders.length)) {
                        for (let idxO = oCMOrders.length - 1; idxO > -1; idxO--) {
                            if (!isUndefined(oCMOrders[idxO].orderId)) {
                                let oWLOItem = new WLItemOrder();
                                if (!isUndefined(oCMOrders[idxO].activationPrice)) {
                                    oWLOItem.activationPrice = oCMOrders[idxO].activationPrice;
                                }
                                if (!isUndefined(oCMOrders[idxO].cancelTime)) {
                                    oWLOItem.cancelTime = oCMOrders[idxO].cancelTime;
                                }
                                if (!isUndefined(oCMOrders[idxO].closeTime)) {
                                    oWLOItem.closeTime = oCMOrders[idxO].closeTime;
                                }
                                if (!isUndefined(oCMOrders[idxO].duration)) {
                                    oWLOItem.duration = oCMOrders[idxO].duration;
                                }
                                if (!isUndefined(oCMOrders[idxO].enteredTime)) {
                                    oWLOItem.enteredTime = oCMOrders[idxO].enteredTime;
                                }
                                if (!isUndefined(oCMOrders[idxO].filledQuantity)) {
                                    oWLOItem.filledQuantity = oCMOrders[idxO].filledQuantity;
                                }
                                if (!isUndefined(oCMOrders[idxO].orderLegCollection[0].instruction)) {
                                    oWLOItem.instruction = oCMOrders[idxO].orderLegCollection[0].instruction;
                                }
                                if (!isUndefined(oCMOrders[idxO].orderId)) {
                                    oWLOItem.orderId = oCMOrders[idxO].orderId;
                                }
                                if (!isUndefined(oCMOrders[idxO].orderType)) {
                                    oWLOItem.orderType = oCMOrders[idxO].orderType;
                                }

                                oWLOItem.price = 0;
                                if (!isUndefined(oCMOrders[idxO].price)) {
                                    oWLOItem.price = oCMOrders[idxO].price;
                                } else {
                                    if (!isUndefined(oCMOrders[idxO].orderActivityCollection)) {
                                        if (oCMOrders[idxO].orderActivityCollection.length > 0) {
                                            if (!isUndefined(oCMOrders[idxO].orderActivityCollection[0].executionLegs)) {
                                                if (oCMOrders[idxO].orderActivityCollection[0].executionLegs.length > 0) {
                                                    if (!isUndefined(oCMOrders[idxO].orderActivityCollection[0].executionLegs[0].price)) {
                                                        oWLOItem.price = oCMOrders[idxO].orderActivityCollection[0].executionLegs[0].price;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oCMOrders[idxO].orderLegCollection[0].quantity)) {
                                    oWLOItem.quantity = oCMOrders[idxO].orderLegCollection[0].quantity;
                                }
                                if (!isUndefined(oCMOrders[idxO].remainingQuantity)) {
                                    oWLOItem.remainingQuantity = oCMOrders[idxO].remainingQuantity;
                                }
                                if (!isUndefined(oCMOrders[idxO].session)) {
                                    oWLOItem.session = oCMOrders[idxO].session;
                                }
                                if (!isUndefined(oCMOrders[idxO].status)) {
                                    oWLOItem.status = oCMOrders[idxO].status;
                                    oWLOItem.bCheckboxEnabled = false;
                                    switch (oWLOItem.status.toUpperCase()) {
                                        case "AWAITING_PARENT_ORDER":
                                        case "AWAITING_CONDITION":
                                        case "AWAITING_MANUAL_REVIEW":
                                        case "ACCEPTED":
                                        case "AWAITING_UR_OUT":
                                        case "PENDING_ACTIVATION":
                                        case "QUEUED":
                                        case "WORKING": {
                                            sTmp = "Open";
                                            oWLOItem.bCheckboxEnabled = true;
                                            break;
                                        }
                                        case "REJECTED": {
                                            sTmp = "Rejected";
                                            break;
                                        }
                                        case "PENDING_CANCEL": {
                                            sTmp = "Pend Cncl";
                                            break;
                                        }
                                        case "CANCELED": {
                                            sTmp = "Canceled";
                                            break;
                                        }
                                        case "PENDING_REPLACE": {
                                            sTmp = "Pend Rplc";
                                            break;
                                        }
                                        case "REPLACED": {
                                            sTmp = "Replaced";
                                            break;
                                        }
                                        case "FILLED": {
                                            sTmp = "Filled";
                                            break;
                                        }
                                        case "EXPIRED": {
                                            sTmp = "Expired";
                                            break;
                                        }
                                    }
                                    oWLOItem.status = sTmp;
                                }
                                if (!isUndefined(oCMOrders[idxO].stopPriceOffset)) {
                                    oWLOItem.stopPriceOffset = oCMOrders[idxO].stopPriceOffset;
                                }
                                if (!isUndefined(oCMOrders[idxO].stopPriceLinkType)) {
                                    oWLOItem.stopPriceLinkType = oCMOrders[idxO].stopPriceLinkType;
                                }
                                if (!isUndefined(oCMOrders[idxO].orderLegCollection[0].instrument.symbol)) {
                                    oWLOItem.symbol = oCMOrders[idxO].orderLegCollection[0].instrument.symbol;
                                }
                                if ((!isUndefined(oCurrentOIDs[oCMOrders[idxO].orderId])) && (oWLOItem.bCheckboxEnabled)) {
                                    //already displayed so reset the selectfororder flag
                                    oWLOItem.bSelectedForOrder = oCurrentOIDs[oCMOrders[idxO].orderId];
                                }
                                oWLOItem.iSortOrderAscDesc = gWatchlists[idxWL].iSortOrderAscDesc;
                                oWLOItem.sSortOrderFields = gWatchlists[idxWL].sSortOrderFields;
                                gWatchlists[idxWL].WLItems[gWatchlists[idxWL].WLItems.length] = oWLOItem;
                            }
                        }
                    }
                    //now display the watchlist

                    iLineCnt = 0;

                    sThisDiv = "";
                    sThisTableTitle = "";
                    sThisTableTitleInside = "";

                    //mostly the same for cell and not cell
                    if (gbUsingCell) {
                        sThisDiv = sThisDiv + "<div style=\"width:" + lengthsWLO.WLWidthCell + "; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                        sThisDiv = sThisDiv + "<table style=\"width:" + lengthsWLO.WLWidthCell + "; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
                    } else {
                        sThisDiv = sThisDiv + "<div style=\"width:" + lengthsWLO.WLWidth + "; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                        sThisDiv = sThisDiv + "<table style=\"width:" + lengthsWLO.WLWidth + "; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
                    }
                    sThisDiv = sThisDiv + "<tr>";

                    sThisDiv = sThisDiv + "<th style=\"width:" + (lengthsWLO.WLColOpenLabelWidth + lengthsWLO.WLColOpenEntryWidth + lengthsWLO.WLColAcquiredDateEntryWidth).toString() + "px; text-align:left; vertical-align:middle;border-top-width:1px;border-bottom-width:1px;border-left-width:1px;border-right-width:0px;border-style:solid;border-spacing:0px;border-color:White\">" +
                        "&nbsp;From:&nbsp;<input title=\"From Date as yyyy-mm-dd\" id=\"txtOStart" + sThisId + "\" name=\"txtOStart" + sThisId + "\" type=\"text\" style=\"width:" + lengthsWLO.WLColAcquiredDateEntryWidth.toString() + "px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + FormatCurrentDateForTD() + "\">" +
                        "&nbsp;To:&nbsp;<input title=\"To Date as yyyy-mm-dd\" id=\"txtOEnd" + sThisId + "\" name=\"txtOEnd" + sThisId + "\" type=\"text\" style=\"width:" + lengthsWLO.WLColAcquiredDateEntryWidth.toString() + "px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + FormatCurrentDateForTD() + "\">" +
                        "&nbsp;<input title=\"When checked use the From and To dates, otherwise only show orders opened or closed today.\" id=\"chkUseDates" + sThisId + "\" name=\"chkUseDates" + sThisId + "\"  style=\"text-align:left;vertical-align:middle; \" type=\"checkbox\" value=\"\" ></th>";

                    sThisDiv = sThisDiv + "<th style=\"height:30px; width:" + lengthsWLO.WLColTitleWidth.toString() + "px; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:0px; border-style:solid;border-spacing:0px;border-color:White\">" +
                        "<span style=\"vertical-align: middle;\" id=\"spanWLNumChecked" + sThisId + "\" name=\"spanWLNumChecked" + sThisId + "\">&nbsp;</span>" +
                        "<span title=\"Account Name\"  style=\"vertical-align: middle;\"><b>" + sLastWLAccountName + "--</b></span>" +
                        "<span title=\"Watchlist Name\" style=\"vertical-align: middle;\"><b>" + sLastWLName + "&nbsp;&nbsp;</b></span>" +
                        "<img title=\"yyyimgMaxRestoreyyy\" height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"xxximgMaxRestorexxx\" id=\"spanMaxRestore" + sThisId + "\" onclick=\"wlDoMaximizeRestore('" + sLastWLAccountId + "', '" + gWatchlists[idxWL].watchlistId + "')\">" +
                        "&nbsp;&nbsp;<img title=\"Print\" height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"print-icon25px.png\" onclick=\"printdiv('xxxPrintDivNamexxx')\">" +
                        "<span title=\"Current Date and Time\" style=\"vertical-align: middle;\" id=\"spanODate" + sThisId + "\" name=\"spanODate" + sThisId + "\">&nbsp;&nbsp;&nbsp;&nbsp;" + sDate + "</span></th >";

                    sThisDiv = sThisDiv + "<th style=\"width:" + (lengthsWLO.WLColCloseLabelWidth + lengthsWLO.WLColCloseEntryWidth).toString() + "px;text-align:right;vertical-align:middle;border-top-width:1px;border-bottom-width:1px;border-left-width:0px;border-right-width:0px;border-style:solid;border-spacing:0px;border-color:White\">" +
                        "<input title=\"Cancel selected orders.\" type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoOCancelOrders('" + gWatchlists[idxWL].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Cancel\" ></th>";

                    sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:" + lengthsWLO.WLCol2Width.toString() + "px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDiv('" + gWatchlists[idxWL].watchlistId + "','" + sLastWLAccountId + "')\">&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;&nbsp;</th>";

                    sThisDiv = sThisDiv + "</tr>";

                    sThisDiv = sThisDiv + "<tr>";
                    sThisDiv = sThisDiv + "<td colspan=\"4\" style=\"vertical-align:top;border-width:1px; border-style:solid;border-spacing:1px;border-color:White\">";
                    //-------------------------

                    sThisDiv = sThisDiv + "<div id=\"divtable" + sThisId + "\" style =\"border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    sThisTableTitle = "<div id=\"divtableTitle" + sThisId + "\" style =\"" + gsReplaceTableHeightOverflowTitle + " border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    sThisTableTitleInside = "<table style=\"border-collapse:collapse; border: 0px solid black;background-color:" + gsWLTableBackgroundColor + "; width:100%;border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";

                    sThisTableTitleInside = sThisTableTitleInside + "<tr style=\"height:" + giTitleHeight.toString() + "px; \">";

                    //sThisDiv = sThisDiv + "<div id=\"divtable" + sThisId + "\" style =\"border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    //sThisTable = "";
                    //sThisTable = sThisTable + "<table style=\"border-collapse:collapse; border: 0px solid black;background-color:" + gsWLTableBackgroundColor + "; width:100%;border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    //sThisTable = sThisTable + "<tr>";

                    if (gWatchlists[idxWL].WLItems.length == 0) {
                        //no orders
                        sThisTableTitleInside = sThisTableTitleInside + "<td style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">No orders for this account.</td>";
                        sThisTableTitleInside = sThisTableTitleInside + "</tr></table>";
                        sThisTableTitle = sThisTableTitle + sThisTableTitleInside + "</div>" + "<div id=\"divtableInside" + sThisId + "\" style =\"" + gsReplaceTableHeightOverflow + " border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                        if (!isUndefined(document.getElementById("spanWLNumChecked" + sThisId))) {
                            if (document.getElementById("spanWLNumChecked" + sThisId) != null) {
                                document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "&nbsp;";
                            }
                        }

                    } else {
                        //Status 	Action 	Quantity  Symbol 	Type 	Price  Act.Price  Time-in-Force  Opened Closed
                        let sTitle = {
                            "Status": "<b><I><U>Status</U></I></b>",
                            "Action": "<b><I><U>Action</U></I></b>",
                            "Quantity": "<b><I><U>Quantity</U></I></b>",
                            "Price": "<b><I><U>Price</U></I></b>",
                            "Symbol": "<b><I><U>Symbol</U></I></b>",
                            "Type": "<b><I><U>Type</U></I></b>",
                            "ActPrice": "<b><I><U>Act.Price</U></I></b>",
                            "TimeInForce": "<b><I><U>Time-in-Force</U></I></b>",
                            "TimeEntered": "<b><I><U>Opened</U></I></b>",
                            "Reported": "<b><I><U>Closed</U></I></b>"
                        };

                        let sTitleWithArrow = {
                            "Status": "<b><I><U>Status</U></I>xxx</b>",
                            "Action": "<b><I><U>Action</U></I>xxx</b>",
                            "Quantity": "<b><I><U>Quantity</U></I>xxx</b>",
                            "Price": "<b><I><U>Price</U></I>xxx</b>",
                            "Symbol": "<b><I><U>Symbol</U></I>xxx</b>",
                            "Type": "<b><I><U>Type</U></I>xxx</b>",
                            "ActPrice": "<b><I><U>Act.Price</U></I>xxx</b>",
                            "TimeInForce": "<b><I><U>Time-in-Force</U></I>xxx</b>",
                            "TimeEntered": "<b><I><U>Opened</U></I>xxx</b>",
                            "Reported": "<b><I><U>Closed</U></I>xxx</b>"
                        };


                        let sThischkItemId = "chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + "000";
                        let sonClickChangeOrderBase = "onclick =\"wlChangeOrderO(" + idxWL.toString() + ", 'xxx')\"";
                        let sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.Status);

                        let sDownArrow = "&darr;";
                        let sUpArrow = "&uarr;";
                        let sArrow = "";
                        if (gWatchlists[idxWL].iSortOrderAscDesc == 0) {
                            sArrow = sDownArrow;
                        } else {
                            sArrow = sUpArrow;
                        }
                        sTitle[gWatchlists[idxWL].sSortOrderFields] = sTitleWithArrow[gWatchlists[idxWL].sSortOrderFields].replace("xxx", sArrow);
                        gWatchlists[idxWL].WLItems.sort(sortWLO);


                        sThisTableTitleInside = sThisTableTitleInside + "<td style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" +
                            "<input xxthisWillBeReplacedxx style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + "; \" type=\"checkbox\" id=\"" + sThischkItemId + "\" name=\"" + sThischkItemId + "\" value=\"\" onclick=\"wlMarkSelectedItem(" + idxWL.toString() + ", " + "-1" + ")\">" +
                            "<span " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO.Status + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + "; \">" +
                            sTitle.Status + "</span></td > ";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.Action);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO.Action + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Action + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.Quantity);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO.Quantity + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Quantity + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.Symbol);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO.Symbol + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Symbol + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.Type);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO.Type + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Type + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.Price);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO.Price + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Price + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.ActPrice);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO.ActPrice + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.ActPrice + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.TimeInForce);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO["Time-in-Force"] + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.TimeInForce + "</td>";

                        if (gbUsingCell) {
                            sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.TimeEntered);
                            sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO.OpenedCell + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.TimeEntered + "</td>";

                            sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.Reported);
                            sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO.ClosedCell + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Reported + "</td>";
                        } else {
                            sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.TimeEntered);
                            sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO.Opened + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.TimeEntered + "</td>";

                            sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsO.Reported);
                            sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLO.Closed + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Reported + "</td>";
                        }

                        sThisTableTitleInside = sThisTableTitleInside + "</tr></table>";

                        sThisTableTitle = sThisTableTitle + sThisTableTitleInside + "</div>" + "<div id=\"divtableInside" + sThisId + "\" style =\"" + gsReplaceTableHeightOverflow + " border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                        sThisTable = "";
                        sThisTable = sThisTable + "<table style=\"border-collapse:collapse; border: 0px solid black;background-color:" + gsWLTableBackgroundColor + "; width:100%;border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";

                        iLineCnt = 0;
                        for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {

                            let oWLOItem = new WLItemOrder();
                            oWLOItem = gWatchlists[idxWL].WLItems[idxWLItem];
                            iLineCnt++;
                            let sChecked = "";
                            if (oWLOItem.bCheckboxEnabled) {
                                if (oWLOItem.bSelectedForOrder) {
                                    sChecked = "checked";
                                    iNumChecked++;
                                } else {
                                    bEverythingIsChecked = false;
                                }
                            }

                            let sThisTRId = "TR" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + FormatIntegerNumber(idxWLItem, 3, "0");
                            if (sChecked == "checked") {
                                sThisTable = sThisTable + "<tr id=\"" + sThisTRId + "\"  name=\"" + sThisTRId + "\" style=\"background-color:" + gsWLTableSelectedRowBackgroundColor + ";\">";
                            } else {
                                if ((iLineCnt % 2) == 0) {
                                    sThisTable = sThisTable + "<tr id=\"" + sThisTRId + "\"  name=\"" + sThisTRId + "\" style=\"background-color:" + gsWLTableEvenRowBackgroundColor + ";\">";
                                } else {
                                    sThisTable = sThisTable + "<tr id=\"" + sThisTRId + "\"  name=\"" + sThisTRId + "\" style=\"background-color:" + gsWLTableOddRowBackgroundColor + ";\">";
                                }
                            }

                            //check box and Status - status
                            let sEnableCheckbox = "disabled";
                            if (oWLOItem.bCheckboxEnabled) {
                                sEnableCheckbox = "";
                            }
                            sTmp = oWLOItem.status;
                            let sThischkItemId = "chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + FormatIntegerNumber(idxWLItem, 3, "0");
                            sThisTable = sThisTable + "<td style=\"text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" +
                                "<input " + sEnableCheckbox + " style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";\" id=\"" + sThischkItemId + "\" name=\"" + sThischkItemId + "\" type=\"checkbox\" " + sChecked + " value=\"\" onclick=\"wlMarkSelectedItem(" + idxWL.toString() + ", " + idxWLItem.toString() + ")\">" +
                                "<span style=\"" + gsFieldWidthsWLO.Status + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + "; \">" +
                                sStatusSpacesP + sTmp + sStatusSpacesT + "</span></td>";

                            //Action - instruction
                            sTmp = oWLOItem.instruction;
                            sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.Action + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sActionSpacesP + sTmp + sActionSpacesT + "</td>";

                            //Quantity - quantity
                            sTmp = FormatDecimalNumber(oWLOItem.quantity, 5, 0, "");
                            let dQty = parseFloat(sTmp);
                            if (dQty == 0.0) {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.Quantity + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                            } else {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.Quantity + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sQuantitySpacesP + sTmp + sQuantitySpacesT + "</td>";
                            }

                            //Symbol - symbol
                            sTmp = oWLOItem.symbol;
                            sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.Symbol + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sSymbolSpacesP + sTmp + sSymbolSpacesT + "</td>";

                            //Order Type - orderType and maybe stopPriceLinkType
                            sTmp = oWLOItem.orderType;
                            if (sTmp == "TRAILING_STOP") {
                                sTmp = "Trailing&nbsp;Stop";
                            } else {
                                sTmp = sTmp.toProperCase(true);
                            }
                            sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.Type + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sOrderTypeSpacesP + sTmp + sOrderTypeSpacesT + "</td>";

                            //Price - price
                            if (oWLOItem.orderType == "TRAILING_STOP") {
                                sTmp = FormatDecimalNumberRightTrim(oWLOItem.stopPriceOffset, 5, 2, "", false) + "%";
                            } else {
                                sTmp = FormatDecimalNumberRightTrim(oWLOItem.price, 5, 4, "", true);
                            }
                            let dPrice = parseFloat(sTmp);
                            if (dPrice == 0.0) {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.Price + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                            } else {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.Price + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sPriceSpacesP + sTmp + sPriceSpacesT + "</td>";
                            }

                            //Activation - activationPrice
                            sTmp = FormatDecimalNumber(oWLOItem.activationPrice, 5, 2, "");
                            let activationPrice = parseFloat(sTmp);
                            if (activationPrice == 0.0) {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.ActPrice + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                            } else {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.ActPrice + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sActivationPriceSpacesP + sTmp + sActivationPriceSpacesT + "</td>";
                            }

                            //Time-in-Force - cancelTime
                            if (oWLOItem.cancelTime == "") {
                                sTmp = "&nbsp;";
                            } else {
                                let d2 = new Date(oWLOItem.cancelTime);
                                sTmp = FormatTDTradeDate(d2, false);
                                //sTmp = oWLOItem.cancelTime;
                            }
                            sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO["Time-in-Force"] + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTimeInForceSpacesP + sTmp + sTimeInForceSpacesT + "</td>";

                            //Entered - enteredTime
                            if (oWLOItem.enteredTime == "") {
                                sTmp = "&nbsp;";
                            } else {
                                let d2 = new Date(oWLOItem.enteredTime.split("+")[0] + "+00:00");
                                sTmp = FormatTDTradeDate(d2);
                            }
                            if (gbUsingCell) {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.OpenedCell + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; font-size:9pt;\">" + sTimeEnteredSpacesP + sTmp + sTimeEnteredSpacesT + "</td>";
                            } else {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.Opened + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTimeEnteredSpacesP + sTmp + sTimeEnteredSpacesT + "</td>";
                            }

                            //Closed - closeTime
                            if (oWLOItem.closeTime == "") {
                                sTmp = "&nbsp;";
                            } else {
                                let d2 = new Date(oWLOItem.closeTime.split("+")[0] + "+00:00");
                                sTmp = FormatTDTradeDate(d2);
                            }
                            if (gbUsingCell) {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.ClosedCell + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; font-size:9pt; \">" + sReportedSpacesP + sTmp + sReportedSpacesT + "</td>";
                            } else {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLO.Closed + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sReportedSpacesP + sTmp + sReportedSpacesT + "</td>";
                            }

                            sThisTable = sThisTable + "</tr>";

                        }

                    }

                } else {
                    //an error occurred, so don't update anything
                    return;
                }

                if (sThisTable == "") {
                    sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflow, "");
                    sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflowTitle, "");
                    sThisDiv = sThisDiv.replace("xxximgMaxRestorexxx", gsRestoreWindowImg);
                    sThisDiv = sThisDiv.replace("yyyimgMaxRestoreyyy", "Restore");
                    sThisDiv = sThisDiv + sThisTableTitle + "</div></div></td></tr></table></div>";
                } else {
                    if ((bEverythingIsChecked) && (iNumChecked > 0)) {
                        sThisTableTitleInside = sThisTableTitleInside.replace("xxthisWillBeReplacedxx", "checked");
                        sThisTableTitle = sThisTableTitle.replace("xxthisWillBeReplacedxx", "checked");
                    } else {
                        sThisTableTitleInside = sThisTableTitleInside.replace("xxthisWillBeReplacedxx", "");
                        sThisTableTitle = sThisTableTitle.replace("xxthisWillBeReplacedxx", "");
                    }
                    //sThisTable = sThisTable.replace("xxthisWillBeReplacedxx", "checked");

                    if ((iLineCnt > giLineLimit) && (!gWatchlists[idxWL].bShowMaximized)) {
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflow, gsTableHeightOverflow);
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflowTitle, gsTableHeightOverflowTitle);
                        sThisDiv = sThisDiv.replace("xxximgMaxRestorexxx", gsMaximizeWindowImg);
                        sThisDiv = sThisDiv.replace("yyyimgMaxRestoreyyy", "Maximize");
                    } else {
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflow, "");
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflowTitle, "");
                        sThisDiv = sThisDiv.replace("xxximgMaxRestorexxx", gsRestoreWindowImg);
                        sThisDiv = sThisDiv.replace("yyyimgMaxRestoreyyy", "Restore");
                    }

                    sThisDiv = sThisDiv + sThisTableTitle + sThisTable + "</table></div></div>" + "</td></tr></table></div>";
                    //sThisTable = sThisTable + "</table>";
                    //sThisDiv = sThisDiv + sThisTable + "</div ></td ></tr ></table ></div > ";
                }
                if (gWatchlists[idxWL].spanName == "") {
                    gWatchlists[idxWL].spanName = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
                    sThisDiv = sThisDiv.replace("xxxPrintDivNamexxx", gWatchlists[idxWL].spanName);
                    wlAddDiv(gWatchlists[idxWL].spanName, sThisDiv);
                } else {
                    if (document.getElementById(gWatchlists[idxWL].spanName).innerHTML == "") {
                        sThisDiv = sThisDiv.replace("xxxPrintDivNamexxx", gWatchlists[idxWL].spanName);
                        document.getElementById(gWatchlists[idxWL].spanName).innerHTML = sThisDiv;
                    } else {
                        //document.getElementById("divtable" + sThisId).innerHTML = sThisTable;
                        if (!isUndefined(document.getElementById("spanODate" + sThisId))) {
                            if ((iLineCnt > giLineLimit) && (!gWatchlists[idxWL].bShowMaximized)) {
                                document.getElementById("divtableInside" + sThisId).style.height = gsTableHeightWithScrollbar;
                                document.getElementById("divtableInside" + sThisId).style.overflowY = "scroll";
                                document.getElementById("divtableTitle" + sThisId).style.height = gsTableHeightWithScrollbarTitle;
                                document.getElementById("divtableTitle" + sThisId).style.overflowY = "scroll";
                                document.getElementById("spanMaxRestore" + sThisId).src = gsMaximizeWindowImg;
                                document.getElementById("spanMaxRestore" + sThisId).title = "Maximize";
                            } else {
                                document.getElementById("divtableInside" + sThisId).style.height = "";
                                document.getElementById("spanMaxRestore" + sThisId).src = gsRestoreWindowImg;
                                document.getElementById("spanMaxRestore" + sThisId).title = "Restore";
                            }
                            document.getElementById("divtableTitle" + sThisId).innerHTML = sThisTableTitleInside;
                            document.getElementById("divtableInside" + sThisId).innerHTML = sThisTable;
                            document.getElementById("spanODate" + sThisId).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;" + sDate;
                        }
                    }
                }
            }

        }
    }
}

function GetWatchlistPrices() {

    let oWLItemDetail = new WLItemDetail();
    let dt = new Date();
    let sDate = FormatDateWithTime(dt, true, false);

    if (gWatchlists.length > 0) {
        for (let idxWLMain = 0; idxWLMain < gWatchlists.length; idxWLMain++) {
            if (gWatchlists[idxWLMain].bSelected) {
                let sInvalidSymbols = "";
                let sInvalidSymbolsSep = "";
                let bDoingDividendWL = false;
                let bDoingCurrentTrade = false;
                let bDoingShared = false;
                let bDoingAccountWL = false;
                let bNeedResetSortOrder = false;

                gWLDisplayed.length = 0;


                //reset sort order if just opening WL
                if (gWatchlists[idxWLMain].spanName == "") {
                    bNeedResetSortOrder = true;
                } else {
                    if (document.getElementById(gWatchlists[idxWLMain].spanName).innerHTML == "") {
                        bNeedResetSortOrder = true;
                    } else {
                        //has the columns to display changed
                        let bNotEmpty = false;
                        for (let key in gWatchlists[idxWLMain].wlcolumnsselectedtemp) {
                            // check if the property/key is defined in the object itself, not in parent
                            if (gWatchlists[idxWLMain].wlcolumnsselectedtemp.hasOwnProperty(key)) {
                                bNotEmpty = true;
                                break;
                            }
                        }
                        if (bNotEmpty) {
                            document.getElementById(gWatchlists[idxWLMain].spanName).innerHTML = "";
                        }
                    }
                }
                gWatchlists[idxWLMain].wlcolumnsselectedtemp = [];

                if (gWatchlists[idxWLMain].bShared) {
                    bDoingShared = true;
                } else if (gWatchlists[idxWLMain].watchlistId == gWatchlists[idxWLMain].accountId) { //don't show Open and Close if this is an Account watchlist
                    bDoingAccountWL = true;
                } else if (gWatchlists[idxWLMain].name.toUpperCase().indexOf("DIVIDEND") != -1) {
                    bDoingDividendWL = true;
                } else if (gWatchlists[idxWLMain].name.toUpperCase().indexOf("CURRENT TRADE") != -1) {
                    bDoingCurrentTrade = true;
                }

                if (bNeedResetSortOrder) {
                    for (let key in gWatchlists[idxWLMain].wlcolumnsselected) {
                        // check if the property/key is defined in the object itself, not in parent
                        if (gWatchlists[idxWLMain].wlcolumnsselected.hasOwnProperty(key)) {
                            if (gWatchlists[idxWLMain].wlcolumnsselected[key].sortonthisfield) {
                                gWatchlists[idxWLMain].sSortOrderFields = key;
                                gWatchlists[idxWLMain].iSortOrderAscDesc = gWatchlists[idxWLMain].wlcolumnsselected[key].sortascdesc; //0 - ascending, 1 - descending
                                break;
                            }
                        }
                    }
                //    if (bDoingCurrentTrade) {
                //        gWatchlists[idxWLMain].sSortOrderFields = gsSortOrderFields.CatalystDate;
                //        gWatchlists[idxWLMain].iSortOrderAscDesc = 0; //0 - ascending, 1 - descending 
                //    } else {
                //        gWatchlists[idxWLMain].sSortOrderFields = gsSortOrderFields.Symbol;
                //        gWatchlists[idxWLMain].iSortOrderAscDesc = 0; //0 - ascending, 1 - descending 
                //    }
                }

                for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWLMain].WLItems.length; idxWLItem++) {
                    if (gWatchlists[idxWLMain].WLItems[idxWLItem].bSelected) {
                        let sSymbol = gWatchlists[idxWLMain].WLItems[idxWLItem].symbol;

                        //get account position info if it exists
                        let oPositions = new Array();
                        if (!bDoingShared) {
                            for (let idxAccount = 0; idxAccount < gAccounts.length; idxAccount++) {
                                if ((gAccounts[idxAccount].positions.length > 0) &&
                                    (gAccounts[idxAccount].accountId == gWatchlists[idxWLMain].accountId)) {
                                    for (let idxPositions = 0; idxPositions < gAccounts[idxAccount].positions.length; idxPositions++) {
                                        if (gAccounts[idxAccount].positions[idxPositions].symbol == sSymbol) {
                                            let oPosition = new Position();
                                            oPosition = gAccounts[idxAccount].positions[idxPositions];
                                            oPosition.accountId = gAccounts[idxAccount].accountId;
                                            oPosition.accountName = gAccounts[idxAccount].accountName;
                                            oPositions[oPositions.length] = oPosition;
                                            break;
                                        }
                                    }
                                    break;
                                }
                            }
                        }

                        if (isUndefined(oMDQ[sSymbol])) {
                            sInvalidSymbols = sInvalidSymbols + sInvalidSymbolsSep + sSymbol;
                            sInvalidSymbolsSep = ", "
                            let oWLDisplayed = new WLDisplayed();
                            oWLDisplayed.symbol = sSymbol;

                            oWLDisplayed.symbolDescription = gWatchlists[idxWLMain].WLItems[idxWLItem].symbolDescription;

                            oWLDisplayed.bHidden = gWatchlists[idxWLMain].WLItems[idxWLItem].bHidden;
                            oWLDisplayed.assetType = "EQUITY";
                            oWLItemDetail = new WLItemDetail();

                            //get GL value
                            oWLItemDetail.averagePrice = gWatchlists[idxWLMain].WLItems[idxWLItem].priceInfo.averagePrice;
                            oWLItemDetail.GLUpdateDate = gWatchlists[idxWLMain].WLItems[idxWLItem].priceInfo.GLUpdateDate;

                            //get purchased date
                            oWLItemDetail.purchasedDate = gWatchlists[idxWLMain].WLItems[idxWLItem].purchasedDate;
                            oWLItemDetail.GLUpdateStartDate = gWatchlists[idxWLMain].WLItems[idxWLItem].priceInfo.GLUpdateStartDate;

                            oWLItemDetail.catalystDate = gWatchlists[idxWLMain].WLItems[idxWLItem].catalystDate;

                            //get the oldgl value
                            oWLItemDetail.oldgl = gWatchlists[idxWLMain].WLItems[idxWLItem].priceInfo.oldgl;

                            if (oPositions.length > 0) {
                                for (let idxPositions = 0; idxPositions < oPositions.length; idxPositions++) {
                                    let oPosition = new Position();
                                    oPosition = oPositions[idxPositions];

                                    oWLItemDetail.shares = 0;
                                    oWLItemDetail.dayGain = 0.0;
                                    oWLItemDetail.costPerShare = 0.0;
                                    oWLItemDetail.gain = 0.0;
                                    oWLItemDetail.gainPercent = 0.0;
                                    oWLItemDetail.accountId = "";
                                    oWLItemDetail.marketValue = oPosition.marketValue;

                                    oWLItemDetail.accountId = oPosition.accountId;
                                    oWLItemDetail.accountName = oPosition.accountName;
                                    oWLItemDetail.shares = oPosition.longQuantity;
                                    oWLItemDetail.dayGain = oPosition.currentDayProfitLoss;
                                    oWLItemDetail.costPerShare = oPosition.averagePrice;
                                    if ((oWLItemDetail.shares > 0) || (oWLItemDetail.shares < 0)) {
                                        oWLItemDetail.gain = oWLItemDetail.shares * (oWLItemDetail.regularMarketLastPrice - oWLItemDetail.costPerShare);
                                        if (oWLItemDetail.costPerShare != 0.0) {
                                            oWLItemDetail.gainPercent = ((oWLItemDetail.regularMarketLastPrice - oWLItemDetail.costPerShare) / oWLItemDetail.costPerShare) * 100.0;
                                        }
                                    }
                                    oWLItemDetail.accountId = gWatchlists[idxWLMain].accountId;
                                    oWLDisplayed.WLItemDetails[oWLDisplayed.WLItemDetails.length] = oWLItemDetail;
                                }
                            } else {
                                oWLItemDetail.accountId = gWatchlists[idxWLMain].accountId;
                                oWLDisplayed.WLItemDetails[oWLDisplayed.WLItemDetails.length] = oWLItemDetail;
                            }
                            oWLDisplayed.sSortOrderFields = gWatchlists[idxWLMain].sSortOrderFields;
                            oWLDisplayed.iSortOrderAscDesc = gWatchlists[idxWLMain].iSortOrderAscDesc;
                            gWLDisplayed[gWLDisplayed.length] = oWLDisplayed;
                        } else {
                            let oWLDisplayed = new WLDisplayed();
                            oWLDisplayed.symbol = sSymbol;

                            oWLDisplayed.bHidden = gWatchlists[idxWLMain].WLItems[idxWLItem].bHidden;
                            oWLDisplayed.assetType = oMDQ[sSymbol].assetType;

                            oWLDisplayed.symbolDescription = gWatchlists[idxWLMain].WLItems[idxWLItem].symbolDescription;

                            oWLItemDetail = new WLItemDetail();
                            if (oWLDisplayed.assetType == "OPTION") {
                                if (!isUndefined(oMDQ[sSymbol].mark)) {
                                    oWLItemDetail.lastPrice = oMDQ[sSymbol].mark;
                                }
                            } else if (oWLDisplayed.assetType == "INDEX") {
                                if (!isUndefined(oMDQ[sSymbol].lastPrice)) {
                                    oWLItemDetail.lastPrice = oMDQ[sSymbol].lastPrice;
                                }
                                if (!isUndefined(oMDQ[sSymbol].highPrice)) {
                                    oWLItemDetail.highPrice = oMDQ[sSymbol].highPrice;
                                }
                                if (!isUndefined(oMDQ[sSymbol].lowPrice)) {
                                    oWLItemDetail.lowPrice = oMDQ[sSymbol].lowPrice;
                                }
                                if (!isUndefined(oMDQ[sSymbol].netChange)) {
                                    oWLItemDetail.netChange = oMDQ[sSymbol].netChange;
                                }
                                if (!isUndefined(oMDQ[sSymbol].netPercentChangeInDouble)) {
                                    oWLItemDetail.netPercentChangeInDouble = oMDQ[sSymbol].netPercentChangeInDouble;
                                }
                            } else {
                                if (!isUndefined(oMDQ[sSymbol].lastPrice)) {
                                    oWLItemDetail.lastPrice = oMDQ[sSymbol].lastPrice;
                                }
                                if (!isUndefined(oMDQ[sSymbol].askPrice)) {
                                    oWLItemDetail.askPrice = oMDQ[sSymbol].askPrice;
                                }
                                if (!isUndefined(oMDQ[sSymbol].bidPrice)) {
                                    oWLItemDetail.bidPrice = oMDQ[sSymbol].bidPrice;
                                }
                                if (!isUndefined(oMDQ[sSymbol].highPrice)) {
                                    oWLItemDetail.highPrice = oMDQ[sSymbol].highPrice;
                                }
                                if (!isUndefined(oMDQ[sSymbol].lowPrice)) {
                                    oWLItemDetail.lowPrice = oMDQ[sSymbol].lowPrice;
                                }
                                if (!isUndefined(oMDQ[sSymbol].netChange)) {
                                    oWLItemDetail.netChange = oMDQ[sSymbol].netChange;
                                }
                                if (!isUndefined(oMDQ[sSymbol].netPercentChangeInDouble)) {
                                    oWLItemDetail.netPercentChangeInDouble = oMDQ[sSymbol].netPercentChangeInDouble;
                                }

                                if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                                    oWLItemDetail.regularMarketLastPrice = oMDQ[sSymbol].regularMarketLastPrice;
                                }
                                if (!isUndefined(oMDQ[sSymbol].regularMarketNetChange)) {
                                    oWLItemDetail.regularMarketNetChange = oMDQ[sSymbol].regularMarketNetChange;
                                }
                                if (!isUndefined(oMDQ[sSymbol].regularMarketPercentChangeInDouble)) {
                                    oWLItemDetail.regularMarketPercentChangeInDouble = oMDQ[sSymbol].regularMarketPercentChangeInDouble;
                                }
                                //"peRatio": 33.3568,
                                if (!isUndefined(oMDQ[sSymbol].peRatio)) {
                                    oWLItemDetail.peRatio = oMDQ[sSymbol].peRatio;
                                }
                                //"divAmount": 0.82,
                                if (!isUndefined(oMDQ[sSymbol].divAmount)) {
                                    oWLItemDetail.divAmount = oMDQ[sSymbol].divAmount / 4;
                                }
                                //"divYield": 0.67,
                                if (!isUndefined(oMDQ[sSymbol].divYield)) {
                                    oWLItemDetail.divYield = oMDQ[sSymbol].divYield;
                                }
                                //"divDate": "2021-02-05 00:00:00.000",
                                if (!isUndefined(oMDQ[sSymbol].divDate)) {
                                    oWLItemDetail.divDate = oMDQ[sSymbol].divDate;
                                }

                            }
                            //get GL value
                            oWLItemDetail.averagePrice = gWatchlists[idxWLMain].WLItems[idxWLItem].priceInfo.averagePrice;
                            oWLItemDetail.GLUpdateDate = gWatchlists[idxWLMain].WLItems[idxWLItem].priceInfo.GLUpdateDate;

                            //get purchased date
                            oWLItemDetail.purchasedDate = gWatchlists[idxWLMain].WLItems[idxWLItem].purchasedDate;
                            oWLItemDetail.GLUpdateStartDate = gWatchlists[idxWLMain].WLItems[idxWLItem].priceInfo.GLUpdateStartDate;

                            oWLItemDetail.catalystDate = gWatchlists[idxWLMain].WLItems[idxWLItem].catalystDate;

                            //get the oldgl value
                            oWLItemDetail.oldgl = gWatchlists[idxWLMain].WLItems[idxWLItem].priceInfo.oldgl;

                            if (oPositions.length > 0) {
                                for (let idxPositions = 0; idxPositions < oPositions.length; idxPositions++) {
                                    let oPosition = new Position();
                                    oPosition = oPositions[idxPositions];

                                    oWLItemDetail.shares = 0;
                                    oWLItemDetail.dayGain = 0.0;
                                    oWLItemDetail.costPerShare = 0.0;
                                    oWLItemDetail.gain = 0.0;
                                    oWLItemDetail.gainPercent = 0.0;
                                    oWLItemDetail.accountId = "";
                                    oWLItemDetail.marketValue = oPosition.marketValue;

                                    oWLItemDetail.accountId = oPosition.accountId;
                                    oWLItemDetail.accountName = oPosition.accountName;
                                    oWLItemDetail.shares = oPosition.longQuantity;
                                    oWLItemDetail.dayGain = oPosition.currentDayProfitLoss;
                                    oWLItemDetail.costPerShare = oPosition.averagePrice;
                                    if ((oWLItemDetail.shares > 0) || (oWLItemDetail.shares < 0)) {
                                        oWLItemDetail.gain = oWLItemDetail.shares * (oWLItemDetail.regularMarketLastPrice - oWLItemDetail.costPerShare);
                                        if (oWLItemDetail.costPerShare != 0.0) {
                                            oWLItemDetail.gainPercent = ((oWLItemDetail.regularMarketLastPrice - oWLItemDetail.costPerShare) / oWLItemDetail.costPerShare) * 100.0;
                                        }
                                    }
                                    oWLDisplayed.WLItemDetails[oWLDisplayed.WLItemDetails.length] = oWLItemDetail;
                                }
                            } else {
                                if (oWLItemDetail.accountId == "") {
                                    oWLItemDetail.accountId = gWatchlists[idxWLMain].accountId;
                                }
                                oWLDisplayed.WLItemDetails[oWLDisplayed.WLItemDetails.length] = oWLItemDetail;
                            }
                            oWLDisplayed.sSortOrderFields = gWatchlists[idxWLMain].sSortOrderFields;
                            oWLDisplayed.iSortOrderAscDesc = gWatchlists[idxWLMain].iSortOrderAscDesc;

                            gWLDisplayed[gWLDisplayed.length] = oWLDisplayed;

                        }
                    }
                }
                //now show the results
                let iLineCnt = 0;
                let iHiddenCnt = 0;

                let sThisDiv = "";
                let sThisTableTitle = "";
                let sThisTableTitleInside = "";
                let sThisTableTotals = "";
                let sThisTableTotalsInside = "";
                let sThisTable = "";

                let sLastWLName = "";
                let sLastWLAccountName = "";
                let sLastWLAccountId = "";
                let sThisId = "";
                let sTableRowVerticalAlignment = "middle";
                let sTmp = "";
                let bEverythingIsChecked = true;

                let oWLCols = gWatchlists[idxWLMain].wlcolumnsselected;
                let iTotalWidth = 0;
                let iTotalSep = 0;
                let iColSep = 1;
                //get the total width
                for (let key in oWLCols) {
                    if (oWLCols.hasOwnProperty(key)) {
                        if (oWLCols[key].selected) {
                            iTotalWidth = iTotalWidth + iTotalSep + oWLCols[key].width;
                            iTotalSep = iColSep;
                        }
                    }
                }
                iTotalWidth = iTotalWidth + 10; //add some more to make sure everything fits

                //initialize widths and col spans
                for (let key in oWLCols) {
                    if (oWLCols.hasOwnProperty(key)) {
                        gsFieldWidthsWL[key] = clone(gsFieldWidthsWLBase[key]);
                        gsFieldColSpanWL[key] = clone(gsFieldColSpanWLBase[key]);
                    }
                }

                //get the last update date
                let sLine2InitSpaces = "";
                let iTmpUpdateDate = GetHighestUpdateDate(idxWLMain, false);
                let sLastUpdateDate = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                if (!bDoingAccountWL) {
                    sLastUpdateDate = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Updated:&nbsp;" + FormatDateWithTime(new Date(iTmpUpdateDate), true, false);
                }

                let sDownArrow = "&darr;";
                let sUpArrow = "&uarr;";
                let sArrow = "";
                if (gWatchlists[idxWLMain].iSortOrderAscDesc == 0) {
                    sArrow = sDownArrow;
                } else {
                    sArrow = sUpArrow;
                }

                //-----------------------------------------------------------------

                sThisDiv = "";
                sLastWLName = gWatchlists[idxWLMain].name;
                sLastWLAccountName = gWatchlists[idxWLMain].accountName;
                sLastWLAccountId = gWatchlists[idxWLMain].accountId;
                sThisId = gWatchlists[idxWLMain].watchlistId + sLastWLAccountId;
                let sdefaultUpdateGLDate = gWatchlists[idxWLMain].defaultUpdateGLDate;
                let bViewable = gWatchlists[idxWLMain].bViewable;

                if (bDoingAccountWL) {
                    if (iTotalWidth < parseInt(lengthsWL.WLWidth)) {
                        iTotalWidth = parseInt(lengthsWL.WLWidth);
                    }
                    sThisDiv = sThisDiv + "<div style=\"width:" + iTotalWidth.toString() + "px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:100%; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
                    sThisDiv = sThisDiv + "<tr>";
                    //sThisDiv = sThisDiv + "<div style=\"width:" + lengthsWL.WLWidth + "; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    //sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:" + lengthsWL.WLWidth + "; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
                    //sThisDiv = sThisDiv + "<tr>";
                    sThisDiv = sThisDiv + "<th style=\"width:" + (lengthsWL.WLColOpenLabelWidth + lengthsWL.WLColOpenEntryWidth + lengthsWL.WLColAcquiredDateEntryWidth + 40).toString() + "px; text-align:left; vertical-align:middle;border-top-width:1px;border-bottom-width:1px;border-left-width:1px;border-right-width:0px;border-style:solid;border-spacing:0px;border-color:White\">" +
                        "<span >&nbsp;&nbsp;<img title=\"Copy Symbols\" width=\"20\" height=\"20\" style=\"vertical-align:middle\" src=\"copy-icon.png\" onclick=\"DoWLOpenSymbols(6, '" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" /></span>" +
                        "</th>";

                    sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:" + lengthsWLWLCol1Width.toString() + "px; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
                        "<span style=\"vertical-align: middle;\" id=\"spanWLNumChecked" + sThisId + "\" name=\"spanWLNumChecked" + sThisId + "\">&nbsp;</span>" +
                        "<span title=\"Account Name\"  style=\"vertical-align: middle;\"><b>" + sLastWLAccountName + "--</b></span>" +
                        "<span title=\"Watchlist Name\" style=\"vertical-align: middle;\"><b>" + sLastWLName + "&nbsp;&nbsp;</b></span>" +
                        "<img title=\"yyyimgMaxRestoreyyy\" height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"xxximgMaxRestorexxx\" id=\"spanMaxRestore" + sThisId + "\" onclick=\"wlDoMaximizeRestore('" + sLastWLAccountId + "', '" + gWatchlists[idxWLMain].watchlistId + "')\">" +
                        "&nbsp;&nbsp;<img title=\"Print\" height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"print-icon25px.png\" onclick=\"printdiv('xxxPrintDivNamexxx')\">" +
                        "<span title=\"Current Date and Time\" style=\"vertical-align: middle;\" id=\"spanWLDate" + sThisId + "\" name=\"spanWLDate" + sThisId + "\">&nbsp;&nbsp;&nbsp;&nbsp;" + sDate + "</span></th >";
                    sThisDiv = sThisDiv + "<th title=\"Close\" style=\"height:24.5px; width:" + lengthsWL.WLCol2Width.toString() + "px; text-align:right; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDiv('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\">&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;&nbsp;</th>";

                    sThisDiv = sThisDiv + "</tr>";

                    sThisDiv = sThisDiv + "<tr>";
                    sThisDiv = sThisDiv + "<th colspan=\"3\" style=\"text-align:left; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";

                } else {
                    if (iTotalWidth < parseInt(lengthsWL.WLWidth)) {
                        iTotalWidth = parseInt(lengthsWL.WLWidth);
                    }
                    sThisDiv = sThisDiv + "<div style=\"width:" + iTotalWidth.toString() + "px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    sThisDiv = sThisDiv + "<table cellspacing=0 cellpadding=0 style=\"width:100%; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
                    sThisDiv = sThisDiv + "<tr>";


                     //&#2399; - should be print symbol
                    //ShowAddPopup(watchlistId, sLastWLAccountId)
                    if (bDoingShared) {
                        sThisDiv = sThisDiv + "<th style=\"width:" + (lengthsWL.WLColOpenLabelWidth + lengthsWL.WLColOpenEntryWidth + lengthsWL.WLColAcquiredDateEntryWidth + 40).toString() + "px; text-align:left; vertical-align:middle;border-top-width:1px;border-bottom-width:1px;border-left-width:1px;border-right-width:0px;border-style:solid;border-spacing:0px;border-color:White\">" +
                            "<span >&nbsp;&nbsp;<img title=\"Copy Symbols\" width=\"20\" height=\"20\" style=\"vertical-align:middle\" src=\"copy-icon.png\" onclick=\"DoWLOpenSymbols(6, '" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" /></span>" +
                            "</th>";
                        //sThisDiv = sThisDiv + "<th style=\"width:" + (lengthsWL.WLColOpenLabelWidth + lengthsWL.WLColOpenEntryWidth + lengthsWL.WLColAcquiredDateEntryWidth + 40).toString() + "px; text-align:left; vertical-align:middle;border-top-width:1px;border-bottom-width:1px;border-left-width:1px;border-right-width:0px;border-style:solid;border-spacing:0px;border-color:White\">" +
                        //    "<span class=\"add-btn\">&nbsp;&nbsp;+<img title=\"Copy Symbols\" width=\"20\" height=\"20\" style=\"vertical-align:middle\" src=\"add-button.png\" onclick=\"DoWLOpenSymbols(6,'" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" /></span>" +
                        //    "</th>";

                        sThisDiv = sThisDiv + "<th style=\"width:" + lengthsWL.WLColTitleWidth.toString() + "px; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:0px; border-style:solid;border-spacing:0px;border-color:White\">" +
                            "<span style=\"vertical-align: middle;\" id=\"spanWLNumChecked" + sThisId + "\" name=\"spanWLNumChecked" + sThisId + "\">&nbsp;</span>" +
                            "<span title=\"Account Name\"  style=\"vertical-align: middle;\"><b>" + sLastWLAccountName + "--</b></span>" +
                            "<span title=\"Watchlist Name\" style=\"vertical-align: middle;\"><b>" + sLastWLName + "&nbsp;&nbsp;</b></span>" +
                            "<img title=\"yyyimgMaxRestoreyyy\" height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"xxximgMaxRestorexxx\" id=\"spanMaxRestore" + sThisId + "\" onclick=\"wlDoMaximizeRestore('" + sLastWLAccountId + "', '" + gWatchlists[idxWLMain].watchlistId + "')\">" +
                            "&nbsp;&nbsp;<img title=\"Print\" height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"print-icon25px.png\" onclick=\"printdiv('xxxPrintDivNamexxx')\">" +
                            "<span title=\"Current Date and Time\" style=\"font-size:8pt;vertical-align: middle;\" id=\"spanWLDate" + sThisId + "\" name=\"spanWLDate" + sThisId + "\">&nbsp;&nbsp;&nbsp;&nbsp;" + sDate + "</span></th >";

                        sThisDiv = sThisDiv + "<th style=\"width:" + (lengthsWL.WLColCloseLabelWidth + lengthsWL.WLColCloseEntryWidth).toString() + "px;text-align:right;vertical-align:middle;border-top-width:1px;border-bottom-width:1px;border-left-width:0px;border-right-width:0px;border-style:solid;border-spacing:0px;border-color:White\">" +
                            "&nbsp;</th>";

                        sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:" + lengthsWL.WLCol2Width.toString() + "px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDiv('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\">&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;&nbsp;</th>";

                        sThisDiv = sThisDiv + "</tr>";
                        sThisDiv = sThisDiv + "<tr>";
                        sThisDiv = sThisDiv + "<th colspan=\"4\" style=\"text-align:left; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";
                    } else {
                        sThisDiv = sThisDiv + "<th style=\"width:" + (lengthsWL.WLColOpenLabelWidth + lengthsWL.WLColOpenEntryWidth + lengthsWL.WLColAcquiredDateEntryWidth + 40).toString() + "px; text-align:left; vertical-align:middle;border-top-width:1px;border-bottom-width:1px;border-left-width:1px;border-right-width:0px;border-style:solid;border-spacing:0px;border-color:White\">" +
                            "<img title=\"Delete Selected Symbols or Delete the watchlist\" width=\"20\" height=\"20\" style=\"vertical-align:middle\" src=\"delete-button-24px.png\" onclick=\"ShowDeletePopupSelection('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" />" +
                            "&nbsp;&nbsp;<img title=\"Add a new symbol.\" width=\"20\" height=\"20\" style=\"vertical-align:middle\" src=\"add-button.png\" onclick=\"ShowAddPopup('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" />" +
                            "&nbsp;&nbsp;<img title=\"Change the Acquired Date, Description or Catalyst Date of one selected symbol, or clear the Acquired Date, Description or Catalyst Date for all selected symbols\" width=\"20\" height=\"20\" style=\"vertical-align:middle\" src=\"update.png\" onclick=\"ShowChangePopup('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" />" +
                            "&nbsp;&nbsp;<img title=\"Copy/Paste Symbols\" width=\"20\" height=\"20\" style=\"vertical-align:middle\" src=\"copy-icon.png\" onclick=\"DoWLOpenSymbols(1, '" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" />" +
                            "</th>";

                        let sWLIconShareTitle = gksWLIconShareTitle;
                        let sWLIconShare = gksWLIconShare;
                        if (bViewable) {
                            sWLIconShareTitle = gksWLIconUnShareTitle;
                            sWLIconShare = gksWLIconUnShare;
                        }
                        sThisDiv = sThisDiv + "<th style=\"width:" + lengthsWL.WLColTitleWidth.toString() + "px; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:0px; border-style:solid;border-spacing:0px;border-color:White\">" +
                            "<span style=\"vertical-align: middle;\" id=\"spanWLNumChecked" + sThisId + "\" name=\"spanWLNumChecked" + sThisId + "\">&nbsp;</span>" +
                            "<span title=\"Account Name\"  style=\"vertical-align: middle;\"><b>" + sLastWLAccountName + "--</b></span>" +
                            "<span title=\"Watchlist Name\" style=\"vertical-align: middle;\"><b>" + sLastWLName + "&nbsp;&nbsp;</b></span>" +
                            "<img title=\"yyyimgMaxRestoreyyy\" height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"xxximgMaxRestorexxx\" id=\"spanMaxRestore" + sThisId + "\" onclick=\"wlDoMaximizeRestore('" + sLastWLAccountId + "', '" + gWatchlists[idxWLMain].watchlistId + "')\">" +
                            "&nbsp;&nbsp;<img title=\"Print\" height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"print-icon25px.png\" onclick=\"printdiv('xxxPrintDivNamexxx')\">" +
                            "&nbsp;<img id=\"Settings" + sThisId + "\" name=\"Settings" + sThisId + "\" title=\"" + gksWLIconSettingsTitle + "\" width=\"20\" height=\"20\" style=\"display:inline; vertical-align:middle\" src=\"" + gksWLIconSettings + "\" onclick=\"ShowSettingsPopupSelection('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" />" +
                            "&nbsp;<img id=\"IconShare" + sThisId + "\" name=\"IconShare" + sThisId + "\" title=\"" + sWLIconShareTitle + "\" width=\"20\" height=\"20\" style=\"display:inline; vertical-align:middle\" src=\"" + sWLIconShare + "\" onclick=\"DoWLShare('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" />" +
                            "<span title=\"Current Date and Time\" style=\"font-size:8pt;vertical-align: middle;\" id=\"spanWLDate" + sThisId + "\" name=\"spanWLDate" + sThisId + "\">&nbsp;&nbsp;&nbsp;&nbsp;" + sDate + "</span></th >";

                        sThisDiv = sThisDiv + "<th style=\"width:" + (lengthsWL.WLColCloseLabelWidth + lengthsWL.WLColCloseEntryWidth).toString() + "px;text-align:right;vertical-align:middle;border-top-width:1px;border-bottom-width:1px;border-left-width:0px;border-right-width:0px;border-style:solid;border-spacing:0px;border-color:White\">" +
                            "<img id=\"IconShow" + sThisId + "\" name=\"IconShow" + sThisId + "\" title=\"" + gksWLIconShowTitle.replace("xx", iHiddenCnt.toString()) + "\" width=\"20\" height=\"20\" style=\"display:inline; vertical-align:middle\" src=\"" + gksWLIconShow + "\" onclick=\"DoWLOpenSymbols(4,'" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" />" +
                            "&nbsp;<img id=\"IconHide" + sThisId + "\" name=\"IconHide" + sThisId + "\" title=\"" + gksWLIconHideTitle + "\" width=\"20\" height=\"20\" style=\"display:inline; vertical-align:middle\" src=\"" + gksWLIconHide + "\" onclick=\"DoWLOpenSymbols(3,'" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" />" +
                            "&nbsp;<img title=\"Update G/L\" width=\"20\" height=\"20\" style=\"vertical-align:middle\" src=\"update.png\" onclick=\"DoWLCloseSymbol('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" />" +
                            "&nbsp;<input title=\"Enter a date as yyyy-mm-dd when initializing G/L values or leave blank to udpate the GL for all starting from the last update date.\" id=\"txtwlclose" + sThisId + "\" name=\"txtwlclose" + sThisId + "\" type=\"search\" style=\"width:" + lengthsWL.WLColCloseEntryWidth.toString() + "px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + sdefaultUpdateGLDate + "\"></th>";

                        sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:" + lengthsWL.WLCol2Width.toString() + "px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDiv('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\">&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;&nbsp;</th>";

                        sThisDiv = sThisDiv + "</tr>";
                        sThisDiv = sThisDiv + "<tr>";
                        sThisDiv = sThisDiv + "<th colspan=\"4\" style=\"text-align:left; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";

                    }
                }

                bEverythingIsChecked = true;
                let iTotalSymbolsUp = 0;
                let iTotalSymbolsDown = 0;
                let iTotalSymbolsUpDay = 0;
                let iTotalSymbolsDownDay = 0;
                let iTotalSymbolsUpRealized = 0;
                let iTotalSymbolsDownRealized = 0;
                let sSymbolsThisWL = "";
                let sSymbolsSelectedForOrderThisWL = "";
                let sSep = "";
                let sSepForOrder = "|";
                let sSepSelectedForOrder = "~";


                for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWLMain].WLItems.length; idxWLItem++) {
                    if (gWatchlists[idxWLMain].WLItems[idxWLItem].bSelected) {
                        sSymbolsThisWL = sSymbolsThisWL + sSep + gWatchlists[idxWLMain].WLItems[idxWLItem].symbol;
                        sSep = ",";

                        //sSymbolsSelectedForOrderThisWL will contain: |symbol,idxWLItem,true|symbol,idxWLItem,false...
                        sSymbolsSelectedForOrderThisWL = sSymbolsSelectedForOrderThisWL + sSepForOrder + gWatchlists[idxWLMain].WLItems[idxWLItem].symbol + sSepSelectedForOrder + idxWLItem.toString() + sSepSelectedForOrder + gWatchlists[idxWLMain].WLItems[idxWLItem].bSelectedForOrder;
                        if (gWatchlists[idxWLMain].WLItems[idxWLItem].bHidden) {
                            iHiddenCnt++;
                        }
                    }
                }
                sSymbolsThisWL = "," + GetUniqueListOfSymbols(sSymbolsThisWL) + ",";

                if (bDoingDividendWL) {
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkSave" + sThisId + "\" name=\"chkSave" + sThisId + "\" value=\"\" > Save";
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkPlace" + sThisId + "\" name=\"chkPlace" + sThisId + "\" value=\"\" > Place";
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkLimit" + sThisId + "\" name=\"chkLimit" + sThisId + "\" value=\"\" > Limit";
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input id=\"txtWLpercent" + sThisId + "\" name=\"txtWLpercent" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">%" +
                        "&nbsp;&nbsp;OR&nbsp;&nbsp;" +
                        "&dollar;<input id=\"txtWLdollars" + sThisId + "\" name=\"txtWLdollars" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">" +
                        "&nbsp;&nbsp;OR&nbsp;&nbsp;" +
                        "<input id=\"txtWLshares" + sThisId + "\" name=\"txtWLshares" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">Shares";

                    sThisDiv = sThisDiv + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLBuy('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Buy\" >" +
                        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLSell('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Sell\" >" +
                        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLTrailingStop('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Trailing Stop\" >" +
                        "&nbsp;&nbsp;&nbsp;<span title=\"Last time the Update G/L button was pressed that caused a G/L value to change\" id=\"spanLastUpdateDate" + sThisId + "\" style=\"font-size:8pt;\">" + sLastUpdateDate + "</span>";

                //} else if (bDoingCurrentTrade) {
                //    sThisDiv = sThisDiv + "&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkSave" + sThisId + "\" name=\"chkSave" + sThisId + "\" value=\"\" > Save";
                //    sThisDiv = sThisDiv + "&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkPlace" + sThisId + "\" name=\"chkPlace" + sThisId + "\" value=\"\" > Place";
                //    sThisDiv = sThisDiv + "&nbsp;&nbsp;&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkLimit" + sThisId + "\" name=\"chkLimit" + sThisId + "\" value=\"\" > Limit";
                //    sThisDiv = sThisDiv + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input id=\"txtWLpercent" + sThisId + "\" name=\"txtWLpercent" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">%" +
                //        "&nbsp;&nbsp;OR&nbsp;&nbsp;" +
                //        "&dollar;<input id=\"txtWLdollars" + sThisId + "\" name=\"txtWLdollars" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">" +
                //        "&nbsp;&nbsp;OR&nbsp;&nbsp;" +
                //        "<input id=\"txtWLshares" + sThisId + "\" name=\"txtWLshares" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">Shares";

                //    sThisDiv = sThisDiv + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLBuy('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Buy\" >" +
                //        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLSell('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Sell\" >" +
                //        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLTrailingStop('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Trailing Stop\" >" +
                //        "&nbsp;&nbsp;&nbsp;<span title=\"Last time the Update G/L button was pressed that caused a G/L value to change\" id=\"spanLastUpdateDate" + sThisId + "\" style=\"font-size:8pt;\">" + sLastUpdateDate + "</span>";

                } else if (bDoingShared) {
                    sThisDiv = sThisDiv + "&nbsp;";

                } else if (bDoingAccountWL) {
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkSave" + sThisId + "\" name=\"chkSave" + sThisId + "\" value=\"\" > Save";
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkPlace" + sThisId + "\" name=\"chkPlace" + sThisId + "\" value=\"\" > Place";
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkLimit" + sThisId + "\" name=\"chkLimit" + sThisId + "\" value=\"\" > Limit";
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input id=\"txtWLpercent" + sThisId + "\" name=\"txtWLpercent" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">%" +
                        "&nbsp;&nbsp;OR&nbsp;&nbsp;" +
                        "&dollar;<input id=\"txtWLdollars" + sThisId + "\" name=\"txtWLdollars" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">" +
                        "&nbsp;&nbsp;OR&nbsp;&nbsp;" +
                        "<input id=\"txtWLshares" + sThisId + "\" name=\"txtWLshares" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">Shares";

                    sThisDiv = sThisDiv + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLBuy('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Buy\" >" +
                        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLSell('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Sell\" >" +
                        "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLTrailingStop('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Trailing Stop\" >";
                } else {
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkSave" + sThisId + "\" name=\"chkSave" + sThisId + "\" value=\"\" > Save";
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkPlace" + sThisId + "\" name=\"chkPlace" + sThisId + "\" value=\"\" > Place";
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;&nbsp;&nbsp;<input style=\"vertical-align:middle\" type=\"checkbox\" id=\"chkLimit" + sThisId + "\" name=\"chkLimit" + sThisId + "\" value=\"\" > Limit";
                    sThisDiv = sThisDiv + "&nbsp;&nbsp;&nbsp;&nbsp;<input id=\"txtWLpercent" + sThisId + "\" name=\"txtWLpercent" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">%" +
                        "&nbsp;&nbsp;OR&nbsp;&nbsp;" +
                        "&dollar;<input id=\"txtWLdollars" + sThisId + "\" name=\"txtWLdollars" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">" +
                        "&nbsp;&nbsp;OR&nbsp;&nbsp;" +
                        "<input id=\"txtWLshares" + sThisId + "\" name=\"txtWLshares" + sThisId + "\" type=\"text\" style=\"font-family:Arial,Helvetica, sans-serif; font-size:10pt; width:50px\" value=\"\">Shares";

                    sThisDiv = sThisDiv + "&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLBuy('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Buy\" >" +
                        "&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLSell('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Sell\" >" +
                        "&nbsp;&nbsp;&nbsp;&nbsp;<input type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoWLTrailingStop('" + gWatchlists[idxWLMain].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Trailing Stop\" >" +
                        "&nbsp;&nbsp;&nbsp;<span title=\"Last time the Update G/L button was pressed that caused a G/L value to change\" id=\"spanLastUpdateDate" + sThisId + "\" style=\"font-size:8pt;\">" + sLastUpdateDate + "</span>";
                }
                sThisDiv = sThisDiv + "</th > ";

                sThisDiv = sThisDiv + "</tr>";


                sThisDiv = sThisDiv + "<tr>";

                sThisDiv = sThisDiv + "<td colspan=\"4\" style=\"vertical-align:top;border-width:1px; border-style:solid;border-spacing:1px;border-color:White\">";

                sThisDiv = sThisDiv + "<div id=\"divtable" + sThisId + "\" style =\"border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                sThisTableTitle = "<div id=\"divtableTitle" + sThisId + "\" style =\"" + gsReplaceTableHeightOverflowTitle + " border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                sThisTableTitleInside = "<table style=\"border-collapse:collapse; border: 0px solid black;background-color:" + gsWLTableBackgroundColor + "; width:100%;border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";

                sThisTableTitleInside = sThisTableTitleInside + "<tr style=\"height:" + giTitleHeight.toString() + "px; \">";

                let sThischkItemId = "chkWLItem" + sThisId + FormatIntegerNumber(idxWLMain, 3, "0") + "000";

                let sAcquiredSpaces = "";
                if (bDoingDividendWL) {
                    sAcquiredSpaces = "";
                }

                if (!oWLCols[gWatchlists[idxWLMain].sSortOrderFields].selected) {
                    gWatchlists[idxWLMain].sSortOrderFields = gsSortOrderFields.Symbol;
                }
                let sonClickChangeOrderBase = "onclick =\"wlChangeOrder(" + idxWLMain.toString() + ", 'xxx')\"";
                let sSortablePrefix = "<b><I><U>";
                let sSortableSuffix = "</U></I></b>";
                let sNotSortablePrefix = "<b><I>";
                let sNotSortableSuffix = "</I></b>";
                let sonClickChangeOrder = "";
                let sTDSep = "<td style=\"border-style:solid;border-width:0px;border-color:black;width:" + iColSep.toString() + "px;\"></td>";
                for (let key in oWLCols) {
                    if (oWLCols.hasOwnProperty(key)) {
                        if (oWLCols[key].selected) {
                            let sDisplayName = "";
                            if (oWLCols[key].sortable) {
                                sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", key);
                                if (key == gWatchlists[idxWLMain].sSortOrderFields) {
                                    sDisplayName = sSortablePrefix + oWLCols[key].displayname + sSortableSuffix + "<b>" + sArrow + "</b>";
                                } else {
                                    sDisplayName = sSortablePrefix + oWLCols[key].displayname + sSortableSuffix;
                                }
                            } else {
                                sonClickChangeOrder = "";
                                sDisplayName = sNotSortablePrefix + oWLCols[key].displayname + sNotSortableSuffix;
                            }

                            if (key == gsSortOrderFields.Symbol) {
                                sThisTableTitleInside = sThisTableTitleInside + "<td " + gsFieldColSpanWL[key] + " style=\"width:" + oWLCols[key].width.toString() + ";text-align:" + oWLCols[key].alignheading + ";vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" +
                                    "<input xxthisWillBeReplacedxx style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + "; \" type=\"checkbox\" id=\"" + sThischkItemId + "\" name=\"" + sThischkItemId + "\" value=\"\" onclick=\"wlMarkSelectedItem(" + idxWLMain.toString() + ", " + "-1" + ")\">" +
                                    "<span " + sonClickChangeOrder + " style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + "; \">" +
                                    sDisplayName + "</span></td > ";
                            } else {
                                sThisTableTitleInside = sThisTableTitleInside + sTDSep + "<td " + gsFieldColSpanWL[key] + sonClickChangeOrder + " style=\"width:" + oWLCols[key].width.toString() + ";text-align:" + oWLCols[key].alignheading + ";vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sDisplayName + "</td>";
                            }
                        }
                    }
                }

                sThisTableTitleInside = sThisTableTitleInside + "</tr></table>";

                sThisTableTitle = sThisTableTitle + sThisTableTitleInside + "</div>" + "<div id=\"divtableInside" + sThisId + "\" style =\"" + gsReplaceTableHeightOverflow + " border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                sThisTable = "";
                sThisTable = sThisTable + "<table style=\"border-collapse:collapse; border: 0px solid black;background-color:" + gsWLTableBackgroundColor + "; width:100%;border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";

                let dTotalCost = 0.0;
                let dTotalAmt = 0.0;
                let dTotalHoldingsGain = 0.0;
                let dTotalGain = 0.0;
                let dTotalDayGain = 0.0;

                iLineCnt = 0;
                iHiddenCnt = 0;

                let oLines = [];

                if (gWLDisplayed.length > 0) {

                    gWLDisplayed.sort(sortWL);

                    for (let idxDisplayed = 0; idxDisplayed < gWLDisplayed.length; idxDisplayed++) {
                        let oWLDisplayed = new WLDisplayed();
                        oWLDisplayed = gWLDisplayed[idxDisplayed];
                        let sSymbol = oWLDisplayed.symbol;

                        let oWLItemDetail = new WLItemDetail();
                        let dCost = 0.0;
                        let dQty = 0.0;
                        let dLastPrice = 0.0;

                        for (let idxItemDetail = 0; idxItemDetail < oWLDisplayed.WLItemDetails.length; idxItemDetail++) {
                            oWLItemDetail = oWLDisplayed.WLItemDetails[idxItemDetail];
                            dLastPrice = oWLItemDetail.lastPrice;
                            let bOkToShowThisDetail = true;

                            if (bOkToShowThisDetail) {
                                if (oWLDisplayed.bHidden) {
                                    iHiddenCnt++;
                                }

                                if (!oWLDisplayed.bHidden) {
                                    iLineCnt++;
                                    let sChecked = "";
                                    let sThisidxWLItem = "";
                                    let idxThisSymbol = sSymbolsSelectedForOrderThisWL.indexOf("|" + sSymbol + sSepSelectedForOrder);
                                    let idxThisSymbolidxWLItem = sSymbolsSelectedForOrderThisWL.substring(idxThisSymbol + 1, sSymbolsSelectedForOrderThisWL.length - 1).indexOf(sSepSelectedForOrder);
                                    let idxThisSymbolselected = sSymbolsSelectedForOrderThisWL.substring(idxThisSymbolidxWLItem + idxThisSymbol + 2, sSymbolsSelectedForOrderThisWL.length - 1).indexOf(sSepSelectedForOrder);
                                    sThisidxWLItem = sSymbolsSelectedForOrderThisWL.substr(idxThisSymbol + idxThisSymbolidxWLItem + 2, idxThisSymbolselected);


                                    if (sSymbolsSelectedForOrderThisWL.substr(idxThisSymbol + idxThisSymbolidxWLItem + idxThisSymbolselected + 3, 4).toUpperCase() == "TRUE") {
                                        sChecked = "checked";
                                    } else {
                                        bEverythingIsChecked = false;
                                    }

                                    let sThisTRId = "TR" + sThisId + FormatIntegerNumber(idxWLMain, 3, "0") + FormatIntegerNumber(parseInt(sThisidxWLItem), 3, "0");
                                    if (sChecked == "checked") {
                                        sThisTable = sThisTable + "<tr id=\"" + sThisTRId + "\"  name=\"" + sThisTRId + "\" style=\"height:" + giLineHeight.toString() + "px;background-color:" + gsWLTableSelectedRowBackgroundColor + ";\">";
                                    } else {
                                        if ((iLineCnt % 2) == 0) {
                                            sThisTable = sThisTable + "<tr id=\"" + sThisTRId + "\"  name=\"" + sThisTRId + "\" style=\"height:" + giLineHeight.toString() + "px;background-color:" + gsWLTableEvenRowBackgroundColor + ";\">";
                                        } else {
                                            sThisTable = sThisTable + "<tr id=\"" + sThisTRId + "\"  name=\"" + sThisTRId + "\" style=\"height:" + giLineHeight.toString() + "px;background-color:" + gsWLTableOddRowBackgroundColor + ";\">";
                                        }
                                    }
                                    sTmp = "";
                                    let sSymbolTitle = "";

                                    if (!bDoingShared) {
                                        //P/E
                                        sTmp = FormatDecimalNumber(oWLItemDetail.peRatio, 5, 0, "");
                                        let sTitlePE = "none";
                                        if (parseFloat(sTmp) != 0.0) {
                                            sTitlePE = sTmp;
                                        }
                                        sTmp = "";
                                        if (oWLDisplayed.symbolDescription == "") {
                                            if (sTitlePE == "") {
                                                sSymbolTitle = "";
                                            } else {
                                                sSymbolTitle = " title=\"PE: " + sTitlePE + "\" ";
                                            }
                                        } else {
                                            if (sTitlePE == "") {
                                                sSymbolTitle = " title=\"" + oWLDisplayed.symbolDescription + "\" ";
                                            } else {
                                                sSymbolTitle = " title=\"" + oWLDisplayed.symbolDescription + " -- PE: " + sTitlePE + "\" ";
                                            }
                                        }
                                    }

                                    let sThischkItemId = "chkWLItem" + sThisId + FormatIntegerNumber(idxWLMain, 3, "0") + FormatIntegerNumber(parseInt(sThisidxWLItem), 3, "0");

                                    if (oWLItemDetail.shares < 0.0) {
                                        oLines[gsSortOrderFields.Symbol] = "<td " + gsFieldColSpanWL.Symbol + " style=\"" + gsFieldWidthsWL.Symbol + "text-align:" + oWLCols[gsSortOrderFields.Symbol].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" +
                                            "<input style=\"text-align:" + oWLCols[gsSortOrderFields.Symbol].aligndata + ";vertical-align:" + sTableRowVerticalAlignment + ";\" id=\"" + sThischkItemId + "\" name=\"" + sThischkItemId + "\" type=\"checkbox\" " + sChecked + " value=\"\" onclick=\"wlMarkSelectedItem(" + idxWLMain.toString() + ", " + sThisidxWLItem + ")\">" +
                                            "<span " + sSymbolTitle + "style=\"text-align:" + oWLCols[gsSortOrderFields.Symbol].aligndata + ";vertical-align:" + sTableRowVerticalAlignment + "; \">" +
                                            "<b>" + sSymbol + "</b>" + sTmp + "</span></td>";
                                    } else {
                                        oLines[gsSortOrderFields.Symbol] = "<td " + gsFieldColSpanWL.Symbol + " style=\"" + gsFieldWidthsWL.Symbol + "text-align:" + oWLCols[gsSortOrderFields.Symbol].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" +
                                            "<input style=\"text-align:" + oWLCols[gsSortOrderFields.Symbol].aligndata + ";vertical-align:" + sTableRowVerticalAlignment + ";\" id=\"" + sThischkItemId + "\" name=\"" + sThischkItemId + "\" type=\"checkbox\" " + sChecked + " value=\"\" onclick=\"wlMarkSelectedItem(" + idxWLMain.toString() + ", " + sThisidxWLItem + ")\">" +
                                            "<span " + sSymbolTitle + "style=\"text-align:" + oWLCols[gsSortOrderFields.Symbol].aligndata + ";vertical-align:" + sTableRowVerticalAlignment + "; \">" +
                                            sSymbol + sTmp + "</span></td>";
                                    }
                                }


                                if ((isUndefined(goWLDisplayed)) || (isUndefined(goWLDisplayed[sThisId + sSymbol]))) {
                                    let oT = {
                                        "symbol": sSymbol,
                                        "assetType": oWLDisplayed.assetType,
                                        "accountId": sLastWLAccountId,
                                        "accountName": "",
                                        "purchasedDate": oWLItemDetail.purchasedDate,
                                        "askPrice": oWLItemDetail.askPrice,
                                        "bidPrice": oWLItemDetail.bidPrice,
                                        "highPrice": oWLItemDetail.highPrice,
                                        "lowPrice": oWLItemDetail.lowPrice,
                                        "lastPrice": oWLItemDetail.lastPrice,
                                        "netChange": oWLItemDetail.netChange,
                                        "netPercentChangeInDouble": oWLItemDetail.netPercentChangeInDouble,
                                        "regularMarketLastPrice": oWLItemDetail.regularMarketLastPrice,
                                        "regularMarketNetChange": oWLItemDetail.regularMarketNetChange,
                                        "regularMarketPercentChangeInDouble": oWLItemDetail.regularMarketPercentChangeInDouble,
                                        "shares": oWLItemDetail.shares,
                                        "dayGain": oWLItemDetail.dayGain,
                                        "costPerShare": oWLItemDetail.costPerShare,
                                        "marketValue": oWLItemDetail.marketValue,
                                        "gain": oWLItemDetail.gain,
                                        "gainPercent": oWLItemDetail.gainPercent,
                                        "averagePrice": oWLItemDetail.averagePrice,
                                        "peRatio": oWLItemDetail.peRatio,
                                        "divAmount": oWLItemDetail.divAmount,
                                        "divDate": oWLItemDetail.divDate,
                                        "divYield": oWLItemDetail.divYield,
                                        "symbolDescription": oWLDisplayed.symbolDescription
                                    }
                                    goWLDisplayed[sThisId + sSymbol] = oT;
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.DivPercent])) {
                                    if (oWLCols[gsSortOrderFields.DivPercent].selected) {
                                        //Div Yield
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.divYield, 5, 2, "") + "%";
                                            if (goWLDisplayed[sThisId + sSymbol].divYield == oWLItemDetail.divYield) {
                                                oLines[gsSortOrderFields.DivPercent] = "<td " + gsFieldColSpanWL.DivPercent + " style=\"" + gsFieldWidthsWL.DivPercent + "text-align:" + oWLCols[gsSortOrderFields.DivPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                            } else {
                                                oLines[gsSortOrderFields.DivPercent] = "<td " + gsFieldColSpanWL.DivPercent + " style=\"" + gsFieldWidthsWL.DivPercent + "text-align:" + oWLCols[gsSortOrderFields.DivPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                goWLDisplayed[sThisId + sSymbol].divYield = oWLItemDetail.divYield;
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.Amt])) {
                                    if (oWLCols[gsSortOrderFields.Amt].selected) {
                                        //Amt
                                        sTmp = FormatDecimalNumber((oWLItemDetail.divAmount * oWLItemDetail.shares), 5, 2, "");
                                        let dAmt = parseFloat(sTmp);
                                        dTotalAmt = dTotalAmt + dAmt;
                                        if (!oWLDisplayed.bHidden) {
                                            if (dAmt == 0.0) {
                                                oLines[gsSortOrderFields.Amt] = "<td " + gsFieldColSpanWL.Amt + " style=\"" + gsFieldWidthsWL.Amt + "text-align:" + oWLCols[gsSortOrderFields.Amt].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                            } else {
                                                oLines[gsSortOrderFields.Amt] = "<td " + gsFieldColSpanWL.Amt + " style=\"" + gsFieldWidthsWL.Amt + "text-align:" + oWLCols[gsSortOrderFields.Amt].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.DivDate])) {
                                    if (oWLCols[gsSortOrderFields.DivDate].selected) {
                                        //Div Date
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = oWLItemDetail.divDate;
                                            let sTodayTD = FormatCurrentDateForTD()
                                            let sDivDate = sTmp.split(' ')[0];
                                            let dtToday = new Date(sTodayTD);
                                            let dtDiv = new Date(sDivDate);
                                            let sDivDateColor = "";
                                            if (dtDiv < dtToday) {
                                                dtDiv.setDate(dtDiv.getDate() + 90);
                                            }
                                            let iDiffDays = DateDiff.inDays(dtToday, dtDiv);
                                            if (iDiffDays == 0) {
                                                sDivDateColor = "font-weight:bold;color:white; background-color:" + gsNegativeColor + ";";
                                            } else if (iDiffDays == 1) {
                                                sDivDateColor = "font-weight:bold;color:white; background-color:" + gsNegativeColor + ";";
                                            } else if ((iDiffDays >= 2) && (iDiffDays <= 5)) {
                                                sDivDateColor = "font-weight:bold;color:white; background-color:blue;";
                                            } else if ((iDiffDays > 0) && (iDiffDays < 30)) {
                                                sDivDateColor = "font-weight:bold;color:white; background-color:green;";
                                            }

                                            if (sTmp != "") {
                                                //sTmp = "&nbsp;&nbsp;&nbsp;&nbsp;" + sTmp.split(" ")[0];
                                                sTmp = sTmp.split(" ")[0];
                                            }
                                            if (goWLDisplayed[sThisId + sSymbol].divDate == oWLItemDetail.divDate) {
                                                oLines[gsSortOrderFields.DivDate] = "<td " + gsFieldColSpanWL.DivDate + " style=\"" + sDivDateColor + gsFieldWidthsWL.DivDate + "text-align:" + oWLCols[gsSortOrderFields.DivDate].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                            } else {
                                                oLines[gsSortOrderFields.DivDate] = "<td " + gsFieldColSpanWL.DivDate + " style=\"" + sDivDateColor + gsFieldWidthsWL.DivDate + "text-align:" + oWLCols[gsSortOrderFields.DivDate].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                goWLDisplayed[sThisId + sSymbol].divDate = oWLItemDetail.divDate;
                                            }
                                        }

                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.PurchaseDate])) {
                                    if (oWLCols[gsSortOrderFields.PurchaseDate].selected) {
                                        //Acquired
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = oWLDisplayed.WLItemDetails[0].purchasedDate;
                                            //for (let idxTmp = 0; idxTmp < gWatchlists[idxWLMain].WLItems.length; idxTmp++) {
                                            //    if (gWatchlists[idxWLMain].WLItems[idxTmp].symbol == sSymbol) {
                                            //        sTmp = gWatchlists[idxWLMain].WLItems[idxTmp].purchasedDate;
                                            //        break;
                                            //    }
                                            //}
                                            if (goWLDisplayed[sThisId + sSymbol].purchasedDate == sTmp) {
                                                if (sTmp == "") {
                                                    oLines[gsSortOrderFields.PurchaseDate] = "<td " + gsFieldColSpanWL.PurchaseDate + " style=\"" + gsFieldWidthsWL.PurchaseDate + "text-align:" + oWLCols[gsSortOrderFields.PurchaseDate].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px;\">" + sAcquiredSpaces + "&nbsp;</td>";
                                                } else {
                                                    oLines[gsSortOrderFields.PurchaseDate] = "<td " + gsFieldColSpanWL.PurchaseDate + " style=\"" + gsFieldWidthsWL.PurchaseDate + "text-align:" + oWLCols[gsSortOrderFields.PurchaseDate].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px;\">" + sAcquiredSpaces + sTmp + "</td>";
                                                }
                                            } else {
                                                if (sTmp == "") {
                                                    oLines[gsSortOrderFields.PurchaseDate] = "<td " + gsFieldColSpanWL.PurchaseDate + " style=\"" + gsFieldWidthsWL.PurchaseDate + "text-align:" + oWLCols[gsSortOrderFields.PurchaseDate].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px;\">" + sAcquiredSpaces + "&nbsp;</td>";
                                                } else {
                                                    oLines[gsSortOrderFields.PurchaseDate] = "<td " + gsFieldColSpanWL.PurchaseDate + " style=\"" + gsFieldWidthsWL.PurchaseDate + "text-align:" + oWLCols[gsSortOrderFields.PurchaseDate].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px;\"><b>" + sAcquiredSpaces + sTmp + "</b></td>";
                                                }
                                                goWLDisplayed[sThisId + sSymbol].purchasedDate = sTmp;
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.CatalystDate])) {
                                    if (oWLCols[gsSortOrderFields.CatalystDate].selected) {
                                        //Catalyst
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = oWLDisplayed.WLItemDetails[0].catalystDate;
                                            //for (let idxTmp = 0; idxTmp < gWatchlists[idxWLMain].WLItems.length; idxTmp++) {
                                            //    if (gWatchlists[idxWLMain].WLItems[idxTmp].symbol == sSymbol) {
                                            //        sTmp = gWatchlists[idxWLMain].WLItems[idxTmp].catalystDate;
                                            //        break;
                                            //    }
                                            //}
                                            if (sTmp == "") {
                                                oLines[gsSortOrderFields.CatalystDate] = "<td " + gsFieldColSpanWL.CatalystDate + " style=\"" + gsFieldWidthsWL.CatalystDate + "text-align:" + oWLCols[gsSortOrderFields.CatalystDate].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + "&nbsp;</td>";
                                            } else {
                                                oLines[gsSortOrderFields.CatalystDate] = "<td " + gsFieldColSpanWL.CatalystDate + " style=\"" + gsFieldWidthsWL.CatalystDate + "text-align:" + oWLCols[gsSortOrderFields.CatalystDate].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.SymbolDescription])) {
                                    if (oWLCols[gsSortOrderFields.SymbolDescription].selected) {
                                        //Symbol Description
                                        if (!oWLDisplayed.bHidden) {
                                            let sSymbolDescriptionSpaces = "&nbsp;&nbsp;&nbsp;&nbsp;";
                                            sTmp = oWLDisplayed.symbolDescription;
                                            if (goWLDisplayed[sThisId + sSymbol].symbolDescription == sTmp) {
                                                if (sTmp == "") {
                                                    oLines[gsSortOrderFields.SymbolDescription] = "<td " + gsFieldColSpanWL.SymbolDescription + " style=\"" + gsFieldWidthsWL.SymbolDescription + "text-align:" + oWLCols[gsSortOrderFields.SymbolDescription].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sSymbolDescriptionSpaces + "&nbsp;</td>";
                                                } else {
                                                    oLines[gsSortOrderFields.SymbolDescription] = "<td " + gsFieldColSpanWL.SymbolDescription + " style=\"" + gsFieldWidthsWL.SymbolDescription + "text-align:" + oWLCols[gsSortOrderFields.SymbolDescription].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sSymbolDescriptionSpaces + sTmp + "</td>";
                                                }
                                            } else {
                                                if (sTmp == "") {
                                                    oLines[gsSortOrderFields.SymbolDescription] = "<td " + gsFieldColSpanWL.SymbolDescription + " style=\"" + gsFieldWidthsWL.SymbolDescription + "text-align:" + oWLCols[gsSortOrderFields.SymbolDescription].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sSymbolDescriptionSpaces + "&nbsp;</td>";
                                                } else {
                                                    oLines[gsSortOrderFields.SymbolDescription] = "<td " + gsFieldColSpanWL.SymbolDescription + " style=\"" + gsFieldWidthsWL.SymbolDescription + "text-align:" + oWLCols[gsSortOrderFields.SymbolDescription].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sSymbolDescriptionSpaces + sTmp + "</b></td>";
                                                }
                                                goWLDisplayed[sThisId + sSymbol].symbolDescription = sTmp;
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.Qty])) {
                                    if (oWLCols[gsSortOrderFields.Qty].selected) {
                                        //Qty
                                        sTmp = FormatDecimalNumber(oWLItemDetail.shares, 5, 0, "");
                                        dQty = parseFloat(sTmp);

                                        if (!oWLDisplayed.bHidden) {
                                            if (dQty == 0.0) {
                                                oLines[gsSortOrderFields.Qty] = "<td " + gsFieldColSpanWL.Qty + " style=\"" + gsFieldWidthsWL.Qty + "text-align:" + oWLCols[gsSortOrderFields.Qty].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                goWLDisplayed[sThisId + sSymbol].shares = dQty;
                                            } else {
                                                if (oWLItemDetail.shares < 0.0) {
                                                    oLines[gsSortOrderFields.Qty] = "<td " + gsFieldColSpanWL.Qty + " style=\"" + gsFieldWidthsWL.Qty + "text-align:" + oWLCols[gsSortOrderFields.Qty].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                    goWLDisplayed[sThisId + sSymbol].shares = dQty;
                                                } else {
                                                    if (goWLDisplayed[sThisId + sSymbol].shares == sTmp) {
                                                        if (oWLItemDetail.shares < 0.0) {
                                                            oLines[gsSortOrderFields.Qty] = "<td " + gsFieldColSpanWL.Qty + " style=\"" + gsFieldWidthsWL.Qty + "text-align:" + oWLCols[gsSortOrderFields.Qty].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                        } else {
                                                            oLines[gsSortOrderFields.Qty] = "<td " + gsFieldColSpanWL.Qty + " style=\"" + gsFieldWidthsWL.Qty + "text-align:" + oWLCols[gsSortOrderFields.Qty].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                        }
                                                    } else {
                                                        oLines[gsSortOrderFields.Qty] = "<td " + gsFieldColSpanWL.Qty + " style=\"" + gsFieldWidthsWL.Qty + "text-align:" + oWLCols[gsSortOrderFields.Qty].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                        goWLDisplayed[sThisId + sSymbol].shares = dQty;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.Price])) {
                                    if (oWLCols[gsSortOrderFields.Price].selected) {
                                        //Price
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.regularMarketLastPrice, 5, 2, "");
                                            if (goWLDisplayed[sThisId + sSymbol].regularMarketLastPrice == oWLItemDetail.regularMarketLastPrice) {
                                                oLines[gsSortOrderFields.Price] = "<td " + gsFieldColSpanWL.Price + " style=\"" + gsFieldWidthsWL.Price + "text-align:" + oWLCols[gsSortOrderFields.Price].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                            } else {
                                                oLines[gsSortOrderFields.Price] = "<td " + gsFieldColSpanWL.Price + " style=\"" + gsFieldWidthsWL.Price + "text-align:" + oWLCols[gsSortOrderFields.Price].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                goWLDisplayed[sThisId + sSymbol].regularMarketLastPrice = oWLItemDetail.regularMarketLastPrice;
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.Bid])) {
                                    if (oWLCols[gsSortOrderFields.Bid].selected) {
                                        //Bid
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.bidPrice, 5, 2, "");
                                            if (goWLDisplayed[sThisId + sSymbol].bidPrice == oWLItemDetail.bidPrice) {
                                                oLines[gsSortOrderFields.Bid] = "<td " + gsFieldColSpanWL.Bid + " style=\"" + gsFieldWidthsWL.Bid + "text-align:" + oWLCols[gsSortOrderFields.Bid].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                            } else {
                                                oLines[gsSortOrderFields.Bid] = "<td " + gsFieldColSpanWL.Bid + " style=\"" + gsFieldWidthsWL.Bid + "text-align:" + oWLCols[gsSortOrderFields.Bid].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                goWLDisplayed[sThisId + sSymbol].bidPrice = oWLItemDetail.bidPrice;
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.Ask])) {
                                    if (oWLCols[gsSortOrderFields.Ask].selected) {
                                        //Ask
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.askPrice, 5, 2, "");
                                            if (goWLDisplayed[sThisId + sSymbol].askPrice == oWLItemDetail.askPrice) {
                                                oLines[gsSortOrderFields.Ask] = "<td " + gsFieldColSpanWL.Ask + " style=\"" + gsFieldWidthsWL.Ask + "text-align:" + oWLCols[gsSortOrderFields.Ask].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                            } else {
                                                oLines[gsSortOrderFields.Ask] = "<td " + gsFieldColSpanWL.Ask + " style=\"" + gsFieldWidthsWL.Ask + "text-align:" + oWLCols[gsSortOrderFields.Ask].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                goWLDisplayed[sThisId + sSymbol].askPrice = oWLItemDetail.askPrice;
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.ChgPercent])) {
                                    if (oWLCols[gsSortOrderFields.ChgPercent].selected) {
                                        //ChgPercent
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.regularMarketPercentChangeInDouble, 5, 2, "") + "%";
                                            if (goWLDisplayed[sThisId + sSymbol].regularMarketPercentChangeInDouble == oWLItemDetail.regularMarketPercentChangeInDouble) {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    oLines[gsSortOrderFields.ChgPercent] = "<td " + gsFieldColSpanWL.ChgPercent + " style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.ChgPercent + "text-align:" + oWLCols[gsSortOrderFields.ChgPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    oLines[gsSortOrderFields.ChgPercent] = "<td " + gsFieldColSpanWL.ChgPercent + " style=\"color:green;" + gsFieldWidthsWL.ChgPercent + "text-align:" + oWLCols[gsSortOrderFields.ChgPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                } else {
                                                    oLines[gsSortOrderFields.ChgPercent] = "<td " + gsFieldColSpanWL.ChgPercent + " style=\"" + gsFieldWidthsWL.ChgPercent + "text-align:" + oWLCols[gsSortOrderFields.ChgPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    oLines[gsSortOrderFields.ChgPercent] = "<td " + gsFieldColSpanWL.ChgPercent + " style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.ChgPercent + "text-align:" + oWLCols[gsSortOrderFields.ChgPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    oLines[gsSortOrderFields.ChgPercent] = "<td " + gsFieldColSpanWL.ChgPercent + " style=\"color:green;" + gsFieldWidthsWL.ChgPercent + "text-align:" + oWLCols[gsSortOrderFields.ChgPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                } else {
                                                    oLines[gsSortOrderFields.ChgPercent] = "<td " + gsFieldColSpanWL.ChgPercent + " style=\"" + gsFieldWidthsWL.ChgPercent + "text-align:" + oWLCols[gsSortOrderFields.ChgPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                                goWLDisplayed[sThisId + sSymbol].regularMarketPercentChangeInDouble = oWLItemDetail.regularMarketPercentChangeInDouble;
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.ChgDollar])) {
                                    if (oWLCols[gsSortOrderFields.ChgDollar].selected) {
                                        //ChgDollar
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.regularMarketNetChange, 5, 2, "");
                                            if (goWLDisplayed[sThisId + sSymbol].regularMarketNetChange == oWLItemDetail.regularMarketNetChange) {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    oLines[gsSortOrderFields.ChgDollar] = "<td " + gsFieldColSpanWL.ChgDollar + " style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.ChgDollar + "text-align:" + oWLCols[gsSortOrderFields.ChgDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    oLines[gsSortOrderFields.ChgDollar] = "<td " + gsFieldColSpanWL.ChgDollar + " style=\"color:green;" + gsFieldWidthsWL.ChgDollar + "text-align:" + oWLCols[gsSortOrderFields.ChgDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                } else {
                                                    oLines[gsSortOrderFields.ChgDollar] = "<td " + gsFieldColSpanWL.ChgDollar + " style=\"" + gsFieldWidthsWL.ChgDollar + "text-align:" + oWLCols[gsSortOrderFields.ChgDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    oLines[gsSortOrderFields.ChgDollar] = "<td " + gsFieldColSpanWL.ChgDollar + " style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.ChgDollar + "text-align:" + oWLCols[gsSortOrderFields.ChgDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    oLines[gsSortOrderFields.ChgDollar] = "<td " + gsFieldColSpanWL.ChgDollar + " style=\"color:green;" + gsFieldWidthsWL.ChgDollar + "text-align:" + oWLCols[gsSortOrderFields.ChgDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                } else {
                                                    oLines[gsSortOrderFields.ChgDollar] = "<td " + gsFieldColSpanWL.ChgDollar + " style=\"" + gsFieldWidthsWL.ChgDollar + "text-align:" + oWLCols[gsSortOrderFields.ChgDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                                goWLDisplayed[sThisId + sSymbol].regularMarketNetChange = oWLItemDetail.regularMarketNetChange;
                                            }
                                        }
                                    }
                                }

                                sTmp = FormatDecimalNumber(oWLItemDetail.dayGain, 5, 2, "");
                                dTotalDayGain = dTotalDayGain + parseFloat(sTmp);

                                //DayGain
                                if (!oWLDisplayed.bHidden) {
                                    if (goWLDisplayed[sThisId + sSymbol].dayGain == oWLItemDetail.dayGain) {
                                        if (parseFloat(sTmp) < 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.DayGain])) {
                                                if (oWLCols[gsSortOrderFields.DayGain].selected) {
                                                    oLines[gsSortOrderFields.DayGain] = "<td " + gsFieldColSpanWL.DayGain + " style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.DayGain + "text-align:" + oWLCols[gsSortOrderFields.DayGain].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                }
                                            }
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsDownDay++;
                                            }
                                        } else if (parseFloat(sTmp) > 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.DayGain])) {
                                                if (oWLCols[gsSortOrderFields.DayGain].selected) {
                                                    oLines[gsSortOrderFields.DayGain] = "<td " + gsFieldColSpanWL.DayGain + " style=\"color:green;" + gsFieldWidthsWL.DayGain + "text-align:" + oWLCols[gsSortOrderFields.DayGain].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                }
                                            }
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsUpDay++;
                                            }
                                        } else {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.DayGain])) {
                                                if (oWLCols[gsSortOrderFields.DayGain].selected) {
                                                    oLines[gsSortOrderFields.DayGain] = "<td " + gsFieldColSpanWL.DayGain + " style=\"" + gsFieldWidthsWL.DayGain + "text-align:" + oWLCols[gsSortOrderFields.DayGain].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                            }
                                        }
                                    } else {
                                        if (parseFloat(sTmp) < 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.DayGain])) {
                                                if (oWLCols[gsSortOrderFields.DayGain].selected) {
                                                    oLines[gsSortOrderFields.DayGain] = "<td " + gsFieldColSpanWL.DayGain + " style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.DayGain + "text-align:" + oWLCols[gsSortOrderFields.DayGain].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                }
                                            }
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsDownDay++;
                                            }
                                        } else if (parseFloat(sTmp) > 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.DayGain])) {
                                                if (oWLCols[gsSortOrderFields.DayGain].selected) {
                                                    oLines[gsSortOrderFields.DayGain] = "<td " + gsFieldColSpanWL.DayGain + " style=\"color:green;" + gsFieldWidthsWL.DayGain + "text-align:" + oWLCols[gsSortOrderFields.DayGain].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                }
                                            }
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsUpDay++;
                                            }
                                        } else {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.DayGain])) {
                                                if (oWLCols[gsSortOrderFields.DayGain].selected) {
                                                    oLines[gsSortOrderFields.DayGain] = "<td " + gsFieldColSpanWL.DayGain + " style=\"" + gsFieldWidthsWL.DayGain + "text-align:" + oWLCols[gsSortOrderFields.DayGain].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                            }
                                        }
                                        goWLDisplayed[sThisId + sSymbol].dayGain = oWLItemDetail.dayGain;
                                    }
                                } else {
                                    if (goWLDisplayed[sThisId + sSymbol].dayGain == oWLItemDetail.dayGain) {
                                        if (parseFloat(sTmp) < 0.0) {
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsDownDay++;
                                            }
                                        } else if (parseFloat(sTmp) > 0.0) {
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsUpDay++;
                                            }
                                        }
                                    } else {
                                        if (parseFloat(sTmp) < 0.0) {
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsDownDay++;
                                            }
                                        } else if (parseFloat(sTmp) > 0.0) {
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsUpDay++;
                                            }
                                        }
                                        goWLDisplayed[sThisId + sSymbol].dayGain = oWLItemDetail.dayGain;
                                    }
                                }

                                //GainDollar
                                sTmp = FormatDecimalNumber(oWLItemDetail.gain, 5, 2, "");
                                if (!oWLDisplayed.bHidden) {
                                    if (goWLDisplayed[sThisId + sSymbol].gain == oWLItemDetail.gain) {
                                        if (parseFloat(sTmp) < 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GainDollar])) {
                                                if (oWLCols[gsSortOrderFields.GainDollar].selected) {
                                                    oLines[gsSortOrderFields.GainDollar] = "<td " + gsFieldColSpanWL.GainDollar + " style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.GainDollar + "text-align:" + oWLCols[gsSortOrderFields.GainDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                }
                                            }
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsDown++;
                                            }
                                        } else if (parseFloat(sTmp) > 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GainDollar])) {
                                                if (oWLCols[gsSortOrderFields.GainDollar].selected) {
                                                    oLines[gsSortOrderFields.GainDollar] = "<td " + gsFieldColSpanWL.GainDollar + " style=\"color:green;" + gsFieldWidthsWL.GainDollar + "text-align:" + oWLCols[gsSortOrderFields.GainDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                }
                                            }
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsUp++;
                                            }
                                        } else {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GainDollar])) {
                                                if (oWLCols[gsSortOrderFields.GainDollar].selected) {
                                                    oLines[gsSortOrderFields.GainDollar] = "<td " + gsFieldColSpanWL.GainDollar + " style=\"" + gsFieldWidthsWL.GainDollar + "text-align:" + oWLCols[gsSortOrderFields.GainDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                            }
                                        }
                                    } else {
                                        if (parseFloat(sTmp) < 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GainDollar])) {
                                                if (oWLCols[gsSortOrderFields.GainDollar].selected) {
                                                    oLines[gsSortOrderFields.GainDollar] = "<td " + gsFieldColSpanWL.GainDollar + " style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.GainDollar + "text-align:" + oWLCols[gsSortOrderFields.GainDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                }
                                            }
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsDown++;
                                            }
                                        } else if (parseFloat(sTmp) > 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GainDollar])) {
                                                if (oWLCols[gsSortOrderFields.GainDollar].selected) {
                                                    oLines[gsSortOrderFields.GainDollar] = "<td " + gsFieldColSpanWL.GainDollar + " style=\"color:green;" + gsFieldWidthsWL.GainDollar + "text-align:" + oWLCols[gsSortOrderFields.GainDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                }
                                            }
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsUp++;
                                            }
                                        } else {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GainDollar])) {
                                                if (oWLCols[gsSortOrderFields.GainDollar].selected) {
                                                    oLines[gsSortOrderFields.GainDollar] = "<td " + gsFieldColSpanWL.GainDollar + " style=\"" + gsFieldWidthsWL.GainDollar + "text-align:" + oWLCols[gsSortOrderFields.GainDollar].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                            }
                                        }
                                        goWLDisplayed[sThisId + sSymbol].gain = oWLItemDetail.gain;
                                    }
                                } else {
                                    if (goWLDisplayed[sThisId + sSymbol].gain == oWLItemDetail.gain) {
                                        if (parseFloat(sTmp) < 0.0) {
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsDown++;
                                            }
                                        } else if (parseFloat(sTmp) > 0.0) {
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsUp++;
                                            }
                                        }
                                    } else {
                                        if (parseFloat(sTmp) < 0.0) {
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsDown++;
                                            }
                                        } else if (parseFloat(sTmp) > 0.0) {
                                            if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                iTotalSymbolsUp++;
                                            }
                                        }
                                        goWLDisplayed[sThisId + sSymbol].gain = oWLItemDetail.gain;
                                    }
                                }
                                //dTotalGain = dTotalGain + parseFloat(sTmp);
                                dTotalHoldingsGain = dTotalHoldingsGain + parseFloat(sTmp);

                                if (!isUndefined(oWLCols[gsSortOrderFields.GainPercent])) {
                                    if (oWLCols[gsSortOrderFields.GainPercent].selected) {
                                        //GainPercent
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.gainPercent, 5, 2, "") + "%";
                                            if (goWLDisplayed[sThisId + sSymbol].gainPercent == oWLItemDetail.gainPercent) {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    oLines[gsSortOrderFields.GainPercent] = "<td " + gsFieldColSpanWL.GainPercent + " style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.GainPercent + "text-align:" + oWLCols[gsSortOrderFields.GainPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    oLines[gsSortOrderFields.GainPercent] = "<td " + gsFieldColSpanWL.GainPercent + " style=\"color:green;" + gsFieldWidthsWL.GainPercent + "text-align:" + oWLCols[gsSortOrderFields.GainPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                } else {
                                                    oLines[gsSortOrderFields.GainPercent] = "<td " + gsFieldColSpanWL.GainPercent + " style=\"" + gsFieldWidthsWL.GainPercent + "text-align:" + oWLCols[gsSortOrderFields.GainPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    oLines[gsSortOrderFields.GainPercent] = "<td " + gsFieldColSpanWL.GainPercent + " style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.GainPercent + "text-align:" + oWLCols[gsSortOrderFields.GainPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    oLines[gsSortOrderFields.GainPercent] = "<td " + gsFieldColSpanWL.GainPercent + " style=\"color:green;" + gsFieldWidthsWL.GainPercent + "text-align:" + oWLCols[gsSortOrderFields.GainPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                } else {
                                                    oLines[gsSortOrderFields.GainPercent] = "<td " + gsFieldColSpanWL.GainPercent + " style=\"" + gsFieldWidthsWL.GainPercent + "text-align:" + oWLCols[gsSortOrderFields.GainPercent].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                                goWLDisplayed[sThisId + sSymbol].gainPercent = oWLItemDetail.gainPercent;
                                            }
                                        }
                                    }
                                }

                                //Cost
                                sTmp = FormatDecimalNumber(oWLItemDetail.costPerShare, 5, 2, "");
                                dCost = parseFloat(sTmp);
                                if (!isUndefined(oWLCols[gsSortOrderFields.CostPerShare])) {
                                    if (oWLCols[gsSortOrderFields.CostPerShare].selected) {

                                        if (!oWLDisplayed.bHidden) {
                                            if (goWLDisplayed[sThisId + sSymbol].costPerShare == oWLItemDetail.costPerShare) {
                                                if (dCost == 0.0) {
                                                    if (dQty == 0.0) {
                                                        oLines[gsSortOrderFields.CostPerShare] = "<td " + gsFieldColSpanWL.CostPerShare + " style=\"" + gsFieldWidthsWL.CostPerShare + "text-align:" + oWLCols[gsSortOrderFields.CostPerShare].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sLine2InitSpaces + "&nbsp;</td>";
                                                    } else {
                                                        oLines[gsSortOrderFields.CostPerShare] = "<td " + gsFieldColSpanWL.CostPerShare + " style=\"" + gsFieldWidthsWL.CostPerShare + "text-align:" + oWLCols[gsSortOrderFields.CostPerShare].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sLine2InitSpaces + "???</td>";
                                                    }
                                                } else {
                                                    oLines[gsSortOrderFields.CostPerShare] = "<td " + gsFieldColSpanWL.CostPerShare + " style=\"" + gsFieldWidthsWL.CostPerShare + "text-align:" + oWLCols[gsSortOrderFields.CostPerShare].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sLine2InitSpaces + sTmp + "</td>";
                                                }
                                            } else {
                                                if (dCost == 0.0) {
                                                    if (dQty == 0.0) {
                                                        oLines[gsSortOrderFields.CostPerShare] = "<td " + gsFieldColSpanWL.CostPerShare + " style=\"" + gsFieldWidthsWL.CostPerShare + "text-align:" + oWLCols[gsSortOrderFields.CostPerShare].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sLine2InitSpaces + "&nbsp;</td>";
                                                    } else {
                                                        oLines[gsSortOrderFields.CostPerShare] = "<td " + gsFieldColSpanWL.CostPerShare + " style=\"" + gsFieldWidthsWL.CostPerShare + "text-align:" + oWLCols[gsSortOrderFields.CostPerShare].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sLine2InitSpaces + "???</b></td>";
                                                    }
                                                } else {
                                                    oLines[gsSortOrderFields.CostPerShare] = "<td " + gsFieldColSpanWL.CostPerShare + " style=\"" + gsFieldWidthsWL.CostPerShare + "text-align:" + oWLCols[gsSortOrderFields.CostPerShare].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sLine2InitSpaces + sTmp + "</b></td>";
                                                }
                                                goWLDisplayed[sThisId + sSymbol].costPerShare = oWLItemDetail.costPerShare;
                                            }
                                        }
                                    }
                                }
                                dTotalCost = dTotalCost + (dCost * dQty);

                                //G/L
                                let sGLOnclick = "onclick=\"ShowAutoUpdateDates('" + gWatchlists[idxWLMain].accountId + "', '" + sSymbol + "', " + oWLItemDetail.GLUpdateStartDate.toString() + ", " + oWLItemDetail.GLUpdateDate.toString() + ", " + oWLItemDetail.averagePrice.toString() + ", " + dQty.toString() + ", " + dLastPrice.toString() + ", " + oWLItemDetail.oldgl + ") \" ";

                                let dTmpOrig = 0.0;
                                dTmpOrig = oWLItemDetail.averagePrice;
                                if (dQty > 0) {
                                    dTmpOrig = dTmpOrig + (dQty * dLastPrice);
                                }

                                dTmpOrig = dTmpOrig + oWLItemDetail.oldgl;

                                sTmp = FormatDecimalNumber(dTmpOrig, 5, 2, "");
                                let dTmp = parseFloat(sTmp);
                                dTotalGain = dTotalGain + dTmp;
                                if (dTmp == 0) {
                                    sTmp = "";
                                }
                                if (!oWLDisplayed.bHidden) {
                                    if (goWLDisplayed[sThisId + sSymbol].averagePrice == dTmpOrig) {
                                        if (dTmp < 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GL])) {
                                                if (oWLCols[gsSortOrderFields.GL].selected) {
                                                    oLines[gsSortOrderFields.GL] = "<td " + gsFieldColSpanWL.GL + sGLOnclick + "style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.GL + "text-align:" + oWLCols[gsSortOrderFields.GL].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                }
                                            }
                                            iTotalSymbolsDownRealized++;
                                        } else if (dTmp > 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GL])) {
                                                if (oWLCols[gsSortOrderFields.GL].selected) {
                                                    oLines[gsSortOrderFields.GL] = "<td " + gsFieldColSpanWL.GL + sGLOnclick + "style=\"color:green;" + gsFieldWidthsWL.GL + "text-align:" + oWLCols[gsSortOrderFields.GL].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                }
                                            }
                                            iTotalSymbolsUpRealized++;
                                        } else {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GL])) {
                                                if (oWLCols[gsSortOrderFields.GL].selected) {
                                                    oLines[gsSortOrderFields.GL] = "<td " + gsFieldColSpanWL.GL + " style=\"" + gsFieldWidthsWL.GL + "text-align:" + oWLCols[gsSortOrderFields.GL].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                            }
                                        }
                                    } else {
                                        if (dTmp < 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GL])) {
                                                if (oWLCols[gsSortOrderFields.GL].selected) {
                                                    oLines[gsSortOrderFields.GL] = "<td  " + gsFieldColSpanWL.GL + sGLOnclick + "style=\"color:" + gsNegativeColor + ";" + gsFieldWidthsWL.GL + "text-align:" + oWLCols[gsSortOrderFields.GL].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                }
                                            }
                                            iTotalSymbolsDownRealized++;
                                        } else if (dTmp > 0.0) {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GL])) {
                                                if (oWLCols[gsSortOrderFields.GL].selected) {
                                                    oLines[gsSortOrderFields.GL] = "<td  " + gsFieldColSpanWL.GL + sGLOnclick + "style=\"color:green;" + gsFieldWidthsWL.GL + "text-align:" + oWLCols[gsSortOrderFields.GL].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                }
                                            }
                                            iTotalSymbolsUpRealized++;
                                        } else {
                                            if (!isUndefined(oWLCols[gsSortOrderFields.GL])) {
                                                if (oWLCols[gsSortOrderFields.GL].selected) {
                                                    oLines[gsSortOrderFields.GL] = "<td " + gsFieldColSpanWL.GL + " style=\"" + gsFieldWidthsWL.GL + "text-align:" + oWLCols[gsSortOrderFields.GL].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                }
                                            }
                                        }
                                        goWLDisplayed[sThisId + sSymbol].averagePrice = dTmpOrig;
                                    }
                                } else {
                                    if (goWLDisplayed[sThisId + sSymbol].averagePrice == dTmpOrig) {
                                        if (dTmp < 0.0) {
                                            iTotalSymbolsDownRealized++;
                                        } else if (dTmp > 0.0) {
                                            iTotalSymbolsUpRealized++;
                                        }
                                    } else {
                                        if (dTmp < 0.0) {
                                            iTotalSymbolsDownRealized++;
                                        } else if (dTmp > 0.0) {
                                            iTotalSymbolsUpRealized++;
                                        }
                                        goWLDisplayed[sThisId + sSymbol].averagePrice = dTmpOrig;
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.MktValue])) {
                                    if (oWLCols[gsSortOrderFields.MktValue].selected) {
                                        //Mkt Value
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.marketValue, 5, 2, "");
                                            if (goWLDisplayed[sThisId + sSymbol].marketValue == oWLItemDetail.marketValue) {
                                                if (parseFloat(sTmp) == 0.0) {
                                                    oLines[gsSortOrderFields.MktValue] = "<td " + gsFieldColSpanWL.MktValue + " style=\"" + gsFieldWidthsWL.MktValue + "text-align:" + oWLCols[gsSortOrderFields.MktValue].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                } else {
                                                    oLines[gsSortOrderFields.MktValue] = "<td " + gsFieldColSpanWL.MktValue + " style=\"" + gsFieldWidthsWL.MktValue + "text-align:" + oWLCols[gsSortOrderFields.MktValue].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                }
                                            } else {
                                                if (parseFloat(sTmp) == 0.0) {
                                                    oLines[gsSortOrderFields.MktValue] = "<td " + gsFieldColSpanWL.MktValue + " style=\"" + gsFieldWidthsWL.MktValue + "text-align:" + oWLCols[gsSortOrderFields.MktValue].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                                } else {
                                                    oLines[gsSortOrderFields.MktValue] = "<td " + gsFieldColSpanWL.MktValue + " style=\"" + gsFieldWidthsWL.MktValue + "text-align:" + oWLCols[gsSortOrderFields.MktValue].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                }
                                                goWLDisplayed[sThisId + sSymbol].marketValue = oWLItemDetail.marketValue;
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.OldGL])) {
                                    if (oWLCols[gsSortOrderFields.OldGL].selected) {
                                        //OldGL Value
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.oldgl, 5, 2, "");
                                            if (parseFloat(sTmp) == 0.0) {
                                                oLines[gsSortOrderFields.OldGL] = "<td " + gsFieldColSpanWL.OldGL + " style=\"" + gsFieldWidthsWL.OldGL + "text-align:" + oWLCols[gsSortOrderFields.OldGL].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                            } else {
                                                oLines[gsSortOrderFields.OldGL] = "<td " + gsFieldColSpanWL.OldGL + " style=\"" + gsFieldWidthsWL.OldGL + "text-align:" + oWLCols[gsSortOrderFields.OldGL].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.High])) {
                                    if (oWLCols[gsSortOrderFields.High].selected) {
                                        //High Value
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.highPrice, 5, 2, "");
                                            if (parseFloat(sTmp) == 0.0) {
                                                oLines[gsSortOrderFields.High] = "<td " + gsFieldColSpanWL.High + " style=\"" + gsFieldWidthsWL.High + "text-align:" + oWLCols[gsSortOrderFields.High].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                            } else {
                                                oLines[gsSortOrderFields.High] = "<td " + gsFieldColSpanWL.High + " style=\"" + gsFieldWidthsWL.High + "text-align:" + oWLCols[gsSortOrderFields.High].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.Low])) {
                                    if (oWLCols[gsSortOrderFields.Low].selected) {
                                        //Low Value
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.lowPrice, 5, 2, "");
                                            if (parseFloat(sTmp) == 0.0) {
                                                oLines[gsSortOrderFields.Low] = "<td " + gsFieldColSpanWL.Low + " style=\"" + gsFieldWidthsWL.Low + "text-align:" + oWLCols[gsSortOrderFields.Low].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                            } else {
                                                oLines[gsSortOrderFields.Low] = "<td " + gsFieldColSpanWL.Low + " style=\"" + gsFieldWidthsWL.Low + "text-align:" + oWLCols[gsSortOrderFields.Low].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                            }
                                        }
                                    }
                                }

                                if (!isUndefined(oWLCols[gsSortOrderFields.PE])) {
                                    if (oWLCols[gsSortOrderFields.PE].selected) {
                                        //PE
                                        if (!oWLDisplayed.bHidden) {
                                            sTmp = FormatDecimalNumber(oWLItemDetail.peRatio, 5, 0, "");
                                            if (parseFloat(sTmp) == 0.0) {
                                                oLines[gsSortOrderFields.PE] = "<td " + gsFieldColSpanWL.PE + " style=\"" + gsFieldWidthsWL.PE + "text-align:" + oWLCols[gsSortOrderFields.PE].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                            } else {
                                                oLines[gsSortOrderFields.PE] = "<td " + gsFieldColSpanWL.PE + " style=\"" + gsFieldWidthsWL.PE + "text-align:" + oWLCols[gsSortOrderFields.PE].aligndata + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                            }
                                        }
                                    }
                                }

                                if (!oWLDisplayed.bHidden) {
                                    let sThisColSep = "";
                                    for (let key in oWLCols) {
                                        if (oWLCols.hasOwnProperty(key)) {
                                            if (oWLCols[key].selected) {
                                                sThisTable = sThisTable + sThisColSep + oLines[key];
                                                sThisColSep = sTDSep;
                                            }
                                        }
                                    }
                                    sThisTable = sThisTable + "</tr>";
                                }
                                //    iLineCnt++;
                            }
                        }
                    }

                }

                if (sThisTable != "") {
                    let sPrecedingSpaces = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                    if (bDoingAccountWL) {
                        sPrecedingSpaces = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                    }

                    sThisTableTotals = "<div id=\"divtableTotals" + sThisId + "\" style =\"border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    sThisTableTotalsInside = "<table style=\"border-collapse:collapse; border: 0px solid black;background-color:" + gsWLTableBackgroundColor + "; width:100%;border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";

                    sThisTableTotalsInside = sThisTableTotalsInside + "<tr>";
                    sThisTableTotalsInside = sThisTableTotalsInside + "<td style=\"height:30px; text-align:center;vertical-align:middle;border-top-width:1px; border-bottom-width:0px; border-left-width:0px; border-right-width:0px; border-style:solid;border-spacing:1px;border-color:Black\"><b>";

                    if (bDoingShared) {
                        sThisTableTotalsInside = sThisTableTotalsInside + "&nbsp;";
                    } else {
                        if ((iLineCnt + iHiddenCnt) != gWatchlists[idxWLMain].WLItems.length) {
                            return;
                        } else {
                            sThisTableTotalsInside = sThisTableTotalsInside + "<I>Day</I>";
                        }
                        sThisTableTotalsInside = sThisTableTotalsInside + "&nbsp;&nbsp;<span style=\"color:green\">" + iTotalSymbolsUpDay.toString() + "</span>:" +
                            "<span style=\"color:" + gsNegativeColor + "\">" + iTotalSymbolsDownDay.toString() + "</span>";

                        sThisTableTotalsInside = sThisTableTotalsInside + "&nbsp;&nbsp;&nbsp;Cost:&nbsp;";
                        sTmp = FormatDecimalNumber(dTotalCost, 5, 2, "");
                        sThisTableTotalsInside = sThisTableTotalsInside + sTmp;

                        sThisTableTotalsInside = sThisTableTotalsInside + "&nbsp;&nbsp;&nbsp;G/L:&nbsp;";
                        sTmp = FormatDecimalNumber(dTotalDayGain, 5, 2, "");
                        if (dTotalDayGain < 0.0) {
                            sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:" + gsNegativeColor + ";\">" + sTmp + "</span>";
                        } else {
                            sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:green;\">" + sTmp + "</span>";
                        }
                        sThisTableTotalsInside = sThisTableTotalsInside + "&nbsp;&nbsp;&nbsp;&nbsp;";
                        if (dTotalCost == 0) {
                            sTmp = "0.00";
                        } else {
                            sTmp = FormatDecimalNumber((dTotalDayGain / dTotalCost) * 100, 5, 2, "");
                        }
                        if (dTotalDayGain < 0.0) {
                            sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:" + gsNegativeColor + ";\">" + sTmp + "%</span>";
                        } else {
                            sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:green;\">" + sTmp + "%</span>";
                        }


                        sThisTableTotalsInside = sThisTableTotalsInside + sPrecedingSpaces + "<I>Holding</I>&nbsp;&nbsp;&nbsp;" +
                            "<span style=\"color:green\">" + iTotalSymbolsUp.toString() + "</span>:" +
                            "<span style=\"color:" + gsNegativeColor + "\">" + iTotalSymbolsDown.toString() + "</span>&nbsp;&nbsp;G/L:&nbsp; ";

                        sTmp = FormatDecimalNumber(dTotalHoldingsGain, 5, 2, "");
                        if (dTotalHoldingsGain < 0.0) {
                            sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:" + gsNegativeColor + ";\">" + sTmp + "</span>";
                        } else {
                            sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:green;\">" + sTmp + "</span>";
                        }
                        sThisTableTotalsInside = sThisTableTotalsInside + "&nbsp;&nbsp;&nbsp;&nbsp;";
                        if (dTotalCost == 0) {
                            sTmp = "0.00";
                        } else {
                            sTmp = FormatDecimalNumber((dTotalHoldingsGain / dTotalCost) * 100, 5, 2, "");
                        }
                        if (dTotalHoldingsGain < 0.0) {
                            sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:" + gsNegativeColor + ";\">" + sTmp + "%</span>";
                        } else {
                            sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:green;\">" + sTmp + "%</span>";
                        }
                        if (bDoingAccountWL) {
                            for (let idxAccount = 0; idxAccount < gAccounts.length; idxAccount++) {
                                if (gWatchlists[idxWLMain].accountId == gAccounts[idxAccount].accountId) {
                                    //this.IBliquidationValue = 0.0;
                                    //this.CBliquidationValue = 0.0;
                                    //this.CBcashBalance = 0.0;
                                    if (gAccounts[idxAccount].CBliquidationValue != 0) {
                                        sThisTableTotalsInside = sThisTableTotalsInside + "&nbsp;&nbsp;&nbsp;Cash:&nbsp;";
                                        let dCashPercentage = gAccounts[idxAccount].CBcashBalance / gAccounts[idxAccount].CBliquidationValue;
                                        sTmp = FormatDecimalNumber(dCashPercentage * 100, 5, 2, "");
                                        if (dCashPercentage < 0.0) {
                                            sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:" + gsNegativeColor + ";\">" + sTmp + "%</span>";
                                        } else {
                                            sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:green;\">" + sTmp + "%</span>";
                                        }

                                        //    sThisTable = sThisTable + sPrecedingSpaces + "<I>Account</I>";
                                        //    sThisTable = sThisTable + "&nbsp;&nbsp;Up:&nbsp;<span style=\"color:green\">" + iTotalSymbolsUp.toString() + "</span>";
                                        //    sThisTable = sThisTable + "&nbsp;&nbsp;Down:&nbsp;<span style=\"color:" + gsNegativeColor + "\">" + iTotalSymbolsDown.toString() + "</span>";
                                    }
                                }
                            }
                        } else {
                            if (bDoingDividendWL) {
                                sThisTableTotalsInside = sThisTableTotalsInside + sPrecedingSpaces + "<I>Total</I>&nbsp;&nbsp;" +
                                    "<span style=\"color:green\">" + iTotalSymbolsUpRealized.toString() + "</span>:" +
                                    "<span style=\"color:" + gsNegativeColor + "\">" + iTotalSymbolsDownRealized.toString() + "</span>";
                                sThisTableTotalsInside = sThisTableTotalsInside + "&nbsp;&nbsp;G/L:&nbsp;";
                                sTmp = FormatDecimalNumber(dTotalGain, 5, 2, "");
                                if (dTotalGain < 0.0) {
                                    sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:" + gsNegativeColor + ";\">" + sTmp + "</span>";
                                } else {
                                    sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:green;\">" + sTmp + "</span>";
                                }
                                sThisTableTotalsInside = sThisTableTotalsInside + "&nbsp;&nbsp;&nbsp;Amt:&nbsp;";
                                sTmp = FormatDecimalNumber(dTotalAmt, 5, 2, "");
                                sThisTableTotalsInside = sThisTableTotalsInside + sTmp;

                                sThisTableTotalsInside = sThisTableTotalsInside + "&nbsp;&nbsp;&nbsp;&nbsp;Rate:&nbsp;";
                                if (dTotalCost == 0) {
                                    sTmp = "0.00%";
                                } else {
                                    sTmp = FormatDecimalNumber((dTotalAmt / dTotalCost) * 100 * 4, 5, 2, "") + "%";
                                }
                                sThisTableTotalsInside = sThisTableTotalsInside + sTmp;
                            } else {
                                sThisTableTotalsInside = sThisTableTotalsInside + sPrecedingSpaces + "<I>Total</I>&nbsp;&nbsp;" +
                                    "<span style=\"color:green\">" + iTotalSymbolsUpRealized.toString() + "</span>:" +
                                    "<span style=\"color:" + gsNegativeColor + "\">" + iTotalSymbolsDownRealized.toString() + "</span>";
                                sThisTableTotalsInside = sThisTableTotalsInside + "&nbsp;&nbsp;G/L:&nbsp;";
                                sTmp = FormatDecimalNumber(dTotalGain, 5, 2, "");
                                if (dTotalGain < 0.0) {
                                    sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:" + gsNegativeColor + ";\">" + sTmp + "</span>";
                                } else {
                                    sThisTableTotalsInside = sThisTableTotalsInside + "<span style=\"color:green;\">" + sTmp + "</span>";
                                }
                            }
                            //    sThisTable = sThisTable + "&nbsp;&nbsp;&nbsp;Up:&nbsp;<span style=\"color:green\">" + iTotalSymbolsUp.toString() + "</span>";
                            //    sThisTable = sThisTable + "&nbsp;&nbsp;Down:&nbsp;<span style=\"color:" + gsNegativeColor + "\">" + iTotalSymbolsDown.toString() + "</span>";
                        }
                    }
                    sThisTableTotalsInside = sThisTableTotalsInside + "</b></td></tr></table>";

                    sThisTableTotals = sThisTableTotals + sThisTableTotalsInside + "</div>";


                    if (bEverythingIsChecked) {
                        sThisTableTitleInside = sThisTableTitleInside.replace("xxthisWillBeReplacedxx", "checked");
                        sThisTableTitle = sThisTableTitle.replace("xxthisWillBeReplacedxx", "checked");
                    } else {
                        sThisTableTitleInside = sThisTableTitleInside.replace("xxthisWillBeReplacedxx", "");
                        sThisTableTitle = sThisTableTitle.replace("xxthisWillBeReplacedxx", "");
                    }

                    if ((iLineCnt > giLineLimit) && (!gWatchlists[idxWLMain].bShowMaximized)) {
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflow, gsTableHeightOverflow);
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflowTitle, gsTableHeightOverflowTitle);
                        sThisDiv = sThisDiv.replace("xxximgMaxRestorexxx", gsMaximizeWindowImg);
                        sThisDiv = sThisDiv.replace("yyyimgMaxRestoreyyy", "Maximize");
                    } else {
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflow, "");
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflowTitle, "");
                        sThisDiv = sThisDiv.replace("xxximgMaxRestorexxx", gsRestoreWindowImg);
                        sThisDiv = sThisDiv.replace("yyyimgMaxRestoreyyy", "Restore");
                    }

                    sThisDiv = sThisDiv + sThisTableTitle + sThisTable + "</table></div></div>" + sThisTableTotals + "</td></tr></table></div>";

                }
                if (gWatchlists[idxWLMain].spanName == "") {
                    gWatchlists[idxWLMain].spanName = gWatchlists[idxWLMain].watchlistId + gWatchlists[idxWLMain].accountId;
                    sThisDiv = sThisDiv.replace("xxxPrintDivNamexxx", gWatchlists[idxWLMain].spanName);
                    wlAddDiv(gWatchlists[idxWLMain].spanName, sThisDiv);
                } else {
                    if (document.getElementById(gWatchlists[idxWLMain].spanName).innerHTML == "") {
                        sThisDiv = sThisDiv.replace("xxxPrintDivNamexxx", gWatchlists[idxWLMain].spanName);
                        document.getElementById(gWatchlists[idxWLMain].spanName).innerHTML = sThisDiv;
                        //                            document.getElementById(gWatchlists[idxWLMain].spanName).innerHTML = "<div id=\"" + gWatchlists[idxWLMain].spanName + "top\"></div>" + sThisDiv;
                    } else {
                        if ((iLineCnt > giLineLimit) && (!gWatchlists[idxWLMain].bShowMaximized)) {
                            document.getElementById("divtableInside" + sThisId).style.height = gsTableHeightWithScrollbar;
                            document.getElementById("divtableInside" + sThisId).style.overflowY = "scroll";
                            document.getElementById("divtableTitle" + sThisId).style.height = gsTableHeightWithScrollbarTitle;
                            document.getElementById("divtableTitle" + sThisId).style.overflowY = "scroll";
                            document.getElementById("spanMaxRestore" + sThisId).src = gsMaximizeWindowImg;
                            document.getElementById("spanMaxRestore" + sThisId).title = "Maximize";
                        } else {
                            document.getElementById("divtableInside" + sThisId).style.height = "";
                            document.getElementById("spanMaxRestore" + sThisId).src = gsRestoreWindowImg;
                            document.getElementById("spanMaxRestore" + sThisId).title = "Restore";
                        }
                        document.getElementById("divtableTitle" + sThisId).innerHTML = sThisTableTitleInside;
                        document.getElementById("divtableInside" + sThisId).innerHTML = sThisTable;
                        document.getElementById("divtableTotals" + sThisId).innerHTML = sThisTableTotalsInside;
                        if (!isUndefined(document.getElementById("spanLastUpdateDate" + sThisId))) {
                            if (!(document.getElementById("spanLastUpdateDate" + sThisId) == null)) {
                                document.getElementById("spanLastUpdateDate" + sThisId).innerHTML = sLastUpdateDate;
                            }
                        }

                        if (!isUndefined(document.getElementById("IconShow" + sThisId))) {
                            if (!(document.getElementById("IconShow" + sThisId) == null)) {
                                document.getElementById("IconShow" + sThisId).title = gksWLIconShowTitle.replace("xx", iHiddenCnt.toString());
                            }
                        }

                        document.getElementById("spanWLDate" + sThisId).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;" + sDate;
                    }
                }
            }
        }
    }
}

function GetWatchlistsNew(bDoingReset) {
    let oCMLength = oCMWL.length;
    if (isUndefined(oCMWL)) {
        oCMLength = oCMWL.length;
    }
    let oOldWL = new Array();

    if (oCMLength > 0) {
        //build list of accounts to be used to determine if the watchlist is shared
        let sAccountList = "";
        let sAccountListSep = "";
        if (gAccounts.length > 0) {
            for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
                oAccount = new Account();
                oAccount = gAccounts[idxAccounts];
                sAccountList = sAccountList + sAccountListSep + oAccount.accountId;
                sAccountListSep = ",";
                sAccountList = "," + sAccountList + ",";
            }
        }
        if (bDoingReset) {
            for (let idxWLCur = 0; idxWLCur < gWatchlists.length; idxWLCur++) {
                oOldWL[oOldWL.length] = gWatchlists[idxWLCur]
            }

            gWatchlists.length = 0;
            let sLastWL = "";
            let oWL = new WLWatchList();
            let iItemCnt = 0;
            for (let idxWL = 0; idxWL < oCMLength; idxWL++) {
                if (sLastWL == "") {
                    sLastWL = oCMWL[idxWL].wlaccountname + oCMWL[idxWL].wlname;
                    oWL = new WLWatchList();
                    oWL.accountId = oCMWL[idxWL].wlaccountid;
                    oWL.watchlistId = FormatIntegerNumber(oCMWL[idxWL].wlid, 6, "0");
                    oWL.name = oCMWL[idxWL].wlname;
                    oWL.defaultUpdateGLDate = oCMWL[idxWL].defaultupdategldate;
                    oWL.wllastupdatedate = oCMWL[idxWL].wllastupdatedate;
                    oWL.accountName = oCMWL[idxWL].wlaccountname;
                    oWL.bShared = (sAccountList.indexOf("," + oWL.accountId + ",") != -1 ? false : true);
                    let sTmp = oCMWL[idxWL].wlcolumnsselected;  // should look like: name|sortorder|sortable|initsort|asc/desc>>name|sortorder|sortable|initsort|asc/desc
                    if ((sTmp != "") && (sTmp != null)) {
                        InitializeColumns(oWL, true);
                        let vTmpCol = sTmp.split(">>");
                        for (let idxCol = 0; idxCol < vTmpCol.length; idxCol++) {
                            let vTmp = vTmpCol[idxCol].split("|");
                            if (!isUndefined(oWL.wlcolumnsselected[vTmp[0].toString()])) {
                                oWL.wlcolumnsselected[vTmp[0].toString()].selected = true;
                                oWL.wlcolumnsselected[vTmp[0].toString()].sortorder = parseInt(vTmp[1]);
                                oWL.wlcolumnsselected[vTmp[0].toString()].sortable = (vTmp[2] == "1" ? true : false);
                                if (vTmp.length > 3) {
                                    oWL.wlcolumnsselected[vTmp[0].toString()].sortonthisfield = (vTmp[3] == "1" ? true : false);
                                    oWL.wlcolumnsselected[vTmp[0].toString()].sortascdesc = parseInt(vTmp[4]);
                                }
                            }
                        }
                    } else {
                        InitializeColumns(oWL, false);
                    }
                    WLSortColumns(0, oWL);
                    oWL.bViewable = (oCMWL[idxWL].wlviewable == 1 ? true : false);
                    iItemCnt = 0;
                } else if (sLastWL != (oCMWL[idxWL].wlaccountname + oCMWL[idxWL].wlname)) {
                    if (oWL.WLItems.length > 0) {
                        oWL.WLItems.sort(sortBySymbol);
                    }

                    let bSomethingSelected = false;
                    for (let idxWLCur = 0; idxWLCur < oOldWL.length; idxWLCur++) {
                        if ((oWL.accountId == oOldWL[idxWLCur].accountId) &&
                            (oWL.name == oOldWL[idxWLCur].name)) {
                            oWL.spanName = oOldWL[idxWLCur].spanName;
                            if (oOldWL[idxWLCur].bSelected) {
                                oWL.bSelected = true;
                                oWL.bSelectedTemp = true;
                                oWL.sSortOrderFields = oOldWL[idxWLCur].sSortOrderFields; //6/23/21
                                oWL.iSortOrderAscDesc = oOldWL[idxWLCur].iSortOrderAscDesc; //10/20/21

                                // now reset the selected for order flag
                                if (oWL.WLItems.length > 0) {
                                    if (oOldWL[idxWLCur].WLItems.length > 0) {
                                        for (let idxWLItem = 0; idxWLItem < oWL.WLItems.length; idxWLItem++) {
                                            for (let idxWLItemOld = 0; idxWLItemOld < oOldWL[idxWLCur].WLItems.length; idxWLItemOld++) {
                                                if ((oOldWL[idxWLCur].WLItems[idxWLItemOld].symbol == oWL.WLItems[idxWLItem].symbol) &&
                                                    (oOldWL[idxWLCur].WLItems[idxWLItemOld].accountId == oWL.WLItems[idxWLItem].accountId)) {
                                                    oWL.WLItems[idxWLItem].bSelectedForOrder = oOldWL[idxWLCur].WLItems[idxWLItemOld].bSelectedForOrder;
                                                    oWL.WLItems[idxWLItem].bCheckboxEnabled = oOldWL[idxWLCur].WLItems[idxWLItemOld].bCheckboxEnabled;
                                                    if (oWL.WLItems[idxWLItem].bSelectedForOrder) {
                                                        bSomethingSelected = true;
                                                    }
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    }
                    if (!bSomethingSelected) {
                        //remove the number selected indicator
                        let sThisId = oWL.watchlistId + oWL.accountId;

                        if (!isUndefined(document.getElementById("spanWLNumChecked" + sThisId))) {
                            if (document.getElementById("spanWLNumChecked" + sThisId) != null) {
                                document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "&nbsp;";
                            }
                        }
                    }
                    gWatchlists[gWatchlists.length] = oWL;

                    sLastWL = oCMWL[idxWL].wlaccountname + oCMWL[idxWL].wlname;
                    oWL = new WLWatchList();
                    oWL.accountId = oCMWL[idxWL].wlaccountid;
                    oWL.watchlistId = FormatIntegerNumber(oCMWL[idxWL].wlid, 6, "0");
                    oWL.name = oCMWL[idxWL].wlname;
                    oWL.defaultUpdateGLDate = oCMWL[idxWL].defaultupdategldate;
                    oWL.wllastupdatedate = oCMWL[idxWL].wllastupdatedate;
                    oWL.accountName = oCMWL[idxWL].wlaccountname;
                    oWL.bShared = (sAccountList.indexOf("," + oWL.accountId + ",") != -1 ? false : true);
                    let sTmp = oCMWL[idxWL].wlcolumnsselected;  // should look like: name|sortorder|sortable|initsort|asc/desc>>name|sortorder|sortable|initsort|asc/desc
                    if ((sTmp != "") && (sTmp != null)) {
                        InitializeColumns(oWL, true);
                        let vTmpCol = sTmp.split(">>");
                        for (let idxCol = 0; idxCol < vTmpCol.length; idxCol++) {
                            let vTmp = vTmpCol[idxCol].split("|");
                            if (!isUndefined(oWL.wlcolumnsselected[vTmp[0].toString()])) {
                                oWL.wlcolumnsselected[vTmp[0].toString()].selected = true;
                                oWL.wlcolumnsselected[vTmp[0].toString()].sortorder = parseInt(vTmp[1]);
                                oWL.wlcolumnsselected[vTmp[0].toString()].sortable = (vTmp[2] == "1" ? true : false);
                                if (vTmp.length > 3) {
                                    oWL.wlcolumnsselected[vTmp[0].toString()].sortonthisfield = (vTmp[3] == "1" ? true : false);
                                    oWL.wlcolumnsselected[vTmp[0].toString()].sortascdesc = parseInt(vTmp[4]);
                                }
                            }
                        }
                    } else {
                        InitializeColumns(oWL, false);
                    }
                    WLSortColumns(0, oWL);
                    oWL.bViewable = (oCMWL[idxWL].wlviewable == 1 ? true : false);
                    iItemCnt = 0;
                }

                //	select w.wlaccountname, w.wlname, w.wlid, w.wlaccountid, 
                //          w.defaultupdategldate, w.wllastupdatedate, w.wlviewable, 
                //          d.symbol, d.symbolid, d.acquireddate, d.commission, d.quantity, d.averageprice, d.hidden, s.assettype, s.sym_description

                if (!((oCMWL[idxWL].symbol == null) || (isUndefined(oCMWL[idxWL].symbol)))) {
                    if (oCMWL[idxWL].symbol != "") {
                        let oWLItem = new WLItem();
                        iItemCnt++;
                        oWLItem.assetType = oCMWL[idxWL].assettype;
                        oWLItem.symbol = oCMWL[idxWL].symbol;

                        //oWLItem.sequenceId = iItemCnt;
                        oWLItem.purchasedDate = oCMWL[idxWL].acquireddate;
                        oWLItem.catalystDate = oCMWL[idxWL].catalystdate;
                        oWLItem.bHidden = (oCMWL[idxWL].hidden == 1 ? true : false);
                        oWLItem.symbolDescription = oCMWL[idxWL].sym_description;
                        oWLItem.priceInfo.averagePrice = parseFloat(oCMWL[idxWL].gl);
                        oWLItem.priceInfo.GLUpdateDate = parseInt(oCMWL[idxWL].gllastenddate);
                        oWLItem.priceInfo.GLUpdateStartDate = parseInt(oCMWL[idxWL].gllaststartdate);
                        if (!isUndefined(oCMWL[idxWL].oldgl)) {
                            if (oCMWL[idxWL].oldgl == "") {
                                oWLItem.priceInfo.oldgl = 0;
                            } else {
                                oWLItem.priceInfo.oldgl = parseFloat(oCMWL[idxWL].oldgl);
                            }
                        }

                        oWL.WLItems[oWL.WLItems.length] = oWLItem;
                    }
                }
            }
            if ((iItemCnt != 0) && (oWL.WLItems.length != 0)) {
                oWL.WLItems.sort(sortBySymbol);

                let bSomethingSelected = false;
                for (let idxWLCur = 0; idxWLCur < oOldWL.length; idxWLCur++) {
                    if ((oWL.accountId == oOldWL[idxWLCur].accountId) &&
                        (oWL.name == oOldWL[idxWLCur].name)) {
                        oWL.spanName = oOldWL[idxWLCur].spanName;
                        if (oOldWL[idxWLCur].bSelected) {
                            oWL.bSelected = true;
                            oWL.bSelectedTemp = true;
                            oWL.sSortOrderFields = oOldWL[idxWLCur].sSortOrderFields; //6/23/21
                            oWL.iSortOrderAscDesc = oOldWL[idxWLCur].iSortOrderAscDesc; //10/20/21

                            // now reset the selected for order flag
                            if (oWL.WLItems.length > 0) {
                                if (oOldWL[idxWLCur].WLItems.length > 0) {
                                    for (let idxWLItem = 0; idxWLItem < oWL.WLItems.length; idxWLItem++) {
                                        for (let idxWLItemOld = 0; idxWLItemOld < oOldWL[idxWLCur].WLItems.length; idxWLItemOld++) {
                                            if ((oOldWL[idxWLCur].WLItems[idxWLItemOld].symbol == oWL.WLItems[idxWLItem].symbol) &&
                                                (oOldWL[idxWLCur].WLItems[idxWLItemOld].accountId == oWL.WLItems[idxWLItem].accountId)) {
                                                oWL.WLItems[idxWLItem].bSelectedForOrder = oOldWL[idxWLCur].WLItems[idxWLItemOld].bSelectedForOrder;
                                                oWL.WLItems[idxWLItem].bCheckboxEnabled = oOldWL[idxWLCur].WLItems[idxWLItemOld].bCheckboxEnabled;
                                                if (oWL.WLItems[idxWLItem].bSelectedForOrder) {
                                                    bSomethingSelected = true;
                                                }
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    }
                }
                if (!bSomethingSelected) {
                    //remove the number selected indicator
                    let sThisId = oWL.watchlistId + oWL.accountId;

                    if (!isUndefined(document.getElementById("spanWLNumChecked" + sThisId))) {
                        if (document.getElementById("spanWLNumChecked" + sThisId) != null) {
                            document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "&nbsp;";
                        }
                    }
                }
                gWatchlists[gWatchlists.length] = oWL;
            } else {
                if (sLastWL != "") {
                    gWatchlists[gWatchlists.length] = oWL;
                }
            }

        } else {
            for (let idxWLCur = 0; idxWLCur < gWatchlists.length; idxWLCur++) {
                oOldWL[oOldWL.length] = gWatchlists[idxWLCur]
            }
            gWatchlists.length = 0;
            let sLastWL = "";
            let oWL = new WLWatchList();
            let iItemCnt = 0;
            for (let idxWL = 0; idxWL < oCMLength; idxWL++) {
                if (sLastWL == "") {
                    sLastWL = oCMWL[idxWL].wlaccountname + oCMWL[idxWL].wlname;
                    oWL = new WLWatchList();
                    oWL.accountId = oCMWL[idxWL].wlaccountid;
                    oWL.watchlistId = FormatIntegerNumber(oCMWL[idxWL].wlid, 6, "0");
                    oWL.name = oCMWL[idxWL].wlname;
                    if (oWL.name.toUpperCase().indexOf("CURRENT TRADE") != -1) {
                        oWL.sSortOrderFields = gsSortOrderFields.CatalystDate; //10/20/21
                        oWL.iSortOrderAscDesc = 0; //0 - ascending, 1 - descending //10/22/21
                    }
                    oWL.defaultUpdateGLDate = oCMWL[idxWL].defaultupdategldate;
                    oWL.wllastupdatedate = oCMWL[idxWL].wllastupdatedate;
                    oWL.accountName = oCMWL[idxWL].wlaccountname;
                    oWL.bShared = (sAccountList.indexOf("," + oWL.accountId + ",") != -1 ? false : true);
                    let sTmp = oCMWL[idxWL].wlcolumnsselected;  // should look like: name|sortorder|sortable|initsort|asc/desc>>name|sortorder|sortable|initsort|asc/desc
                    if ((sTmp != "") && (sTmp != null)) {
                        InitializeColumns(oWL, true);
                        let vTmpCol = sTmp.split(">>");
                        for (let idxCol = 0; idxCol < vTmpCol.length; idxCol++) {
                            let vTmp = vTmpCol[idxCol].split("|");
                            if (!isUndefined(oWL.wlcolumnsselected[vTmp[0].toString()])) {
                                oWL.wlcolumnsselected[vTmp[0].toString()].selected = true;
                                oWL.wlcolumnsselected[vTmp[0].toString()].sortorder = parseInt(vTmp[1]);
                                oWL.wlcolumnsselected[vTmp[0].toString()].sortable = (vTmp[2] == "1" ? true : false);
                                if (vTmp.length > 3) {
                                    oWL.wlcolumnsselected[vTmp[0].toString()].sortonthisfield = (vTmp[3] == "1" ? true : false);
                                    oWL.wlcolumnsselected[vTmp[0].toString()].sortascdesc = parseInt(vTmp[4]);
                                    if (oWL.wlcolumnsselected[vTmp[0].toString()].sortonthisfield) {
                                        oWL.sSortOrderFields = vTmp[0].toString();
                                        oWL.iSortOrderAscDesc = oWL.wlcolumnsselected[vTmp[0].toString()].sortascdesc; //0 - ascending, 1 - descending 
                                    }
                                }
                            }
                        }
                    } else {
                        InitializeColumns(oWL, false);
                    }
                    WLSortColumns(0, oWL);
                    oWL.bViewable = (oCMWL[idxWL].wlviewable == 1 ? true : false);
                    iItemCnt = 0;
                } else if (sLastWL != (oCMWL[idxWL].wlaccountname + oCMWL[idxWL].wlname)) {
                    if (oWL.WLItems.length > 0) {
                        oWL.WLItems.sort(sortBySymbol);
                    }
                    gWatchlists[gWatchlists.length] = oWL;

                    sLastWL = oCMWL[idxWL].wlaccountname + oCMWL[idxWL].wlname;
                    oWL = new WLWatchList();
                    oWL.accountId = oCMWL[idxWL].wlaccountid;
                    oWL.watchlistId = FormatIntegerNumber(oCMWL[idxWL].wlid, 6, "0");
                    oWL.name = oCMWL[idxWL].wlname;
                    if (oWL.name.toUpperCase().indexOf("CURRENT TRADE") != -1) {
                        oWL.sSortOrderFields = gsSortOrderFields.CatalystDate; //10/20/21
                        oWL.iSortOrderAscDesc = 0; //0 - ascending, 1 - descending //10/22/21
                    }
                    oWL.defaultUpdateGLDate = oCMWL[idxWL].defaultupdategldate;
                    oWL.wllastupdatedate = oCMWL[idxWL].wllastupdatedate;
                    oWL.accountName = oCMWL[idxWL].wlaccountname;
                    oWL.bShared = (sAccountList.indexOf("," + oWL.accountId + ",") != -1 ? false : true);
                    let sTmp = oCMWL[idxWL].wlcolumnsselected;  // should look like: name|sortorder|sortable|initsort|asc/desc>>name|sortorder|sortable|initsort|asc/desc
                    if ((sTmp != "") && (sTmp != null)) {
                        InitializeColumns(oWL, true);
                        let vTmpCol = sTmp.split(">>");
                        for (let idxCol = 0; idxCol < vTmpCol.length; idxCol++) {
                            let vTmp = vTmpCol[idxCol].split("|");
                            if (!isUndefined(oWL.wlcolumnsselected[vTmp[0].toString()])) {
                                oWL.wlcolumnsselected[vTmp[0].toString()].selected = true;
                                oWL.wlcolumnsselected[vTmp[0].toString()].sortorder = parseInt(vTmp[1]);
                                oWL.wlcolumnsselected[vTmp[0].toString()].sortable = (vTmp[2] == "1" ? true : false);
                                if (vTmp.length > 3) {
                                    oWL.wlcolumnsselected[vTmp[0].toString()].sortonthisfield = (vTmp[3] == "1" ? true : false);
                                    oWL.wlcolumnsselected[vTmp[0].toString()].sortascdesc = parseInt(vTmp[4]);
                                    if (oWL.wlcolumnsselected[vTmp[0].toString()].sortonthisfield) {
                                        oWL.sSortOrderFields = vTmp[0].toString(); 
                                        oWL.iSortOrderAscDesc = oWL.wlcolumnsselected[vTmp[0].toString()].sortascdesc; //0 - ascending, 1 - descending 
                                    }
                                }
                            }
                        }
                    } else {
                        InitializeColumns(oWL, false);
                    }
                    WLSortColumns(0, oWL);
                    oWL.bViewable = (oCMWL[idxWL].wlviewable == 1 ? true : false);
                    iItemCnt = 0;
                }

                //	select w.wlaccountname, w.wlname, w.wlid, w.wlaccountid, 
                //          w.defaultupdategldate, w.wllastupdatedate, w.wlviewable, 
                //          d.symbol, d.symbolid, d.acquireddate, d.commission, d.quantity, d.averageprice, d.hidden, s.assettype, s.sym_description

                if (!((oCMWL[idxWL].symbol == null) || (isUndefined(oCMWL[idxWL].symbol)))) {
                    if (oCMWL[idxWL].symbol != "") {
                        let oWLItem = new WLItem();
                        iItemCnt++;
                        oWLItem.assetType = oCMWL[idxWL].assettype;
                        oWLItem.symbol = oCMWL[idxWL].symbol;

                        oWLItem.purchasedDate = oCMWL[idxWL].acquireddate;
                        oWLItem.catalystDate = oCMWL[idxWL].catalystdate;
                        oWLItem.bHidden = (oCMWL[idxWL].hidden == 1 ? true : false);
                        oWLItem.symbolDescription = oCMWL[idxWL].sym_description;
                        oWLItem.priceInfo.averagePrice = parseFloat(oCMWL[idxWL].gl);
                        oWLItem.priceInfo.GLUpdateDate = parseInt(oCMWL[idxWL].gllastenddate);
                        oWLItem.priceInfo.GLUpdateStartDate = parseInt(oCMWL[idxWL].gllaststartdate);
                        if (!isUndefined(oCMWL[idxWL].oldgl)) {
                            if (oCMWL[idxWL].oldgl == "") {
                                oWLItem.priceInfo.oldgl = 0;
                            } else {
                                oWLItem.priceInfo.oldgl = parseFloat(oCMWL[idxWL].oldgl);
                            }
                        }

                        oWL.WLItems[oWL.WLItems.length] = oWLItem;
                    }
                }

            }
            if ((iItemCnt != 0) && (oWL.WLItems.length != 0)) {
                oWL.WLItems.sort(sortBySymbol);
                gWatchlists[gWatchlists.length] = oWL;
            } else {
                if (sLastWL != "") {
                    gWatchlists[gWatchlists.length] = oWL;
                }
            }

        }

        //add an Account Watchlist Summary for each account that has a watchlist
        if (gAccounts.length > 0) {
            for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
                oAccount = new Account();
                oAccount = gAccounts[idxAccounts];
                if (gAccounts[idxAccounts].CBliquidationValue >= gdAccountMinimumLiquidationValue) {
                    if (gWatchlists.length > 0) {
                        for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
                            if ((gWatchlists[idxWL].accountId == oAccount.accountId) &&
                                (gWatchlists[idxWL].name.toUpperCase().indexOf("DIVIDEND") == -1)) {
                                let oWL = new WLWatchList();
                                oWL.accountId = oAccount.accountId;
                                oWL.accountName = oAccount.accountName;
                                oWL.watchlistId = oAccount.accountId + "AccountWLSummary";
                                oWL.name = gsAccountWLSummary;

                                if (bDoingReset) {
                                    //check to see if the Account Summary watchlist has been selected
                                    for (let idxWLCur = 0; idxWLCur < oOldWL.length; idxWLCur++) {
                                        if ((oWL.accountId == oOldWL[idxWLCur].accountId) &&
                                            (oWL.name == oOldWL[idxWLCur].name)) {
                                            oWL.spanName = oOldWL[idxWLCur].spanName;
                                            if (oOldWL[idxWLCur].bSelectedWLSummary) {
                                                oWL.bSelectedWLSummary = true;
                                                oWL.bSelectedWLSummaryTemp = true;
                                            }
                                            break;
                                        }
                                    }
                                }
                                gWatchlists[gWatchlists.length] = oWL;
                                break;
                            }
                        }
                    }
                }
            }
        }
    }

    //add an Account watchlist for each account that has stock positions
    if (gAccounts.length > 0) {
        for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
            let bAddWLForThisAccount = false;
            oAccount = new Account();
            oAccount = gAccounts[idxAccounts];
            if (gAccounts[idxAccounts].CBliquidationValue >= gdAccountMinimumLiquidationValue) {
                if (oAccount.positions.length > 0) {
                    for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                        let oPosition = new Position();
                        oPosition = oAccount.positions[idxPosition];
                        if (oPosition.assetType == "EQUITY") {
                            bAddWLForThisAccount = true;
                            break;
                        }
                    }
                    if (bAddWLForThisAccount) {
                        let oWL = new WLWatchList();
                        oWL.accountId = oAccount.accountId;
                        oWL.accountName = oAccount.accountName;
                        oWL.watchlistId = oAccount.accountId;
                        oWL.name = "Account";
                        InitializeColumns(oWL, false);

                        for (let idxPosition = 0; idxPosition < oAccount.positions.length; idxPosition++) {
                            let oPosition = new Position();
                            oPosition = oAccount.positions[idxPosition];
                            if (oPosition.assetType == "EQUITY") {
                                let oWLItem = new WLItem();
                                oWLItem.assetType = oPosition.assetType;
                                oWLItem.symbol = oPosition.symbol;
                                oWLItem.sequenceId = oWL.WLItems.length + 1;
                                //oWLItem.priceInfo.averagePrice = oPosition.averagePrice;
                                oWL.WLItems[oWL.WLItems.length] = oWLItem;
                            }
                        }
                        oWL.WLItems.sort(sortBySymbol);
                        if (bDoingReset) {
                            //check to see if the Account watchlist has been selected
                            let bSomethingSelected = false;
                            for (let idxWLCur = 0; idxWLCur < oOldWL.length; idxWLCur++) {
                                if ((oWL.accountId == oOldWL[idxWLCur].accountId) &&
                                    (oWL.name == oOldWL[idxWLCur].name)) {
                                    oWL.spanName = oOldWL[idxWLCur].spanName;
                                    if (oOldWL[idxWLCur].bSelected) {
                                        oWL.bSelected = true;
                                        oWL.bSelectedTemp = true;

                                        // now reset the selected for order flag
                                        if (oWL.WLItems.length > 0) {
                                            if (oOldWL[idxWLCur].WLItems.length > 0) {
                                                for (let idxWLItem = 0; idxWLItem < oWL.WLItems.length; idxWLItem++) {
                                                    for (let idxWLItemOld = 0; idxWLItemOld < oOldWL[idxWLCur].WLItems.length; idxWLItemOld++) {
                                                        if ((oOldWL[idxWLCur].WLItems[idxWLItemOld].symbol == oWL.WLItems[idxWLItem].symbol) &&
                                                            (oOldWL[idxWLCur].WLItems[idxWLItemOld].accountId == oWL.WLItems[idxWLItem].accountId)) {
                                                            oWL.WLItems[idxWLItem].bSelectedForOrder = oOldWL[idxWLCur].WLItems[idxWLItemOld].bSelectedForOrder;
                                                            oWL.WLItems[idxWLItem].bCheckboxEnabled = oOldWL[idxWLCur].WLItems[idxWLItemOld].bCheckboxEnabled;
                                                            if (oWL.WLItems[idxWLItem].bSelectedForOrder) {
                                                                bSomethingSelected = true;
                                                            }
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            }
                            if (!bSomethingSelected) {
                                //remove the number selected indicator
                                let sThisId = oWL.watchlistId + oWL.accountId;

                                if (!isUndefined(document.getElementById("spanWLNumChecked" + sThisId))) {
                                    if (document.getElementById("spanWLNumChecked" + sThisId) != null) {
                                        document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "&nbsp;";
                                    }
                                }
                            }
                        }
                        gWatchlists[gWatchlists.length] = oWL;
                    }
                }
            }
        }
    }

    //add an Account Orders watchlist for each account 
    if (gbShowSavedOrders) {
        if (gAccounts.length > 0) {
            for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
                oAccount = new Account();
                oAccount = gAccounts[idxAccounts];
                if (gAccounts[idxAccounts].CBliquidationValue >= gdAccountMinimumLiquidationValue) {
                    let oWL = new WLWatchList();
                    oWL.accountId = oAccount.accountId;
                    oWL.accountName = oAccount.accountName;
                    oWL.watchlistId = oAccount.accountId + "AccountOrders";
                    oWL.sSortOrderFields = gsSortOrderFieldsO.TimeEntered; //default to the Opened field
                    oWL.iSortOrderAscDesc = 1; //default to descending
                    oWL.name = gsAccountOrders;

                    if (bDoingReset) {
                        //check to see if the Account Saved Orders watchlist has been selected
                        for (let idxWLCur = 0; idxWLCur < oOldWL.length; idxWLCur++) {
                            if ((oWL.accountId == oOldWL[idxWLCur].accountId) &&
                                (oWL.name == oOldWL[idxWLCur].name)) {
                                oWL.spanName = oOldWL[idxWLCur].spanName;
                                if (oOldWL[idxWLCur].bSelectedO) {
                                    oWL.bSelectedO = true;
                                    oWL.bSelectedOTemp = true;

                                    // now copy all existing items
                                    if (oOldWL[idxWLCur].WLItems.length > 0) {
                                        for (let idxWLItemOld = 0; idxWLItemOld < oOldWL[idxWLCur].WLItems.length; idxWLItemOld++) {
                                            let oWLItem = new WLItemOrder();
                                            oWLItem.bSelected = oOldWL[idxWLCur].WLItems[idxWLItemOld].bSelected;
                                            oWLItem.bSelectedForOrder = oOldWL[idxWLCur].WLItems[idxWLItemOld].bSelectedForOrder;
                                            oWLItem.bCheckboxEnabled = oOldWL[idxWLCur].WLItems[idxWLItemOld].bCheckboxEnabled;
                                            oWLItem.bSelectedTemp = oOldWL[idxWLCur].WLItems[idxWLItemOld].bSelectedTemp;
                                            oWLItem.activationPrice = oOldWL[idxWLCur].WLItems[idxWLItemOld].activationPrice;
                                            oWLItem.cancelTime = oOldWL[idxWLCur].WLItems[idxWLItemOld].cancelTime;
                                            oWLItem.closeTime = oOldWL[idxWLCur].WLItems[idxWLItemOld].closeTime;
                                            oWLItem.duration = oOldWL[idxWLCur].WLItems[idxWLItemOld].duration;
                                            oWLItem.enteredTime = oOldWL[idxWLCur].WLItems[idxWLItemOld].enteredTime;
                                            oWLItem.filledQuantity = oOldWL[idxWLCur].WLItems[idxWLItemOld].filledQuantity;
                                            oWLItem.instruction = oOldWL[idxWLCur].WLItems[idxWLItemOld].instruction;
                                            oWLItem.orderId = oOldWL[idxWLCur].WLItems[idxWLItemOld].orderId;
                                            oWLItem.orderType = oOldWL[idxWLCur].WLItems[idxWLItemOld].orderType;
                                            oWLItem.price = oOldWL[idxWLCur].WLItems[idxWLItemOld].price;
                                            oWLItem.quantity = oOldWL[idxWLCur].WLItems[idxWLItemOld].quantity;
                                            oWLItem.remainingQuantity = oOldWL[idxWLCur].WLItems[idxWLItemOld].remainingQuantity;
                                            oWLItem.session = oOldWL[idxWLCur].WLItems[idxWLItemOld].session;
                                            oWLItem.status = oOldWL[idxWLCur].WLItems[idxWLItemOld].status;
                                            oWLItem.stopPriceLinkType = oOldWL[idxWLCur].WLItems[idxWLItemOld].stopPriceLinkType;
                                            oWLItem.stopPriceOffset = oOldWL[idxWLCur].WLItems[idxWLItemOld].stopPriceOffset;
                                            oWLItem.symbol = oOldWL[idxWLCur].WLItems[idxWLItemOld].symbol;
                                            oWLItem.iSortOrderAscDesc = oOldWL[idxWLCur].WLItems[idxWLItemOld].iSortOrderAscDesc;
                                            oWLItem.sSortOrderFields = oOldWL[idxWLCur].WLItems[idxWLItemOld].sSortOrderFields;

                                            oWL.WLItems[oWL.WLItems.length] = oWLItem;
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                    gWatchlists[gWatchlists.length] = oWL;
                }
            }
        }
    }

    //add an Account Saved Orders watchlist for each account
    if (gbShowSavedOrders) {
        if (gAccounts.length > 0) {
            for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
                oAccount = new Account();
                oAccount = gAccounts[idxAccounts];
                if (gAccounts[idxAccounts].CBliquidationValue >= gdAccountMinimumLiquidationValue) {
                    let oWL = new WLWatchList();
                    oWL.accountId = oAccount.accountId;
                    oWL.accountName = oAccount.accountName;

                    oWL.sSortOrderFields = gsSortOrderFieldsSO.TimeEntered;
                    oWL.iSortOrderAscDesc = 1; //0 - ascending, 1 - descending

                    oWL.watchlistId = oAccount.accountId + "AccountSavedOrders";
                    oWL.name = gsAccountSavedOrders;

                    if (bDoingReset) {
                        //check to see if the Account Saved Orders watchlist has been selected
                        for (let idxWLCur = 0; idxWLCur < oOldWL.length; idxWLCur++) {
                            if ((oWL.accountId == oOldWL[idxWLCur].accountId) &&
                                (oWL.name == oOldWL[idxWLCur].name)) {
                                oWL.spanName = oOldWL[idxWLCur].spanName;
                                if (oOldWL[idxWLCur].bSelectedSO) {
                                    oWL.bSelectedSO = true;
                                    oWL.bSelectedSOTemp = true;

                                    // now copy all existing items
                                    if (oOldWL[idxWLCur].WLItems.length > 0) {
                                        for (let idxWLItemOld = 0; idxWLItemOld < oOldWL[idxWLCur].WLItems.length; idxWLItemOld++) {
                                            let oWLItem = new WLItemSavedOrder();
                                            oWLItem.bSelected = oOldWL[idxWLCur].WLItems[idxWLItemOld].bSelected;
                                            oWLItem.bSelectedForOrder = oOldWL[idxWLCur].WLItems[idxWLItemOld].bSelectedForOrder;
                                            oWLItem.bCheckboxEnabled = oOldWL[idxWLCur].WLItems[idxWLItemOld].bCheckboxEnabled;
                                            oWLItem.bSelectedTemp = oOldWL[idxWLCur].WLItems[idxWLItemOld].bSelectedTemp;
                                            oWLItem.cancelTime = oOldWL[idxWLCur].WLItems[idxWLItemOld].cancelTime;
                                            oWLItem.duration = oOldWL[idxWLCur].WLItems[idxWLItemOld].duration;
                                            oWLItem.instruction = oOldWL[idxWLCur].WLItems[idxWLItemOld].instruction;
                                            oWLItem.orderType = oOldWL[idxWLCur].WLItems[idxWLItemOld].orderType;
                                            oWLItem.price = oOldWL[idxWLCur].WLItems[idxWLItemOld].price;
                                            oWLItem.quantity = oOldWL[idxWLCur].WLItems[idxWLItemOld].quantity;
                                            oWLItem.savedOrderId = oOldWL[idxWLCur].WLItems[idxWLItemOld].savedOrderId;
                                            oWLItem.savedTime = oOldWL[idxWLCur].WLItems[idxWLItemOld].savedTime;
                                            oWLItem.session = oOldWL[idxWLCur].WLItems[idxWLItemOld].session;
                                            oWLItem.stopPriceLinkType = oOldWL[idxWLCur].WLItems[idxWLItemOld].stopPriceLinkType;
                                            oWLItem.stopPriceOffset = oOldWL[idxWLCur].WLItems[idxWLItemOld].stopPriceOffset;
                                            oWLItem.symbol = oOldWL[idxWLCur].WLItems[idxWLItemOld].symbol;
                                            oWLItem.iSortOrderAscDesc = oOldWL[idxWLCur].WLItems[idxWLItemOld].iSortOrderAscDesc;
                                            oWLItem.sSortOrderFields = oOldWL[idxWLCur].WLItems[idxWLItemOld].sSortOrderFields;
                                            oWL.WLItems[oWL.WLItems.length] = oWLItem;
                                        }
                                    }
                                }
                                break;
                            }
                        }
                    }
                    gWatchlists[gWatchlists.length] = oWL;
                }
            }
        }
    }

    gWatchlists.sort(sortByWLAccountandWLName);
}

function GetWatchlistSO() {
    let dt = new Date();
    let sDate = FormatDateWithTime(dt, true, false);
    let sActionSpacesP = "";
    let sActionSpacesT = "";
    let sQuantitySpacesP = "";
    let sQuantitySpacesT = "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
    let sSymbolSpacesP = "";
    let sSymbolSpacesT = "";
    let sOrderTypeSpacesP = "";
    let sOrderTypeSpacesT = "";
    let sPriceSpacesP = "";
    let sPriceSpacesT = "&nbsp;&nbsp;&nbsp;";
    let sActivitationSpacesP = "";
    let sActivitationSpacesT = "&nbsp;&nbsp;";
    let sDurationSpacesP = "&nbsp;&nbsp;";
    let sDurationSpacesT = "";
    let sCreatedSpacesP = "";
    let sCreatedSpacesT = "";
    let sBidSpacesP = "";
    let sBidSpacesT = "&nbsp;&nbsp;";
    let sAskSpacesP = "";
    let sAskSpacesT = "&nbsp;&nbsp;";

    if (gWatchlists.length > 0) {
        for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
            if (gWatchlists[idxWL].bSelectedSO) {
                let sLastWLName = "";
                let sLastWLAccountName = "";
                let sLastWLAccountId = "";
                let sThisId = "";
                let sTableRowVerticalAlignment = "middle";
                let sTmp = "";
                let bEverythingIsChecked = true;
                let bSomethingSelected = false;
                let sThisTable = "";
                let sThisDiv = "";
                let sThisTableTitle = "";
                let sThisTableTitleInside = "";
                let iLineCnt = 0;


                //get list of currently selected saved orders
                let oCurrentSOIDs = [];
                if (gWatchlists[idxWL].WLItems.length > 0) {
                    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                        let oWLSOItem = new WLItemSavedOrder();
                        oWLSOItem = gWatchlists[idxWL].WLItems[idxWLItem];
                        if (oWLSOItem.bSelectedForOrder) {
                            oCurrentSOIDs[oWLSOItem.savedOrderId] = oWLSOItem.bSelectedForOrder;
                        }
                    }
                }

                sLastWLName = gWatchlists[idxWL].name;
                sLastWLAccountName = gWatchlists[idxWL].accountName;
                sLastWLAccountId = gWatchlists[idxWL].accountId;
                sThisId = gWatchlists[idxWL].watchlistId + sLastWLAccountId;

                let iReturn = GetTDDataHTTP("https://api.tdameritrade.com/v1/accounts/" + gWatchlists[idxWL].accountId + "/savedorders", 5);
                if (iReturn == 0) {
                    gWatchlists[idxWL].WLItems.length = 0;
                    if (!isUndefined(oCMSavedOrders.length)) {
                        for (let idxSO = oCMSavedOrders.length - 1; idxSO > -1; idxSO--) {
                            let bNeedToAdd = false;
                            if (!isUndefined(oCMSavedOrders[idxSO].savedOrderId)) {
                                let oWLSOItem = new WLItemSavedOrder();
                                if (!isUndefined(oCMSavedOrders[idxSO].cancelTime)) {
                                    oWLSOItem.cancelTime = oCMSavedOrders[idxSO].cancelTime;
                                }
                                if (!isUndefined(oCMSavedOrders[idxSO].duration)) {
                                    oWLSOItem.duration = oCMSavedOrders[idxSO].duration;
                                }
                                if (!isUndefined(oCMSavedOrders[idxSO].orderLegCollection[0].instruction)) {
                                    oWLSOItem.instruction = oCMSavedOrders[idxSO].orderLegCollection[0].instruction;
                                }
                                if (!isUndefined(oCMSavedOrders[idxSO].orderType)) {
                                    oWLSOItem.orderType = oCMSavedOrders[idxSO].orderType;
                                }
                                if (!isUndefined(oCMSavedOrders[idxSO].price)) {
                                    oWLSOItem.price = oCMSavedOrders[idxSO].price;
                                }
                                if (!isUndefined(oCMSavedOrders[idxSO].orderLegCollection[0].quantity)) {
                                    oWLSOItem.quantity = oCMSavedOrders[idxSO].orderLegCollection[0].quantity;
                                }
                                if (!isUndefined(oCMSavedOrders[idxSO].savedOrderId)) {
                                    oWLSOItem.savedOrderId = oCMSavedOrders[idxSO].savedOrderId;
                                }
                                if (!isUndefined(oCMSavedOrders[idxSO].savedTime)) {
                                    oWLSOItem.savedTime = oCMSavedOrders[idxSO].savedTime;
                                }
                                if (!isUndefined(oCMSavedOrders[idxSO].session)) {
                                    oWLSOItem.session = oCMSavedOrders[idxSO].session;
                                }
                                if (!isUndefined(oCMSavedOrders[idxSO].stopPriceOffset)) {
                                    oWLSOItem.stopPriceOffset = oCMSavedOrders[idxSO].stopPriceOffset;
                                }
                                if (!isUndefined(oCMSavedOrders[idxSO].stopPriceLinkType)) {
                                    oWLSOItem.stopPriceLinkType = oCMSavedOrders[idxSO].stopPriceLinkType;
                                }
                                if (!isUndefined(oCMSavedOrders[idxSO].orderLegCollection[0].instrument.symbol)) {
                                    oWLSOItem.symbol = oCMSavedOrders[idxSO].orderLegCollection[0].instrument.symbol;
                                    if (!isUndefined(oMDQ[oWLSOItem.symbol])) {
                                        if (!isUndefined(oMDQ[oWLSOItem.symbol].bidPrice)) {
                                            oWLSOItem.bidPrice = oMDQ[oWLSOItem.symbol].bidPrice;
                                        }
                                    }
                                    if (!isUndefined(oMDQ[oWLSOItem.symbol])) {
                                        if (!isUndefined(oMDQ[oWLSOItem.symbol].askPrice)) {
                                            oWLSOItem.askPrice = oMDQ[oWLSOItem.symbol].askPrice;
                                        }
                                    }
                                }
                                if (!isUndefined(oCurrentSOIDs[oCMSavedOrders[idxSO].savedOrderId])) {
                                    //already displayed so reset the selectfororder flag
                                    oWLSOItem.bSelectedForOrder = oCurrentSOIDs[oCMSavedOrders[idxSO].savedOrderId];
                                }

                                if (oWLSOItem.bSelectedForOrder) {
                                    bSomethingSelected = true;
                                }

                                oWLSOItem.sSortOrderFields = gWatchlists[idxWL].sSortOrderFields;
                                oWLSOItem.iSortOrderAscDesc = gWatchlists[idxWL].iSortOrderAscDesc;

                                gWatchlists[idxWL].WLItems[gWatchlists[idxWL].WLItems.length] = oWLSOItem;
                            }
                        }
                    }
                    //now display the watchlist

                    iLineCnt = 0;

                    sThisDiv = "";
                    sThisTableTitle = "";
                    sThisTableTitleInside = "";

                    //mostly the same for cell and not cell
                    if (gbUsingCell) {
                        sThisDiv = sThisDiv + "<div style=\"width:" + lengthsWLSO.WLWidthCell + "; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                        sThisDiv = sThisDiv + "<table style=\"width:" + lengthsWLSO.WLWidthCell + "; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
                    } else {
                        sThisDiv = sThisDiv + "<div style=\"width:" + lengthsWLSO.WLWidth + "; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                        sThisDiv = sThisDiv + "<table style=\"width:" + lengthsWLSO.WLWidth + "; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
                    }
                    sThisDiv = sThisDiv + "<tr>";

                    sThisDiv = sThisDiv + "<th style=\"width:" + (lengthsWLSO.WLColOpenLabelWidth + lengthsWLSO.WLColOpenEntryWidth + lengthsWLSO.WLColAcquiredDateEntryWidth).toString() + "px; text-align:left; vertical-align:middle;border-top-width:1px;border-bottom-width:1px;border-left-width:1px;border-right-width:0px;border-style:solid;border-spacing:0px;border-color:White\">" +
                        "&nbsp;<input title=\"Place selected orders.\" type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoSOPlaceOrders('" + gWatchlists[idxWL].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Place\" ></th>";

                    sThisDiv = sThisDiv + "<th style=\"width:" + lengthsWLSO.WLColTitleWidth.toString() + "px; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:0px; border-style:solid;border-spacing:0px;border-color:White\">" +
                        "<span style=\"vertical-align: middle;\" id=\"spanWLNumChecked" + sThisId + "\" name=\"spanWLNumChecked" + sThisId + "\">&nbsp;</span>" +
                        "<span title=\"Account Name\"  style=\"vertical-align: middle;\"><b>" + sLastWLAccountName + "--</b></span>" +
                        "<span title=\"Watchlist Name\" style=\"vertical-align: middle;\"><b>" + sLastWLName + "&nbsp;&nbsp;</b></span>" +
                        "<img title=\"yyyimgMaxRestoreyyy\" height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"xxximgMaxRestorexxx\" id=\"spanMaxRestore" + sThisId + "\" onclick=\"wlDoMaximizeRestore('" + sLastWLAccountId + "', '" + gWatchlists[idxWL].watchlistId + "')\">" +
                        "&nbsp;&nbsp;<img title=\"Print\" height=\"20\" width=\"20\" style=\"vertical-align:middle;\" src=\"print-icon25px.png\" onclick=\"printdiv('xxxPrintDivNamexxx')\">" +
                        "<span title=\"Current Date and Time\" style=\"vertical-align: middle;\" id=\"spanSODate" + sThisId + "\" name=\"spanSODate" + sThisId + "\">&nbsp;&nbsp;&nbsp;&nbsp;" + sDate + "</span></th >";

                    sThisDiv = sThisDiv + "<th style=\"width:" + (lengthsWLSO.WLColCloseLabelWidth + lengthsWLSO.WLColCloseEntryWidth).toString() + "px;text-align:right;vertical-align:middle;border-top-width:1px;border-bottom-width:1px;border-left-width:0px;border-right-width:0px;border-style:solid;border-spacing:0px;border-color:White\">" +
                        "<input title=\"Delete selected orders.\" type=\"button\" style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\"  onclick=\"DoSODeleteOrders('" + gWatchlists[idxWL].watchlistId + "','" + sLastWLAccountId + "')\" value=\"Delete\" ></th>";

                    sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:" + lengthsWLSO.WLCol2Width.toString() + "px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDiv('" + gWatchlists[idxWL].watchlistId + "','" + sLastWLAccountId + "')\">&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;&nbsp;</th>";

                    sThisDiv = sThisDiv + "</tr>";

                    sThisDiv = sThisDiv + "<tr>";
                    sThisDiv = sThisDiv + "<td colspan=\"4\" style=\"vertical-align:top;border-width:1px; border-style:solid;border-spacing:1px;border-color:White\">";
                    //-------------------------

                    sThisDiv = sThisDiv + "<div id=\"divtable" + sThisId + "\" style =\"border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    sThisTableTitle = "<div id=\"divtableTitle" + sThisId + "\" style =\"" + gsReplaceTableHeightOverflowTitle + " border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    sThisTableTitleInside = "<table style=\"border-collapse:collapse; border: 0px solid black;background-color:" + gsWLTableBackgroundColor + "; width:100%;border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    sThisTableTitleInside = sThisTableTitleInside + "<tr style=\"height:" + giTitleHeight.toString() + "px; \">";

                    //sThisDiv = sThisDiv + "<div id=\"divtable" + sThisId + "\" style =\"border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    //sThisTable = "";
                    //sThisTable = sThisTable + "<table style=\"border-collapse:collapse; border: 0px solid black;background-color:" + gsWLTableBackgroundColor + "; width:100%;border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                    //sThisTable = sThisTable + "<tr>";

                    if (gWatchlists[idxWL].WLItems.length == 0) {
                        //no saved orders
                        sThisTableTitleInside = sThisTableTitleInside + "<td style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">No saved orders for this account.</td>";
                        sThisTableTitleInside = sThisTableTitleInside + "</tr></table>";
                        sThisTableTitle = sThisTableTitle + sThisTableTitleInside + "</div>" + "<div id=\"divtableInside" + sThisId + "\" style =\"" + gsReplaceTableHeightOverflow + " border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";

                        if (!isUndefined(document.getElementById("spanWLNumChecked" + sThisId))) {
                            if (document.getElementById("spanWLNumChecked" + sThisId) != null) {
                                document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "&nbsp;";
                            }
                        }

                    } else {

                        //Action 	Quantity  Symbol 	Order Type 	Price  Activation  Time-in-Force  Created Bid Ask
                        let sTitle = {
                            "Action": "<b><I><U>Action</U></I></b>",
                            "Quantity": "<b><I><U>Quantity</U></I></b>",
                            "Symbol": "<b><I><U>Symbol</U></I></b>",
                            "Type": "<b><I><U>Order&nbsp;Type</U></I></b>",
                            "Price": "<b><I><U>Price</U></I></b>",
                            "ActPrice": "<b><I><U>Activation</U></I></b>",
                            "TimeInForce": "<b><I><U>Time-in-Force</U></I></b>",
                            "TimeEntered": "<b><I><U>Created</U></I></b>",
                            "Bid": "<b><I><U>Bid</U></I></b>",
                            "Ask": "<b><I><U>Ask</U></I></b>"
                        };

                        let sTitleWithArrow = {
                            "Action": "<b><I><U>Action</U></I>xxx</b>",
                            "Quantity": "<b><I><U>Quantity</U></I>xxx</b>",
                            "Symbol": "<b><I><U>Symbol</U></I>xxx</b>",
                            "Type": "<b><I><U>Type</U></I>xxx</b>",
                            "Price": "<b><I><U>Price</U></I>xxx</b>",
                            "ActPrice": "<b><I><U>Activation</U></I>xxx</b>",
                            "TimeInForce": "<b><I><U>Time-in-Force</U></I>xxx</b>",
                            "TimeEntered": "<b><I><U>Created</U></I>xxx</b>",
                            "Bid": "<b><I><U>Bid</U></I>xxx</b>",
                            "Ask": "<b><I><U>Ask</U></I>xxx</b>"
                        };


                        let sDownArrow = "&darr;";
                        let sUpArrow = "&uarr;";
                        let sArrow = "";
                        if (gWatchlists[idxWL].iSortOrderAscDesc == 0) {
                            sArrow = sDownArrow;
                        } else {
                            sArrow = sUpArrow;
                        }
                        sTitle[gWatchlists[idxWL].sSortOrderFields] = sTitleWithArrow[gWatchlists[idxWL].sSortOrderFields].replace("xxx", sArrow);
                        gWatchlists[idxWL].WLItems.sort(sortWLSO);

                        //sThisTableTitleInside = sThisTableTitleInside + "<td colspan=\"10\" style=\"text-align=left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px; \">";
                        //sThisTableTitleInside = sThisTableTitleInside + "Total saved orders " + gWatchlists[idxWL].WLItems.length.toString() + " (max 200)";
                        //sThisTableTitleInside = sThisTableTitleInside + "</td>";
                        //sThisTableTitleInside = sThisTableTitleInside + "</tr>";
                        //sThisTableTitleInside = sThisTableTitleInside + "<tr style=\"height:" + giTitleHeight.toString() + "px; \">";

                        let sThischkItemId = "chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + "000";
                        let sonClickChangeOrderBase = "onclick =\"wlChangeOrderSO(" + idxWL.toString() + ", 'xxx')\"";
                        let sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsSO.Action);

                        //let sThischkItemId = "chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + "000";
                        sThisTableTitleInside = sThisTableTitleInside + "<td style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" +
                            "<input xxthisWillBeReplacedxx style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + "; \" type=\"checkbox\" id=\"" + sThischkItemId + "\" name=\"" + sThischkItemId + "\" value=\"\" onclick=\"wlMarkSelectedItem(" + idxWL.toString() + ", " + "-1" + ")\">" +
                            "<span  " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO.Action + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + "; \">" +
                            sTitle.Action + "</span></td> ";


                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsSO.Quantity);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO.Quantity + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Quantity + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsSO.Symbol);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO.Symbol + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Symbol + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsSO.Type);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO.OrderType + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Type + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsSO.Price);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO.Price + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Price + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsSO.ActPrice);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO.ActPrice + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.ActPrice + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsSO.TimeInForce);
                        if (gbUsingCell) {
                            sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO["Time-in-Force"] + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px; font-size:9pt;\">" + sTitle.TimeInForce + "</td>";
                        } else {
                            sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO["Time-in-Force"] + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px; \">" + sTitle.TimeInForce + "</td>";
                        }

                        if (gbUsingCell) {
                            sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsSO.TimeEntered);
                            sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO.CreatedCell + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.TimeEntered + "</td>";
                        } else {
                            sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsSO.TimeEntered);
                            sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO.Created + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.TimeEntered + "</td>";
                        }

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsSO.Bid);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO.Bid + "text-align:center;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Bid + "</td>";

                        sonClickChangeOrder = sonClickChangeOrderBase.replace("xxx", gsSortOrderFieldsSO.Ask);
                        sThisTableTitleInside = sThisTableTitleInside + "<td " + sonClickChangeOrder + " style=\"" + gsFieldWidthsWLSO.Ask + "text-align:center;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\">" + sTitle.Ask + "</td>";

                        sThisTableTitleInside = sThisTableTitleInside + "</tr></table>";

                        sThisTableTitle = sThisTableTitle + sThisTableTitleInside + "</div>" + "<div id=\"divtableInside" + sThisId + "\" style =\"" + gsReplaceTableHeightOverflow + " border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                        sThisTable = "";
                        sThisTable = sThisTable + "<table style=\"border-collapse:collapse; border: 0px solid black;background-color:" + gsWLTableBackgroundColor + "; width:100%;border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";

                        iLineCnt = 0;
                        for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {

                            let oWLSOItem = new WLItemSavedOrder();
                            oWLSOItem = gWatchlists[idxWL].WLItems[idxWLItem];
                            iLineCnt++;
                            let sChecked = "";
                            let sThisidxWLItem = "";
                            //let idxThisSymbol = idxWLItem;
                            //let idxThisSymbolidxWLItem = idxWLItem;
                            //let idxThisSymbolselected = sSymbolsSelectedForOrderThisWL.substring(idxThisSymbolidxWLItem + idxThisSymbol + 2, sSymbolsSelectedForOrderThisWL.length - 1).indexOf(",");
                            //sThisidxWLItem = sSymbolsSelectedForOrderThisWL.substr(idxThisSymbol + idxThisSymbolidxWLItem + 2, idxThisSymbolselected);

                            if (oWLSOItem.bSelectedForOrder) {
                                sChecked = "checked";
                            } else {
                                bEverythingIsChecked = false;
                            }
                            let sThisTRId = "TR" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + FormatIntegerNumber(idxWLItem, 3, "0");
                            if (sChecked == "checked") {
                                sThisTable = sThisTable + "<tr id=\"" + sThisTRId + "\"  name=\"" + sThisTRId + "\" style=\"background-color:" + gsWLTableSelectedRowBackgroundColor + ";\">";
                            } else {
                                if ((iLineCnt % 2) == 0) {
                                    sThisTable = sThisTable + "<tr id=\"" + sThisTRId + "\"  name=\"" + sThisTRId + "\" style=\"background-color:" + gsWLTableEvenRowBackgroundColor + ";\">";
                                } else {
                                    sThisTable = sThisTable + "<tr id=\"" + sThisTRId + "\"  name=\"" + sThisTRId + "\" style=\"background-color:" + gsWLTableOddRowBackgroundColor + ";\">";
                                }
                            }

                            //check box and Action - instruction
                            let sThischkItemId = "chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + FormatIntegerNumber(idxWLItem, 3, "0");
                            sThisTable = sThisTable + "<td style=\"text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" +
                                "<input style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";\" id=\"" + sThischkItemId + "\" name=\"" + sThischkItemId + "\" type=\"checkbox\" " + sChecked + " value=\"\" onclick=\"wlMarkSelectedItem(" + idxWL.toString() + ", " + idxWLItem.toString() + ")\">" +
                                "<span style=\"" + gsFieldWidthsWLSO.Action + "text-align:left;vertical-align:" + sTableRowVerticalAlignment + "; \">" +
                                sActionSpacesP + oWLSOItem.instruction.toProperCase(true) + sActionSpacesT + "</span></td>";

                            //Qty - quantity
                            sTmp = FormatDecimalNumber(oWLSOItem.quantity, 5, 0, "");
                            let dQty = parseFloat(sTmp);
                            if (dQty == 0.0) {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.Quantity + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                            } else {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.Quantity + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sQuantitySpacesP + sTmp + sQuantitySpacesT + "</td>";
                            }

                            //Symbol - symbol
                            sTmp = oWLSOItem.symbol;
                            sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.Symbol + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sSymbolSpacesP + sTmp + sSymbolSpacesT + "</td>";

                            //Order Type - orderType aqnd maybe stopPriceLinkType
                            sTmp = oWLSOItem.orderType;
                            if (sTmp == "TRAILING_STOP") {
                                sTmp = "Trailing&nbsp;Stop&nbsp;" + oWLSOItem.stopPriceLinkType.toProperCase(true);
                            } else {
                                sTmp = sTmp.toProperCase(true);
                            }
                            sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.OrderType + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sOrderTypeSpacesP + sTmp + sOrderTypeSpacesT + "</td>";

                            //Price - price
                            sTmp = FormatDecimalNumber(oWLSOItem.price, 5, 2, "");
                            let dPrice = parseFloat(sTmp);
                            if (dPrice == 0.0) {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.Price + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                            } else {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.Price + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sPriceSpacesP + sTmp + sPriceSpacesT + "</td>";
                            }

                            //Activation - stopPriceOffset
                            sTmp = FormatDecimalNumber(oWLSOItem.stopPriceOffset, 5, 2, "");
                            let stopPriceOffset = parseFloat(sTmp);
                            if (stopPriceOffset == 0.0) {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.ActPrice + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                            } else {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.ActPrice + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sActivitationSpacesP + sTmp + "%" + sActivitationSpacesT + "</td>";
                            }

                            //Time-in-Force - duration
                            sTmp = oWLSOItem.duration;
                            if (sTmp == "GOOD_TILL_CANCEL") {
                                sTmp = "GTC";
                                if (dPrice == 0.0) {
                                    sTmp = "GTC";
                                } else {
                                    sTmp = "GTC&nbsp;+&nbsp;ext.";
                                }
                            } else {
                                sTmp = sTmp.toProperCase(true);
                            }
                            sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO["Time-in-Force"] + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sDurationSpacesP + sTmp + sDurationSpacesT + "</td>";

                            //Created - 
                            let d = new Date(oWLSOItem.savedTime.split("+")[0] + "+00:00");
                            sTmp = FormatTDTradeDate(d);
                            if (gbUsingCell) {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.Created + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; font-size:9pt;\">" + sCreatedSpacesP + sTmp + sCreatedSpacesT + "</td>";
                            } else {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.Created + "text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sCreatedSpacesP + sTmp + sCreatedSpacesT + "</td>";
                            }

                            //Bid
                            let dBidPrice = oWLSOItem.bidPrice;
                            //if (!isUndefined(oMDQ[oWLSOItem.symbol])) {
                            //    if (!isUndefined(oMDQ[oWLSOItem.symbol].bidPrice)) {
                            //        dBidPrice = oMDQ[oWLSOItem.symbol].bidPrice;
                            //    }
                            //}
                            sTmp = FormatDecimalNumber(dBidPrice, 5, 2, "");
                            if (dBidPrice == 0.0) {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.Bid + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                            } else {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.Bid + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sBidSpacesP + sTmp + sBidSpacesT + "</td>";
                            }

                            //Ask
                            let dAskPrice = oWLSOItem.askPrice;
                            //if (!isUndefined(oMDQ[oWLSOItem.symbol])) {
                            //    if (!isUndefined(oMDQ[oWLSOItem.symbol].askPrice)) {
                            //        dAskPrice = oMDQ[oWLSOItem.symbol].askPrice;
                            //    }
                            //}
                            sTmp = FormatDecimalNumber(dAskPrice, 5, 2, "");
                            if (dAskPrice == 0.0) {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.Ask + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                            } else {
                                sThisTable = sThisTable + "<td style=\"" + gsFieldWidthsWLSO.Ask + "text-align:right; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sAskSpacesP + sTmp + sAskSpacesT + "</td>";
                            }

                            sThisTable = sThisTable + "</tr>";

                        }

                    }

                } else {
                    //an error occurred, so don't update anything
                    return;
                }

                if (sThisTable == "") {
                    sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflow, "");
                    sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflowTitle, "");
                    sThisDiv = sThisDiv.replace("xxximgMaxRestorexxx", gsRestoreWindowImg);
                    sThisDiv = sThisDiv.replace("yyyimgMaxRestoreyyy", "Restore");
                    sThisDiv = sThisDiv + sThisTableTitle + "</div></div></td></tr></table></div>";
                } else {
                    if (bEverythingIsChecked) {
                        sThisTableTitleInside = sThisTableTitleInside.replace("xxthisWillBeReplacedxx", "checked");
                        sThisTableTitle = sThisTableTitle.replace("xxthisWillBeReplacedxx", "checked");
                    } else {
                        sThisTableTitleInside = sThisTableTitleInside.replace("xxthisWillBeReplacedxx", "");
                        sThisTableTitle = sThisTableTitle.replace("xxthisWillBeReplacedxx", "");
                    }
                    //sThisTable = sThisTable.replace("xxthisWillBeReplacedxx", "checked");

                    if ((iLineCnt > giLineLimit) && (!gWatchlists[idxWL].bShowMaximized)) {
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflow, gsTableHeightOverflow);
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflowTitle, gsTableHeightOverflowTitle);
                        sThisDiv = sThisDiv.replace("xxximgMaxRestorexxx", gsMaximizeWindowImg);
                        sThisDiv = sThisDiv.replace("yyyimgMaxRestoreyyy", "Maximize");
                    } else {
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflow, "");
                        sThisTableTitle = sThisTableTitle.replace(gsReplaceTableHeightOverflowTitle, "");
                        sThisDiv = sThisDiv.replace("xxximgMaxRestorexxx", gsRestoreWindowImg);
                        sThisDiv = sThisDiv.replace("yyyimgMaxRestoreyyy", "Restore");
                    }

                    sThisDiv = sThisDiv + sThisTableTitle + sThisTable + "</table></div></div>" + "</td></tr></table></div>";
                    //sThisTable = sThisTable + "</table>";
                    //sThisDiv = sThisDiv + sThisTable + "</div ></td ></tr ></table ></div > ";
                }
                if (gWatchlists[idxWL].spanName == "") {
                    gWatchlists[idxWL].spanName = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
                    sThisDiv = sThisDiv.replace("xxxPrintDivNamexxx", gWatchlists[idxWL].spanName);
                    wlAddDiv(gWatchlists[idxWL].spanName, sThisDiv);
                } else {
                    if (document.getElementById(gWatchlists[idxWL].spanName).innerHTML == "") {
                        sThisDiv = sThisDiv.replace("xxxPrintDivNamexxx", gWatchlists[idxWL].spanName);
                        document.getElementById(gWatchlists[idxWL].spanName).innerHTML = sThisDiv;
                    } else {
                        //document.getElementById("divtable" + sThisId).innerHTML = sThisTable;
                        if (!isUndefined(document.getElementById("spanODate" + sThisId))) {
                            if ((iLineCnt > giLineLimit) && (!gWatchlists[idxWL].bShowMaximized)) {
                                document.getElementById("divtableInside" + sThisId).style.height = gsTableHeightWithScrollbar;
                                document.getElementById("divtableInside" + sThisId).style.overflowY = "scroll";
                                document.getElementById("divtableTitle" + sThisId).style.height = gsTableHeightWithScrollbarTitle;
                                document.getElementById("divtableTitle" + sThisId).style.overflowY = "scroll";
                                document.getElementById("spanMaxRestore" + sThisId).src = gsMaximizeWindowImg;
                            } else {
                                document.getElementById("divtableInside" + sThisId).style.height = "";
                                document.getElementById("spanMaxRestore" + sThisId).src = gsRestoreWindowImg;
                            }
                            document.getElementById("divtableTitle" + sThisId).innerHTML = sThisTableTitleInside;
                            document.getElementById("divtableInside" + sThisId).innerHTML = sThisTable;

                            document.getElementById("spanSODate" + sThisId).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;" + sDate;

                            if (!isUndefined(document.getElementById("spanWLNumChecked" + sThisId))) {
                                if (!bSomethingSelected) {
                                    if (document.getElementById("spanWLNumChecked" + sThisId) != null) {
                                        document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "&nbsp;";
                                    }
                                }
                            }
                       }
                    }
                }
            }
        }
    }
}

function GetWatchlistSummary() {

    let oWLItemDetail = new WLItemDetail();
    let dt = new Date();
    let sDate = FormatDateWithTime(dt, true, false);
    let bProcessThisWL = false;
    let bDontHighlightChanges = true;

    if (gWatchlists.length > 0) {
        for (let idxWLSummaryMain = 0; idxWLSummaryMain < gWatchlists.length; idxWLSummaryMain++) {
            if (gWatchlists[idxWLSummaryMain].bSelectedWLSummary) {
                let bProcessThisWL = false;
                if (gWatchlists[idxWLSummaryMain].spanName == "") {
                    bProcessThisWL = true;
                } else if (document.getElementById(gWatchlists[idxWLSummaryMain].spanName).innerHTML == "") {
                    bProcessThisWL = true;
                }
                if (bProcessThisWL) {
                    let sSymbols = "";
                    let sSep = "";
                    for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
                        if ((gWatchlists[idxWL].name != gsAccountSavedOrders) &&
                            (gWatchlists[idxWL].name != gsAccountOrders) &&
                            (gWatchlists[idxWL].name != gsAccountWLSummary) &&
                            (gWatchlists[idxWL].name != gsAccountOldGL) &&
                            (gWatchlists[idxWL].name.substr(0, gsAccountOldGLBase.length) != gsAccountOldGLBase) &&
                            (gWatchlists[idxWL].name.toUpperCase().indexOf("DIVIDEND") == -1) &&
                            (gWatchlists[idxWL].accountId != gWatchlists[idxWL].watchlistId) &&
                            (gWatchlists[idxWL].accountId == gWatchlists[idxWLSummaryMain].accountId)) {
                            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                                if (gWatchlists[idxWL].WLItems[idxWLItem].bSelected) {
                                    sSymbols = sSymbols + sSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                                    sSep = ",";
                                }
                            }
                            sSymbols = GetUniqueListOfSymbols(sSymbols);
                        }
                    }

                    if (sSymbols.length > 0) {
                        let aSymbolsToUse = sSymbols.split(",");
                        gWLDisplayed.length = 0;
                        for (let idxSymbol = 0; idxSymbol < aSymbolsToUse.length; idxSymbol++) {
                            let sSymbol = aSymbolsToUse[idxSymbol];
                            if (!isUndefined(oMDQ[sSymbol])) {
                                let oWLDisplayed = new WLDisplayed();
                                oWLDisplayed.symbol = sSymbol;
                                oWLDisplayed.assetType = oMDQ[sSymbol].assetType;

                                //get account position info if it exists
                                let oPositions = new Array();
                                for (let idxAccount = 0; idxAccount < gAccounts.length; idxAccount++) {
                                    if (gAccounts[idxAccount].positions.length > 0) {
                                        if (gAccounts[idxAccount].accountId == gWatchlists[idxWLSummaryMain].accountId) {
                                            for (let idxPositions = 0; idxPositions < gAccounts[idxAccount].positions.length; idxPositions++) {
                                                if (gAccounts[idxAccount].positions[idxPositions].symbol == sSymbol) {
                                                    let oPosition = new Position();
                                                    oPosition = gAccounts[idxAccount].positions[idxPositions];
                                                    oPosition.accountId = gAccounts[idxAccount].accountId;
                                                    oPosition.accountName = gAccounts[idxAccount].accountName;
                                                    oPositions[oPositions.length] = oPosition;
                                                    break;
                                                }
                                            }
                                            break;
                                        }
                                    }
                                }

                                oWLItemDetail = new WLItemDetail();
                                if (oWLDisplayed.assetType == "OPTION") {
                                    if (!isUndefined(oMDQ[sSymbol].mark)) {
                                        oWLItemDetail.lastPrice = oMDQ[sSymbol].mark;
                                    }
                                } else if (oWLDisplayed.assetType == "INDEX") {
                                    if (!isUndefined(oMDQ[sSymbol].lastPrice)) {
                                        oWLItemDetail.lastPrice = oMDQ[sSymbol].lastPrice;
                                    }
                                    if (!isUndefined(oMDQ[sSymbol].highPrice)) {
                                        oWLItemDetail.highPrice = oMDQ[sSymbol].highPrice;
                                    }
                                    if (!isUndefined(oMDQ[sSymbol].lowPrice)) {
                                        oWLItemDetail.lowPrice = oMDQ[sSymbol].lowPrice;
                                    }
                                    if (!isUndefined(oMDQ[sSymbol].netChange)) {
                                        oWLItemDetail.netChange = oMDQ[sSymbol].netChange;
                                    }
                                    if (!isUndefined(oMDQ[sSymbol].netPercentChangeInDouble)) {
                                        oWLItemDetail.netPercentChangeInDouble = oMDQ[sSymbol].netPercentChangeInDouble;
                                    }
                                } else {
                                    if (!isUndefined(oMDQ[sSymbol].lastPrice)) {
                                        oWLItemDetail.lastPrice = oMDQ[sSymbol].lastPrice;
                                    }
                                    if (!isUndefined(oMDQ[sSymbol].askPrice)) {
                                        oWLItemDetail.askPrice = oMDQ[sSymbol].askPrice;
                                    }
                                    if (!isUndefined(oMDQ[sSymbol].bidPrice)) {
                                        oWLItemDetail.bidPrice = oMDQ[sSymbol].bidPrice;
                                    }
                                    if (!isUndefined(oMDQ[sSymbol].highPrice)) {
                                        oWLItemDetail.highPrice = oMDQ[sSymbol].highPrice;
                                    }
                                    if (!isUndefined(oMDQ[sSymbol].lowPrice)) {
                                        oWLItemDetail.lowPrice = oMDQ[sSymbol].lowPrice;
                                    }
                                    if (!isUndefined(oMDQ[sSymbol].netChange)) {
                                        oWLItemDetail.netChange = oMDQ[sSymbol].netChange;
                                    }
                                    if (!isUndefined(oMDQ[sSymbol].netPercentChangeInDouble)) {
                                        oWLItemDetail.netPercentChangeInDouble = oMDQ[sSymbol].netPercentChangeInDouble;
                                    }

                                    if (!isUndefined(oMDQ[sSymbol].regularMarketLastPrice)) {
                                        oWLItemDetail.regularMarketLastPrice = oMDQ[sSymbol].regularMarketLastPrice;
                                    }

                                    if (!isUndefined(oMDQ[sSymbol].regularMarketNetChange)) {
                                        oWLItemDetail.regularMarketNetChange = oMDQ[sSymbol].regularMarketNetChange;
                                    }

                                    if (!isUndefined(oMDQ[sSymbol].regularMarketPercentChangeInDouble)) {
                                        oWLItemDetail.regularMarketPercentChangeInDouble = oMDQ[sSymbol].regularMarketPercentChangeInDouble;
                                    }
                                }
                                if (oPositions.length > 0) {
                                    for (let idxPositions = 0; idxPositions < oPositions.length; idxPositions++) {
                                        let oPosition = new Position();
                                        oPosition = oPositions[idxPositions];

                                        oWLItemDetail.shares = 0;
                                        oWLItemDetail.dayGain = 0.0;
                                        oWLItemDetail.costPerShare = 0.0;
                                        oWLItemDetail.gain = 0.0;
                                        oWLItemDetail.gainPercent = 0.0;
                                        oWLItemDetail.accountId = "";
                                        oWLItemDetail.marketValue = oPosition.marketValue;

                                        oWLItemDetail.accountId = oPosition.accountId;
                                        oWLItemDetail.accountName = oPosition.accountName;
                                        oWLItemDetail.shares = oPosition.longQuantity;
                                        oWLItemDetail.dayGain = oPosition.currentDayProfitLoss;
                                        oWLItemDetail.costPerShare = oPosition.averagePrice;
                                        if ((oWLItemDetail.shares > 0) || (oWLItemDetail.shares < 0))  {
                                            oWLItemDetail.gain = oWLItemDetail.shares * (oWLItemDetail.regularMarketLastPrice - oWLItemDetail.costPerShare);
                                            if (oWLItemDetail.costPerShare != 0.0) {
                                                oWLItemDetail.gainPercent = ((oWLItemDetail.regularMarketLastPrice - oWLItemDetail.costPerShare) / oWLItemDetail.costPerShare) * 100.0;
                                            }
                                        }
                                        oWLDisplayed.WLItemDetails[oWLDisplayed.WLItemDetails.length] = oWLItemDetail;
                                    }
                                } else {
                                    oWLDisplayed.WLItemDetails[oWLDisplayed.WLItemDetails.length] = oWLItemDetail;
                                }
                                gWLDisplayed[gWLDisplayed.length] = oWLDisplayed;
                            } else {
                                //it should never get here - it means that the current price for the symbol could not be found - should not continue because the results will be incorrect
                                //debugger
                                return; //give up and wait for all symbols to be found
                            }
                        }

                        //now show the results
                        let sLastWLName = "";
                        let sLastWLId = "";
                        let sLastWLAccountName = "";
                        let sLastWLAccountId = "";
                        let sThisId = "";
                        let sTmp = "";

                        if (gWLDisplayed.length > 0) {

                            gWLDisplayed.sort(sortBySymbol);

                            gWLSummaryDisplayed.length = 0;

                            for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
                                if ((gWatchlists[idxWL].name != gsAccountSavedOrders) &&
                                    (gWatchlists[idxWL].name != gsAccountOrders) &&
                                    (gWatchlists[idxWL].name != gsAccountWLSummary) &&
                                    (gWatchlists[idxWL].name != gsAccountOldGL) &&
                                    (gWatchlists[idxWL].name.substr(0, gsAccountOldGLBase.length) != gsAccountOldGLBase) &&
                                    (gWatchlists[idxWL].name.toUpperCase().indexOf("DIVIDEND") == -1) &&
                                    (gWatchlists[idxWL].accountId != gWatchlists[idxWL].watchlistId) &&
                                    (gWatchlists[idxWL].accountId == gWatchlists[idxWLSummaryMain].accountId)) {

                                    let iTotalSymbolsUp = 0;
                                    let iTotalSymbolsDown = 0;
                                    let iTotalSymbolsUpDay = 0;
                                    let iTotalSymbolsDownDay = 0;
                                    let sSymbolsThisWL = "";
                                    let sSep = "";

                                    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                                        if (gWatchlists[idxWL].WLItems[idxWLItem].bSelected) {
                                            sSymbolsThisWL = sSymbolsThisWL + sSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                                            sSep = ",";
                                        }
                                    }

                                    sSymbolsThisWL = "," + GetUniqueListOfSymbols(sSymbolsThisWL) + ",";

                                    sLastWLName = gWatchlists[idxWL].name;
                                    sLastWLAccountName = gWatchlists[idxWL].accountName;
                                    sLastWLAccountId = gWatchlists[idxWL].accountId;
                                    sLastWLId = gWatchlists[idxWL].watchlistId;
                                    sThisId = gWatchlists[idxWL].watchlistId + sLastWLAccountId;

                                    let dTotalCost = 0.0;
                                    let iLineCnt = 0;
                                    let dTotalHoldingsGain = 0.0;
                                    let dTotalGain = 0.0;
                                    let dTotalDayGain = 0.0;
                                    for (let idxDisplayed = 0; idxDisplayed < gWLDisplayed.length; idxDisplayed++) {
                                        let oWLDisplayed = new WLDisplayed();
                                        oWLDisplayed = gWLDisplayed[idxDisplayed];
                                        let sSymbol = oWLDisplayed.symbol;
                                        let oWLItemDetail = new WLItemDetail();
                                        let dCost = 0.0;
                                        let dQty = 0.0;
                                        let dLastPrice = 0.0;
                                        if (sSymbolsThisWL.indexOf("," + sSymbol + ",") != -1) {
                                            for (let idxItemDetail = 0; idxItemDetail < oWLDisplayed.WLItemDetails.length; idxItemDetail++) {
                                                oWLItemDetail = oWLDisplayed.WLItemDetails[idxItemDetail];
                                                if ((gWatchlists[idxWL].accountId == oWLItemDetail.accountId) ||
                                                    (oWLItemDetail.accountId == "")) {
                                                    iLineCnt++;
                                                    dLastPrice = oWLItemDetail.lastPrice;

                                                    //Qty
                                                    sTmp = FormatDecimalNumber(oWLItemDetail.shares, 5, 0, "");
                                                    dQty = parseFloat(sTmp);

                                                    sTmp = FormatDecimalNumber(oWLItemDetail.dayGain, 5, 2, "");
                                                    dTotalDayGain = dTotalDayGain + parseFloat(sTmp);
                                                    if (parseFloat(sTmp) < 0.0) {
                                                        if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                            iTotalSymbolsDownDay++;
                                                        }
                                                    } else if (parseFloat(sTmp) > 0.0) {
                                                        if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                            iTotalSymbolsUpDay++;
                                                        }
                                                    }

                                                    sTmp = FormatDecimalNumber(oWLItemDetail.gain, 5, 2, "");
                                                    if (parseFloat(sTmp) < 0.0) {
                                                        if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                            iTotalSymbolsDown++;
                                                        }
                                                    } else if (parseFloat(sTmp) > 0.0) {
                                                        if ((oWLItemDetail.shares > 0.0) || (oWLItemDetail.shares < 0.0)) {
                                                            iTotalSymbolsUp++;
                                                        }
                                                    }
                                                    //dTotalGain = dTotalGain + parseFloat(sTmp);
                                                    dTotalHoldingsGain = dTotalHoldingsGain + parseFloat(sTmp);

                                                    //Cost
                                                    sTmp = FormatDecimalNumber(oWLItemDetail.costPerShare, 5, 2, "");
                                                    dCost = parseFloat(sTmp);
                                                    dTotalCost = dTotalCost + (dCost * dQty);

                                                    //Old G/L
                                                    let dTmpOrig = 0.0;
                                                    for (let idxTmp = 0; idxTmp < gWatchlists[idxWL].WLItems.length; idxTmp++) {
                                                        if (gWatchlists[idxWL].WLItems[idxTmp].symbol == sSymbol) {
                                                            dTmpOrig = gWatchlists[idxWL].WLItems[idxTmp].priceInfo.averagePrice;
                                                            if (dQty > 0) {
                                                                dTmpOrig = dTmpOrig + (dQty * dLastPrice);
                                                            }

                                                            dTmpOrig = dTmpOrig + gWatchlists[idxWL].WLItems[idxTmp].priceInfo.oldgl;

                                                            break;
                                                        }
                                                    }
                                                    sTmp = FormatDecimalNumber(dTmpOrig, 5, 2, "");
                                                    let dTmp = parseFloat(sTmp);
                                                    dTotalGain = dTotalGain + dTmp;

                                                }
                                            }
                                        }

                                    }
                                    if (iLineCnt != 0) {

                                        if ((isUndefined(goWLSummaryDisplayed)) || (isUndefined(goWLSummaryDisplayed[sThisId]))) {
                                            let oT = {
                                                "watchlistName": sLastWLName,
                                                "dayUp": iTotalSymbolsUpDay,
                                                "dayDown": iTotalSymbolsDownDay,
                                                "dayCost": dTotalCost,
                                                "dayGain": dTotalDayGain,
                                                "dayGainPercent": (dTotalCost == 0 ? 0 : (dTotalDayGain / dTotalCost) * 100),
                                                "holdingsGain": dTotalHoldingsGain,
                                                "holdingsGainPercent": (dTotalCost == 0 ? 0 : (dTotalHoldingsGain / dTotalCost) * 100),
                                                "holdingsUp": iTotalSymbolsUp,
                                                "holdingsDown": iTotalSymbolsDown,
                                                "portfolioGain": dTotalGain
                                            }
                                            goWLSummaryDisplayed[sThisId] = oT;
                                        }
                                        let oSummaryDisplay = new WLSummaryDisplayed();
                                        oSummaryDisplay.accountId = sLastWLAccountId;
                                        oSummaryDisplay.accountName = sLastWLAccountName;
                                        let idxSummaryDisplayed = -1;
                                        if (gWLSummaryDisplayed.length == 0) {
                                            gWLSummaryDisplayed[gWLSummaryDisplayed.length] = oSummaryDisplay;
                                            idxSummaryDisplayed = 0;
                                        } else {
                                            for (let idx = 0; idx < gWLSummaryDisplayed.length; idx++) {
                                                if (gWLSummaryDisplayed[idx].accountId == oSummaryDisplay.accountId) {
                                                    idxSummaryDisplayed = idx;
                                                    break;
                                                }
                                            }
                                        }
                                        if (idxSummaryDisplayed > -1) {
                                            let oItemDay = new WLSummaryDayItemDetail();
                                            let oItemHolding = new WLSummaryHoldingItemDetail();
                                            let oItemPortfolio = new WLSummaryPortfolioItemDetail();
                                            oItemDay.cost = dTotalCost;
                                            oItemDay.down = iTotalSymbolsDownDay;
                                            oItemDay.gain = dTotalDayGain;
                                            if (dTotalCost == 0) {
                                                oItemDay.gainPercent = 0;
                                            } else {
                                                oItemDay.gainPercent = (dTotalDayGain / dTotalCost) * 100;
                                            }
                                            oItemDay.up = iTotalSymbolsUpDay;
                                            oItemDay.watchlistName = sLastWLName;
                                            oItemDay.watchlistId = sLastWLId;

                                            oItemHolding.gain = dTotalHoldingsGain;
                                            if (dTotalCost == 0) {
                                                oItemHolding.gainPercent = 0;
                                            } else {
                                                oItemHolding.gainPercent = (dTotalHoldingsGain / dTotalCost) * 100;
                                            }
                                            oItemHolding.up = iTotalSymbolsUp;
                                            oItemHolding.down = iTotalSymbolsDown;
                                            oItemHolding.watchlistName = sLastWLName;
                                            oItemHolding.watchlistId = sLastWLId;

                                            oItemPortfolio.gain = dTotalGain;
                                            oItemPortfolio.watchlistName = sLastWLName;
                                            oItemPortfolio.watchlistId = sLastWLId;

                                            gWLSummaryDisplayed[idxSummaryDisplayed].WLSummaryDayItemDetails[gWLSummaryDisplayed[idxSummaryDisplayed].WLSummaryDayItemDetails.length] = oItemDay;
                                            gWLSummaryDisplayed[idxSummaryDisplayed].WLSummaryHoldingItemDetails[gWLSummaryDisplayed[idxSummaryDisplayed].WLSummaryHoldingItemDetails.length] = oItemHolding;
                                            gWLSummaryDisplayed[idxSummaryDisplayed].WLSummaryPortfolioItemDetails[gWLSummaryDisplayed[idxSummaryDisplayed].WLSummaryPortfolioItemDetails.length] = oItemPortfolio;
                                        } else {
                                            //should never get here
                                        }
                                    }

                                }
                            }
                            //-------------------------------------------------------------------------------
                            //have all data so show results
                            let sHeadingTextAlign = "center";
                            let sBodyTextAlign = "center";
                            let sTableRowVerticalAlignment = "middle";
                            let iLineCnt = 0;
                            let sThisDiv = "";
                            let sThisTable = "";
                            if (gWLSummaryDisplayed.length > 0) {
                                for (let idxWLSummary = 0; idxWLSummary < gWLSummaryDisplayed.length; idxWLSummary++) {
                                    gWLSummaryDisplayed[idxWLSummary].WLSummaryDayItemDetails.sort(sortByDayGainPercent);
                                    gWLSummaryDisplayed[idxWLSummary].WLSummaryHoldingItemDetails.sort(sortByHoldingGainPercent);
                                    gWLSummaryDisplayed[idxWLSummary].WLSummaryPortfolioItemDetails.sort(sortByPortfolioGain);

                                    //get WL ranking
                                    //debugger
                                    let aRank = new Array();
                                    for (let idxDisplayed = 0; idxDisplayed < gWLSummaryDisplayed[idxWLSummary].WLSummaryDayItemDetails.length; idxDisplayed++) {
                                        let oWLSummaryDayItem = new WLSummaryDayItemDetail();
                                        oWLSummaryDayItem = gWLSummaryDisplayed[idxWLSummary].WLSummaryDayItemDetails[idxDisplayed];
                                        if ((oWLSummaryDayItem.cost > 0) && (oWLSummaryDayItem.watchlistName.toUpperCase().indexOf("MY COLLECTION") == -1)) {
                                            //let iRank = idxDisplayed + 1;
                                            let iRank = 0;
                                            for (let idxRank = 0; idxRank < gWLSummaryDisplayed[idxWLSummary].WLSummaryDayItemDetails.length; idxRank++) {
                                                if (oWLSummaryDayItem.watchlistId == gWLSummaryDisplayed[idxWLSummary].WLSummaryHoldingItemDetails[idxRank].watchlistId) {
                                                    iRank = iRank + idxRank + 1;
                                                }
                                                if (oWLSummaryDayItem.watchlistId == gWLSummaryDisplayed[idxWLSummary].WLSummaryPortfolioItemDetails[idxRank].watchlistId) {
                                                    iRank = iRank + idxRank + 1;
                                                }
                                            }
                                            let oRank = new WLSummaryRank();
                                            oRank.rank = iRank;
                                            oRank.watchlistId = oWLSummaryDayItem.watchlistId;
                                            oRank.watchlistName = oWLSummaryDayItem.watchlistName;
                                            aRank[aRank.length] = oRank;
                                        }
                                    }
                                    aRank.sort(sortByRank);
                                    let iLastRank = 0;
                                    let iCurrentRank = 0;
                                    for (let idxRank = 0; idxRank < aRank.length; idxRank++) {
                                        if (aRank[idxRank].rank > iLastRank) {
                                            iCurrentRank++;
                                            iLastRank = aRank[idxRank].rank;
                                        }
                                        for (let idxDisplayed = 0; idxDisplayed < gWLSummaryDisplayed[idxWLSummary].WLSummaryDayItemDetails.length; idxDisplayed++) {
                                            if (gWLSummaryDisplayed[idxWLSummary].WLSummaryDayItemDetails[idxDisplayed].watchlistId == aRank[idxRank].watchlistId) {
                                                gWLSummaryDisplayed[idxWLSummary].WLSummaryDayItemDetails[idxDisplayed].rank = iCurrentRank;
                                                gWLSummaryDisplayed[idxWLSummary].WLSummaryDayItemDetails[idxDisplayed].rankTotal = iLastRank;
                                                break;
                                            }
                                        }
                                    }

                                    sThisDiv = "";
                                    sLastWLName = gWatchlists[idxWLSummaryMain].name;
                                    sLastWLAccountName = gWatchlists[idxWLSummaryMain].accountName;
                                    sLastWLAccountId = gWatchlists[idxWLSummaryMain].accountId;
                                    sThisId = gWatchlists[idxWLSummaryMain].watchlistId + sLastWLAccountId;

                                    sThisDiv = sThisDiv + "<div style=\"width:" + lengthsWL.WLWidth + "; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                                    sThisDiv = sThisDiv + "<table style=\"width:" + lengthsWL.WLWidth + "; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
                                    sThisDiv = sThisDiv + "<tr>";

                                    sThisDiv = sThisDiv + "<th style=\"height:25px; width:" + lengthsWLWLCol1Width.toString() + "px; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
                                        "<span style=\"vertical-align: middle;\"><b>" + sLastWLAccountName + "--" + sLastWLName + "&nbsp;&nbsp;</b></span>" +
                                        "<span style=\"vertical-align: middle;\"><img src=\"print-icon25px.png\" onclick=\"printdiv('xxxPrintDivNamexxx')\" /></span>" +
                                        "<span style=\"vertical-align: middle;\" id=\"spanSummaryDate" + sThisId + "\" name=\"spanSummaryDate" + sThisId + "\">&nbsp;&nbsp;&nbsp;&nbsp;" + sDate + "</b></span></th > ";
                                    sThisDiv = sThisDiv + "<th style=\"height:25px; width:" + lengthsWL.WLCol2Width.toString() + "px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDiv('" + gWatchlists[idxWLSummaryMain].watchlistId + "','" + sLastWLAccountId + "')\">&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;&nbsp;</th>";

                                    sThisDiv = sThisDiv + "</tr>";

                                    sThisDiv = sThisDiv + "<tr>";

                                    sThisDiv = sThisDiv + "<td colspan=\"2\" style=\"vertical-align:top;border-width:1px; border-style:solid;border-spacing:1px;border-color:White\">";


                                    sThisDiv = sThisDiv + "<div id=\"divtable" + sThisId + "\" style =\"border-spacing:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
                                    sThisTable = "";
                                    sThisTable = sThisTable + "<table style=\"border-collapse:collapse; border: 0px solid black;background-color:" + gsWLTableBackgroundColor + "; width:100%;border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";

                                    sThisTable = sThisTable + "<tr height=\"20\">";
                                    let sEndSpaces = "&nbsp;"
                                    let sNameSpaces = ""
                                    let sColumnSeparator = "border-top-width:0px; border-bottom-width:0px; border-left-width:0px; border-right-width:1.5px; border-style:solid; border-spacing:1px; border-color:black;";
                                    sThisTable = sThisTable + "<td style=\"text-align:" + sHeadingTextAlign + ";vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\"><b><I>&nbsp;&nbsp;</I></b></td>";
                                    sThisTable = sThisTable + "<td style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\"><b><I>" + sNameSpaces + "Name" + sEndSpaces + "</I></b></td>";
                                    sThisTable = sThisTable + "<td style=\"text-align:" + sHeadingTextAlign + ";vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\"><b><I>Day&nbsp;Gain(%)" + sEndSpaces + "</I></b></td>";
                                    sThisTable = sThisTable + "<td style=\"text-align:" + sHeadingTextAlign + ";vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\"><b><I>Day&nbsp;Gain($)" + sEndSpaces + "</I></b></td>";
                                    sThisTable = sThisTable + "<td style=\"text-align:" + sHeadingTextAlign + ";vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\"><b><I>Cost" + sEndSpaces + "</I></b></td>";
                                    sThisTable = sThisTable + "<td style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\"><b><I>" + sNameSpaces + "Name" + sEndSpaces + "</I></b></td>";
                                    sThisTable = sThisTable + "<td style=\"text-align:" + sHeadingTextAlign + ";vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\"><b><I>Hold&nbsp;Gain(%)" + sEndSpaces + "</I></b></td>";
                                    sThisTable = sThisTable + "<td style=\"text-align:" + sHeadingTextAlign + ";vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\"><b><I>Hold&nbsp;Gain($)" + sEndSpaces + "</I></b></td>";
                                    sThisTable = sThisTable + "<td style=\"text-align:left;vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\"><b><I>" + sNameSpaces + "Name" + sEndSpaces + "</I></b></td>";
                                    sThisTable = sThisTable + "<td style=\"text-align:" + sHeadingTextAlign + ";vertical-align:" + sTableRowVerticalAlignment + ";border-width:0px;\"><b><I>Portfolio&nbsp;Gain($)" + sEndSpaces + "</I></b></td>";

                                    sThisTable = sThisTable + "</tr>";

                                    for (let idxDisplayed = 0; idxDisplayed < gWLSummaryDisplayed[idxWLSummary].WLSummaryDayItemDetails.length; idxDisplayed++) {
                                        let oWLSummaryDayItem = new WLSummaryDayItemDetail();
                                        let oWLSummaryHoldingItem = new WLSummaryHoldingItemDetail();
                                        let oWLSummaryPortfolioItem = new WLSummaryPortfolioItemDetail();
                                        oWLSummaryDayItem = gWLSummaryDisplayed[idxWLSummary].WLSummaryDayItemDetails[idxDisplayed];
                                        oWLSummaryHoldingItem = gWLSummaryDisplayed[idxWLSummary].WLSummaryHoldingItemDetails[idxDisplayed];
                                        oWLSummaryPortfolioItem = gWLSummaryDisplayed[idxWLSummary].WLSummaryPortfolioItemDetails[idxDisplayed];

                                        let sSummaryOldId = oWLSummaryDayItem.watchlistId + sLastWLAccountId;

                                        iLineCnt++;
                                        if ((iLineCnt % 2) == 0) {
                                            sThisTable = sThisTable + "<tr  height=\"20\" style=\"background-color:" + gsWLTableEvenRowBackgroundColor + ";\">";
                                        } else {
                                            sThisTable = sThisTable + "<tr  height=\"20\" style=\"background-color:" + gsWLTableOddRowBackgroundColor + ";\">";
                                        }

                                        //line number
                                        sThisTable = sThisTable + "<td style=\"text-align:left; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\">" + iLineCnt.toString() + "</td>";

                                        //Day WL Name
                                        sTmp = sNameSpaces + oWLSummaryDayItem.watchlistName;
                                        sTmp = sTmp + "<span style=\"vertical-align:" + sTableRowVerticalAlignment + ";\">&nbsp;(</span>";
                                        sTmp = sTmp + "<span style=\"color:green;vertical-align:" + sTableRowVerticalAlignment + ";\">" + oWLSummaryDayItem.up.toString() + "</span>"
                                        sTmp = sTmp + "<span style=\"vertical-align:" + sTableRowVerticalAlignment + ";\">,</span>";
                                        sTmp = sTmp + "<span style=\"color:" + gsNegativeColor + ";vertical-align:" + sTableRowVerticalAlignment + ";\">" + oWLSummaryDayItem.down.toString() + "</span>";
                                        if (oWLSummaryDayItem.rank > 0) {
                                            sTmp = sTmp + "<span style=\"vertical-align:" + sTableRowVerticalAlignment + ";\">)&nbsp;" + oWLSummaryDayItem.rank.toString() + "</span>";
//                                            sTmp = sTmp + "<span style=\"vertical-align:" + sTableRowVerticalAlignment + ";\">)&nbsp;" + oWLSummaryDayItem.rank.toString() + "&nbsp;" + oWLSummaryDayItem.rankTotal.toString() + "</span>";
                                        } else {
                                            sTmp = sTmp + "<span style=\"vertical-align:" + sTableRowVerticalAlignment + ";\">)</span>";
                                        }
                                        sThisTable = sThisTable + "<td style=\"text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";

                                        //Day gain percent
                                        sTmp = FormatDecimalNumber(oWLSummaryDayItem.gainPercent, 5, 2, "");
                                        if ((goWLSummaryDisplayed[sSummaryOldId].dayGainPercent == oWLSummaryDayItem.gainPercent) || bDontHighlightChanges) {
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:" + gsNegativeColor + ";text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "%</td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:green;text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "%</td>";
                                                } else {
                                                    sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "%</td>";
                                                }
                                            }
                                        } else {
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">nbsp;</td>";
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:" + gsNegativeColor + ";text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "%</b></td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:green;text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "%</b></td>";
                                                } else {
                                                    sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "%</b></td>";
                                                }
                                            }
                                            goWLSummaryDisplayed[sSummaryOldId].dayGainPercent = oWLSummaryDayItem.gainPercent;
                                        }

                                        //Day gain
                                        sTmp = FormatDecimalNumber(oWLSummaryDayItem.gain, 5, 2, "");
                                        if ((goWLSummaryDisplayed[sSummaryOldId].dayGain == oWLSummaryDayItem.gain) || bDontHighlightChanges) {
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:" + gsNegativeColor + ";text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:green;text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                } else {
                                                    sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                }
                                            }
                                        } else {
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">nbsp;</td>";
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:" + gsNegativeColor + ";text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:green;text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                } else {
                                                    sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                }
                                            }
                                            goWLSummaryDisplayed[sSummaryOldId].dayGain = oWLSummaryDayItem.gain;
                                        }

                                        //Day cost
                                        sTmp = FormatDecimalNumber(oWLSummaryDayItem.cost, 5, 2, "");
                                        if ((goWLSummaryDisplayed[sSummaryOldId].dayCost == oWLSummaryDayItem.cost) || bDontHighlightChanges) {
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\">&nbsp;</td>";
                                            } else {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\">" + sTmp + "</td>";
                                            }
                                        } else {
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\">nbsp;</td>";
                                            } else {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\"><b>" + sTmp + "</b></td>";
                                            }
                                            goWLSummaryDisplayed[sSummaryOldId].dayCost = oWLSummaryDayItem.cost;
                                        }

                                        //Holding WL Name
                                        sTmp = sNameSpaces + oWLSummaryHoldingItem.watchlistName;
                                        sTmp = sTmp + "<span style=\"vertical-align:" + sTableRowVerticalAlignment + ";\">&nbsp;(</span>";
                                        sTmp = sTmp + "<span style=\"color:green;vertical-align:" + sTableRowVerticalAlignment + ";\">" + oWLSummaryHoldingItem.up.toString() + "</span>"
                                        sTmp = sTmp + "<span style=\"vertical-align:" + sTableRowVerticalAlignment + ";\">,</span>";
                                        sTmp = sTmp + "<span style=\"color:" + gsNegativeColor + ";vertical-align:" + sTableRowVerticalAlignment + ";\">" + oWLSummaryHoldingItem.down.toString() + "</span>";
                                        sTmp = sTmp + "<span style=\"vertical-align:" + sTableRowVerticalAlignment + ";\">)</span>";
                                        sThisTable = sThisTable + "<td style=\"text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";

                                        //Holding gain percent
                                        sTmp = FormatDecimalNumber(oWLSummaryHoldingItem.gainPercent, 5, 2, "");
                                        if ((goWLSummaryDisplayed[sSummaryOldId].holdingGainPercent == oWLSummaryHoldingItem.gainPercent) || bDontHighlightChanges) {
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:" + gsNegativeColor + ";text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "%</td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:green;text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "%</td>";
                                                } else {
                                                    sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "%</td>";
                                                }
                                            }
                                        } else {
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">nbsp;</td>";
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:" + gsNegativeColor + ";text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "%</b></td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:green;text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "%</b></td>";
                                                } else {
                                                    sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "%</b></td>";
                                                }
                                            }
                                            goWLSummaryDisplayed[sSummaryOldId].holdingGainPercent = oWLSummaryHoldingItem.gainPercent;
                                        }

                                        //Holding gain
                                        sTmp = FormatDecimalNumber(oWLSummaryHoldingItem.gain, 5, 2, "");
                                        if ((goWLSummaryDisplayed[sSummaryOldId].holdingGain == oWLSummaryHoldingItem.gain) || bDontHighlightChanges) {
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\">&nbsp;</td>";
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:" + gsNegativeColor + ";text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\">" + sTmp + "</td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:green;text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\">" + sTmp + "</td>";
                                                } else {
                                                    sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\">" + sTmp + "</td>";
                                                }
                                            }
                                        } else {
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\">nbsp;</td>";
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:" + gsNegativeColor + ";text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\"><b>" + sTmp + "</b></td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:green;text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\"><b>" + sTmp + "</b></td>";
                                                } else {
                                                    sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + ";" + sColumnSeparator + "\"><b>" + sTmp + "</b></td>";
                                                }
                                            }
                                            goWLSummaryDisplayed[sSummaryOldId].holdingGain = oWLSummaryHoldingItem.gain;
                                        }

                                        //Portfolio WL Name
                                        sTmp = sNameSpaces + oWLSummaryPortfolioItem.watchlistName;
                                        sThisTable = sThisTable + "<td style=\"text-align:left; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";

                                        //Portfolio gain percent
                                        sTmp = FormatDecimalNumber(oWLSummaryPortfolioItem.gain, 5, 2, "");
                                        if ((goWLSummaryDisplayed[sSummaryOldId].portfolioGain == oWLSummaryPortfolioItem.gain) || bDontHighlightChanges) {
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">&nbsp;</td>";
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:" + gsNegativeColor + ";text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:green;text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                } else {
                                                    sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">" + sTmp + "</td>";
                                                }
                                            }
                                        } else {
                                            //debugger
                                            if (sTmp == "") {
                                                sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \">nbsp;</td>";
                                            } else {
                                                if (parseFloat(sTmp) < 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:" + gsNegativeColor + ";text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                } else if (parseFloat(sTmp) > 0.0) {
                                                    sThisTable = sThisTable + "<td style=\"color:green;text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                } else {
                                                    sThisTable = sThisTable + "<td style=\"text-align:" + sBodyTextAlign + "; vertical-align:" + sTableRowVerticalAlignment + "; border-width:0px; \"><b>" + sTmp + "</b></td>";
                                                }
                                            }
                                            goWLSummaryDisplayed[sSummaryOldId].portfolioGain = oWLSummaryPortfolioItem.gain;
                                        }

                                        sThisTable = sThisTable + "</tr>";

                                    }
                                    sThisTable = sThisTable + "</table >";
                                    sThisDiv = sThisDiv + sThisTable + "</div ></td ></tr ></table ></div > ";

                                    if (gWatchlists[idxWLSummaryMain].spanName == "") {
                                        gWatchlists[idxWLSummaryMain].spanName = gWatchlists[idxWLSummaryMain].watchlistId + gWatchlists[idxWLSummaryMain].accountId;
                                        sThisDiv = sThisDiv.replace("xxxPrintDivNamexxx", gWatchlists[idxWLSummaryMain].spanName);
                                        wlAddDiv(gWatchlists[idxWLSummaryMain].spanName, sThisDiv);
                                    } else {
                                        if (document.getElementById(gWatchlists[idxWLSummaryMain].spanName).innerHTML == "") {
                                            sThisDiv = sThisDiv.replace("xxxPrintDivNamexxx", gWatchlists[idxWLSummaryMain].spanName);
                                            document.getElementById(gWatchlists[idxWLSummaryMain].spanName).innerHTML = sThisDiv;
                                        } else {
                                            if (!isUndefined(document.getElementById("spanSummaryDate" + sThisId))) {
                                                document.getElementById("spanSummaryDate" + sThisId).innerHTML = "&nbsp;&nbsp;&nbsp;&nbsp;" + sDate;
                                            }
                                            document.getElementById("divtable" + sThisId).innerHTML = sThisTable;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

function GetWatchlistsToImport() {
    let sWLExclusionList = ",DEFAULT,EVERYTHING,INDEXES,"

    let oCMLength = oCMWLToImport.length;
    let oOldWL = new Array();

    if (oCMLength > 0) {
        for (let idxWLCur = 0; idxWLCur < gWatchlistsToImport.length; idxWLCur++) {
            oOldWL[oOldWL.length] = gWatchlistsToImport[idxWLCur]
        }
        gWatchlistsToImport.length = 0;
        let bOKToUse = true;
        for (let idxWL = 0; idxWL < oCMLength; idxWL++) {
            let oWL = new WLWatchList();
            oWL.accountId = oCMWLToImport[idxWL].accountId;
            oWL.watchlistId = oCMWLToImport[idxWL].watchlistId
            oWL.name = oCMWLToImport[idxWL].name;
            GetdefaultUpdateGLDate(oWL);
            if (oWL.name.toUpperCase().indexOf("CURRENT TRADE") != -1) {
                oWL.sSortOrderFields = gsSortOrderFields.CatalystDate; //10/20/21
                oWL.iSortOrderAscDesc = 0; //0 - ascending, 1 - descending //10/22/21
            }
            if (sWLExclusionList.indexOf("," + UnReplace_XMLChar(oWL.name).toUpperCase() + ",") == -1) {
                if (gAccounts.length > 0) {
                    for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
                        if (oWL.accountId == gAccounts[idxAccounts].accountId) {
                            oWL.accountName = gAccounts[idxAccounts].accountName;
                            if (gAccounts[idxAccounts].CBliquidationValue < gdAccountMinimumLiquidationValue) {
                                bOKToUse = false;
                            }
                            break;
                        }
                    }
                }
                if (bOKToUse) {
                    if (!isUndefined(oCMWLToImport[idxWL].watchlistItems)) {
                        if (oCMWLToImport[idxWL].watchlistItems.length > 0) {
                            let sSymbolsFound = ",";
                            for (let idxWLItem = 0; idxWLItem < oCMWLToImport[idxWL].watchlistItems.length; idxWLItem++) {
                                if (oCMWLToImport[idxWL].watchlistItems[idxWLItem].instrument.symbol.indexOf("|") != -1) {
                                    let vTmp = oCMWLToImport[idxWL].watchlistItems[idxWLItem].instrument.symbol.split("|");
                                    oCMWLToImport[idxWL].watchlistItems[idxWLItem].instrument.symbol = vTmp[0];
                                    oCMWLToImport[idxWL].watchlistItems[idxWLItem].instrument.symbolDescription = vTmp[1];
                                } else {
                                    oCMWLToImport[idxWL].watchlistItems[idxWLItem].instrument.symbolDescription = "";
                                }
                                if (sSymbolsFound.indexOf("," + oCMWLToImport[idxWL].watchlistItems[idxWLItem].instrument.symbol + ",") == -1) {
                                    sSymbolsFound = sSymbolsFound + oCMWLToImport[idxWL].watchlistItems[idxWLItem].instrument.symbol + ",";
                                    let oWLItem = new WLItem();
                                    oWLItem.assetType = oCMWLToImport[idxWL].watchlistItems[idxWLItem].instrument.assetType;
                                    oWLItem.symbol = oCMWLToImport[idxWL].watchlistItems[idxWLItem].instrument.symbol;
                                    oWLItem.symbolDescription = oCMWLToImport[idxWL].watchlistItems[idxWLItem].instrument.symbolDescription;

                                    oWLItem.sequenceId = oCMWLToImport[idxWL].watchlistItems[idxWLItem].sequenceId;
                                    if (!isUndefined(oCMWLToImport[idxWL].watchlistItems[idxWLItem].purchasedDate)) {
                                        let oWLPD = new WLPurchasedDateHidden();
                                        oWLPD = isPurchasedDateHidden(oCMWLToImport[idxWL].watchlistItems[idxWLItem].purchasedDate);
                                        oWLItem.purchasedDate = oWLPD.purchasedDate;
                                        oWLItem.bHidden = oWLPD.bHidden;
                                    }

                                    oWLItem.priceInfo.averagePrice = oCMWLToImport[idxWL].watchlistItems[idxWLItem].commission;
                                    if (oWLItem.priceInfo.averagePrice > 1000000.0) {
                                        oWLItem.priceInfo.averagePrice = -1 * (oWLItem.priceInfo.averagePrice - 1000000.0);
                                    }

                                    if (!isUndefined(oCMWLToImport[idxWL].watchlistItems[idxWLItem].averagePrice)) {
                                        oWLItem.priceInfo.GLUpdateDate = (oCMWLToImport[idxWL].watchlistItems[idxWLItem].averagePrice + 1000000000) * 1000;
                                    }

                                    if (!isUndefined(oCMWLToImport[idxWL].watchlistItems[idxWLItem].quantity)) {
                                        oWLItem.priceInfo.GLUpdateStartDate = (oCMWLToImport[idxWL].watchlistItems[idxWLItem].quantity + 1000000000) * 1000;
                                    }

                                    oWL.WLItems[oWL.WLItems.length] = oWLItem;
                                }
                            }
                            oWL.WLItems.sort(sortBySymbol);
                        }
                    }
                    gWatchlistsToImport[gWatchlistsToImport.length] = oWL;
                }
            }
        }

        //add an Account Old GL watchlist for each account 
        gSymbolsGLToImport = [];
        for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
            oAccount = new Account();
            oAccount = gAccounts[idxAccounts];
            if (gAccounts[idxAccounts].CBliquidationValue >= gdAccountMinimumLiquidationValue) {
                if (gWatchlistsToImport.length > 0) {
                    let sSymbols = [];
                    for (let idxWL = 0; idxWL < gWatchlistsToImport.length; idxWL++) {
                        if (gWatchlistsToImport[idxWL].accountId == oAccount.accountId) {
                            let oWLOld = new WLWatchList();
                            oWLOld = gWatchlistsToImport[idxWL];
                            if (oWLOld.name.substr(0, gsAccountOldGLBase.length) == gsAccountOldGLBase) {
                                for (let idxSymbol = 0; idxSymbol < oWLOld.WLItems.length; idxSymbol++) {
                                    let sSymbol = oWLOld.WLItems[idxSymbol].symbol;
                                    let sSymbolDescription = oWLOld.WLItems[idxSymbol].symbolDescription;
                                    let oT = {
                                        "symbol": sSymbol,
                                        "symbolDescription": sSymbolDescription,
                                        "averagePrice": oWLOld.WLItems[idxSymbol].priceInfo.averagePrice,
                                        "sequenceId": oWLOld.WLItems[idxSymbol].sequenceId,
                                        "WLName": oWLOld.name,
                                        "WLId": oWLOld.watchlistId
                                    }
                                    sSymbols[oWLOld.WLItems[idxSymbol].symbol] = oT;
                                }
                            }
                        }
                    }
                    //now have all of the symbols and OldGL values so create the gOldGLSymbols array
                    for (var key in sSymbols) {
                        let oT = {
                            "symbol": sSymbols[key].symbol,
                            "symbolDescription": sSymbols[key].symbolDescription,
                            "averagePrice": sSymbols[key].averagePrice,
                            "sequenceId": sSymbols[key].sequenceId,
                            "WLName": sSymbols[key].WLName,
                            "WLId": sSymbols[key].WLId
                        }
                        gSymbolsGLToImport[oAccount.accountId + sSymbols[key].symbol] = oT;
                    }
                }
            }
        }

        gWatchlistsToImport.sort(sortByWLAccountandWLName);
    }
}

function hideTDAPIError() {
    giAPIErrorTimeoutId = 0;
    document.getElementById("divTDAPIError").innerHTML = "";
    document.getElementById("divTDAPIError").style.display = "none";
    MoveDivs(false);
}

function ImportALLWL(bFirstTime, iProgressIncrementIn, iNumSuccessIn, idxWLStart, idxWLItemStart, sWLIdIn) {

    let iNumSuccess = iNumSuccessIn;
    let iProgressIncrement = iProgressIncrementIn;
    let sWLId = sWLIdIn;

    if (bFirstTime) {
        let iWLCount = 0;
        for (let idxWL = idxWLStart; idxWL < gWatchlistsToImport.length; idxWL++) {
            let oWL = new WLWatchList();
            oWL = gWatchlistsToImport[idxWL];
            if (oWL.name.toUpperCase().substr(0, "OLDGL".length) != "OLDGL") {
                iWLCount++;
            }
        }

        giProgress = 0;
        iProgressIncrement = 100 / iWLCount;
        gsLastErrors.length = 0;
        gsAllSuccess.length = 0;
        giTDPostOrderRetryCnt = 0;
        ShowProgress(true, false);

    }
    for (let idxWL = idxWLStart; idxWL < gWatchlistsToImport.length; idxWL++) {
        let oWL = new WLWatchList();
        oWL = gWatchlistsToImport[idxWL];
        if (oWL.name.toUpperCase().substr(0, "OLDGL".length) != "OLDGL") {
            let sAccountName = Replace_XMLChar(oWL.accountName);
            let sAccountId = Replace_XMLChar(oWL.accountId);
            for (let idxWLItem = idxWLItemStart; idxWLItem < oWL.WLItems.length; idxWLItem++) {
                let sHidden = (oWL.WLItems[idxWLItem].bHidden ? "1" : "0");
                if (idxWLItem == 0) {
                    //insert new WLMain record
                    let iLastUpdateDate = GetHighestUpdateDateImport(idxWL, false).toString();
                    //let sLastUpdateDate = ((iLastUpdateDate / 1000) - 1000000000).toString();
                    let sLastUpdateDate = Math.floor(iLastUpdateDate).toString();

                    let s = "<?xml version=\"1.0\"?>" + "\r\n";
                    s = s + "<command><commandtext>";
                    s = s + "AddWLMain '" + sAccountId + "', '" + oWL.name + "', '" + sAccountName + "', '" + oWL.defaultUpdateGLDate + "', '" + sLastUpdateDate + "', '0', ''";
                    s = s + "</commandtext>";
                    s = s + "<returnsvalues>True</returnsvalues>";
                    s = s + "</command>";

                    switch (PostWLHTTP(s, 1)) {
                        case 0: //success
                            {
                                if (giProgress < 100) {
                                    giProgress = giProgress + iProgressIncrement;
                                }
                                //should have new WLId in oCMTemp1
                                if (oCMTemp1.length > 0) {
                                    if (!isUndefined(oCMTemp1[0].wlid)) {
                                        sWLId = oCMTemp1[0].wlid;
                                    } else {
                                        gsLastError = "Could not add WLMain record for " + oWL.name;
                                    }
                                } else {
                                    gsLastError = "Could not add WLMain record for " + oWL.name;
                                }
                                break;
                            }
                        default: //unknown error
                            {
                                ShowProgress(false, true);
                                gbDoingCreateOrders = false;
                                SetDefault();
                                alert(gsLastError);
                                break;
                            }
                    }
                }

                if (sWLId == "") {
                    ShowProgress(false, true);
                    gbDoingCreateOrders = false;
                    SetDefault();
                    alert(gsLastError);
                    return
                    break;
                } else {
                    //add wldetail
                    let oWLItem = oWL.WLItems[idxWLItem];
                    let sSymbol = Replace_XMLChar(oWLItem.symbol);
                    let sSymbolDesc = "";
                    let sOldGL = "";
                    let sAssetType = oWLItem.assetType;
                    let sPurchasedDate = "";
                    let sCatalystDate = "";
                    if (oWL.name.indexOf("Current Trade") != -1) {
                        sCatalystDate = Replace_XMLChar(oWLItem.purchasedDate);
                    } else {
                        sPurchasedDate = Replace_XMLChar(oWLItem.purchasedDate);
                    }

                    if (!((gSymbolsGLToImport[oWL.accountId + sSymbol] == null) || (isUndefined(gSymbolsGLToImport[oWL.accountId + sSymbol])))) {
                        if (gSymbolsGLToImport[oWL.accountId + sSymbol].symbolDescription != "") {
                            sSymbolDesc = Replace_XMLChar(gSymbolsGLToImport[oWL.accountId + sSymbol].symbolDescription);
                        }
                        if (gSymbolsGLToImport[oWL.accountId + sSymbol].averagePrice != "") {
                            let dSelectNum = gSymbolsGLToImport[oWL.accountId + sSymbol].averagePrice;
                            sOldGL = FormatDecimalNumber(dSelectNum, 3, 2, "");
                        }
                    }

                    let sGLUpdateDate = Math.floor(oWLItem.priceInfo.GLUpdateDate).toString();
                    let sGLUpdateStartDate = Math.floor(oWLItem.priceInfo.GLUpdateStartDate).toString();
                    let dSelectNum = oWLItem.priceInfo.averagePrice;
                    let sGL = FormatDecimalNumber(dSelectNum, 3, 2, "");

                    /*
                     * p_whattoupdate int,
p_wlid int,
p_acquireddate varchar (10),
p_symbol varchar(20),
p_sym_description varchar(50),
p_assettype varchar(50),
p_gl varchar (20),
p_gllaststartdate varchar (20),
p_gllastenddate varchar (20),
p_hidden char(1),
p_oldgl varchar (20),
p_catalystdate varchar (10))
                     * 
                     * */
                    s = "<?xml version=\"1.0\"?>" + "\r\n";
                    s = s + "<command><commandtext>";
                    s = s + "UpdateWLDetail '0', '" + sWLId + "', '" + sPurchasedDate + "', '" + sSymbol + "', '" +
                        sSymbolDesc + "', '" + sAssetType + "', '" +
                        sGL + "', '" + sGLUpdateStartDate + "', '" +
                        sGLUpdateDate + "', '" + sHidden + "', '" + sOldGL + "', '" + sCatalystDate + "'";
                    s = s + "</commandtext>";
                    s = s + "<returnsvalues>True</returnsvalues>";
                    s = s + "</command>";

                    let swlidRet = "";
                    switch (PostWLHTTP(s, 1)) {
                        case 0: //success
                            {
                                //should have new SymbolID in oCMTemp1
                                if (oCMTemp1.length > 0) {
                                    if (!isUndefined(oCMTemp1[0].wlid)) {
                                        swlidRet = oCMTemp1[0].wlid;
                                        iNumSuccess++;
                                        window.setTimeout("ImportALLWL(false," + iProgressIncrement.toString() + ", " + iNumSuccess.toString() + ", " + idxWL.toString() + ", " + (idxWLItem + 1).toString() + ", '" + sWLId + "')", 10); //do next watchlist item
                                        return;
                                    } else {
                                        gsLastError = "Could not get wlid for " + sSymbol;
                                        ShowProgress(false, true);
                                        gbDoingCreateOrders = false;
                                        SetDefault();
                                        alert(gsLastError);
                                        return;
                                    }
                                } else {
                                    gsLastError = "Could not get wlid for " + sSymbol;
                                    ShowProgress(false, true);
                                    gbDoingCreateOrders = false;
                                    SetDefault();
                                    alert(gsLastError);
                                    return;
                                }
                                break;
                            }
                        default: //unknown error
                            {
                                ShowProgress(false, true);
                                gbDoingCreateOrders = false;
                                SetDefault();
                                alert(gsLastError);
                                return;
                            }
                    }
                }

            }
            gsAllSuccess[gsAllSuccess.length] = oWL.name + " with " + iNumSuccess.toString() + " symbols.";
            window.setTimeout("ImportALLWL(false," + iProgressIncrement.toString() + ", 0, " + (idxWL + 1).toString() + ", 0,'')", 10); //do next watchlist
            return;
        }

    }

    let sMsg = "Successfully loaded the following watchlists:\n";
    sMsg = sMsg + gsAllSuccess.join("\n");
    alert(sMsg);
    ShowProgress(false, true);
    gbDoingCreateOrders = false;
    gbDoResetWatchlists = true;
    SetDefault();
    DoGetTDData();
    return;

}

function InitializeColumns(oWL, bSetAllSelectedToFalse) {
    let oColumns = null;
    if (oWL.bShared) {
        if (oWL.name.toUpperCase().indexOf("CURRENT TRADE") != -1) {
            oColumns = clone(gsWLColumnsSharedCurrentTrades);
        } else {
            oColumns = clone(gsWLColumnsShared);
        }
    } else if (oWL.watchlistId == oWL.accountId) { //Account watchlist
        oColumns = clone(gsWLColumnsAccount);
    } else if (oWL.name.toUpperCase().indexOf("DIVIDEND") != -1) {
        oColumns = clone(gsWLColumnsDiv);
    } else if (oWL.name.toUpperCase().indexOf("CURRENT TRADE") != -1) {
        oColumns = clone(gsWLColumnsCurrentTrades);
    } else {
        oColumns = clone(gsWLColumnsDefault);
    }
    for (let key in oColumns) {
        // check if the property/key is defined in the object itself, not in parent
        if (oColumns.hasOwnProperty(key)) {
            oWL.wlcolumnsselected[key] = clone(oColumns[key]);
            if (bSetAllSelectedToFalse) {
                oWL.wlcolumnsselected[key].selected = false;
                oWL.wlcolumnsselected[key].sortorder = 1000;
            } else {
                if (!oWL.wlcolumnsselected[key].selected) {
                    oWL.wlcolumnsselected[key].sortorder = 1000;
                }

            }
        }
    }
}

function IsMarketOpen() {
    let iTryCount = 0;
    let idx = 0;
    let bReturn = false;

    let oCM;

    //debugger
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------
        let sServerUrl = "https://api.tdameritrade.com/v1/marketdata/EQUITY/hours"

        let xhttp = null;
        let iInnerTryCount = 0;
        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpenGet(xhttp, sServerUrl, "Error during xhttp.open to " + sServerUrl, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

            // send the request
            try {
                //debugger
                xhttp.send();
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        //alert("IsMarketOpen xhttp.responseText = " + xhttp.responseText);

                        oCM = myJSON.parse(xhttp.responseText);
                        switch (checkTDAPIError(oCM)) {
                            case 0: //no error
                                {
                                    if (oCM["equity"] != null) {
                                        if (oCM["equity"]["EQ"] != null) {
                                            if (oCM.equity.EQ.isOpen) {
                                                bReturn = true;
                                            }
                                        }
                                    }
                                    iTryCount = 2;
                                    break;
                                }
                            case 1: //acces code expired
                                {
                                    xhttp = null;
                                    if (GetAccessCodeUsingRefreshToken()) {
                                        iTryCount++;
                                    } else {
                                        alert("(IsMarketOpen) An error occurred attempting to refresh the access code. Please reload the app.");
                                        iTryCount = 2;
                                    }
                                    break;
                                }
                            case 2: //other error
                                {
                                    oCMLength = 0;
                                    break;
                                }
                            default:
                                {
                                    oCMLength = 0;
                                    break;
                                }
                        }
                    }
                    else {
                        iTryCount++;
                        if (iTryCount < 2) {
                            xhttp = null;
                        }
                        else {
                            //alert ("IsMarketOpen Error - HTTP response is blank." + " (" + iTryCount.toString() + ")");
                        }
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        //alert ("IsMarketOpen Error - HTTP response is null." + " (" + iTryCount.toString() + ")");
                    }
                }
            }
            catch (e1) {
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    alert("IsMarketOpen Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                }
            }
        }
        else {
            break;
        }
    }
    return bReturn;
}

function IsMarketOpenForTrading(bFirstTime) {
    let iTryCount = 0;
    let bReturn = false;
    let bLocalFirstTime = bFirstTime;
    let bSetStatusIndicators = false;

    let oCM;

    if (!bLocalFirstTime) {
        if (gMarketStatus.isInitialized) {
            let dtCurDate = new Date();
            if (FormatDateForTD(dtCurDate) != gMarketStatus.sMarketDate) {
                bLocalFirstTime = true;
            }
        } else {
            bLocalFirstTime = true;
        }
    }

    if ((!bLocalFirstTime) && (gMarketStatus.isInitialized)) {
        if (gMarketStatus.isOpen) {
            let dtCurDate = new Date();
            let dtOpenStart = gMarketStatus.dtPreStart;
            let dtPreEnd = gMarketStatus.dtPreEnd;
            let dtPostStart = gMarketStatus.dtPostStart;
            let dtOpenEnd = gMarketStatus.dtPostEnd;

            if (dtCurDate <= dtPreEnd) {
                gbRegularMarketHours = false;
            } else if (dtCurDate >= dtPostStart) {
                gbRegularMarketHours = false;
            } else {
                gbRegularMarketHours = true;
            }
            if ((dtCurDate >= dtOpenStart) && (dtCurDate <= dtOpenEnd)) {
                bReturn = true;
            }
            if ((dtCurDate >= gMarketStatus.dtPreStart) && (dtCurDate <= gMarketStatus.dtPreEnd)) {
                document.getElementById("spanPreMarket").style.backgroundColor = "green";
                document.getElementById("spanRegularMarket").style.backgroundColor = "darkred";
                document.getElementById("spanPostMarket").style.backgroundColor = "darkred";
            } else if ((dtCurDate >= gMarketStatus.dtRegularStart) && (dtCurDate <= gMarketStatus.dtRegularEnd)) {
                document.getElementById("spanPreMarket").style.backgroundColor = "darkred";
                document.getElementById("spanRegularMarket").style.backgroundColor = "green";
                document.getElementById("spanPostMarket").style.backgroundColor = "darkred";
            } else if ((dtCurDate >= gMarketStatus.dtPostStart) && (dtCurDate <= gMarketStatus.dtPostEnd)) {
                document.getElementById("spanPreMarket").style.backgroundColor = "darkred";
                document.getElementById("spanRegularMarket").style.backgroundColor = "darkred";
                document.getElementById("spanPostMarket").style.backgroundColor = "green";
            } else {
                document.getElementById("spanPreMarket").style.backgroundColor = "darkred";
                document.getElementById("spanRegularMarket").style.backgroundColor = "darkred";
                document.getElementById("spanPostMarket").style.backgroundColor = "darkred";
            }
        } else {
            document.getElementById("spanPreMarket").style.backgroundColor = "darkred";
            document.getElementById("spanRegularMarket").style.backgroundColor = "darkred";
            document.getElementById("spanPostMarket").style.backgroundColor = "darkred";
            bReturn = false;
        }
        bSetStatusIndicators = true;
    } else {
        //debugger
        while (iTryCount < 2) {
            //-------------------------------------------------------------------------------------------------
            let sServerUrl = "https://api.tdameritrade.com/v1/marketdata/EQUITY/hours"

            let xhttp = null;
            let iInnerTryCount = 0;
            xhttp = oHTTP();
            while ((xhttp == null) && (iInnerTryCount < 5)) {
                xhttp = oHTTP();
                iInnerTryCount = iInnerTryCount + 1;
            }
            iInnerTryCount = 0;
            if (CheckHTTPOpenGet(xhttp, sServerUrl, "Error during xhttp.open to " + sServerUrl, false, false, "", "")) {
                // set the request header
                xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

                // send the request
                try {
                    //debugger
                    xhttp.send();
                    if (xhttp.responseText != null) {
                        if (xhttp.responseText != "") {

                            gMarketStatus.isInitialized = true;
                            gMarketStatus.isOpen = false;
                            let dtCurDate = new Date();
                            gMarketStatus.sMarketDate = FormatDateForTD(dtCurDate);

                            oCM = myJSON.parse(xhttp.responseText);
                            switch (checkTDAPIError(oCM)) {
                                case 0: //no error
                                    {
                                        if (oCM["equity"] != null) {
                                            if (oCM["equity"]["EQ"] != null) {
                                                if (oCM.equity.EQ.isOpen) {
                                                    if (!isUndefined(oCM.equity.EQ.sessionHours.preMarket)) {
                                                        if (oCM.equity.EQ.sessionHours.preMarket.length > 0) {
                                                            gMarketStatus.isOpen = true;

                                                            let dtOpenStart = new Date(oCM.equity.EQ.sessionHours.preMarket[0].start);
                                                            let dtPreEnd = new Date(oCM.equity.EQ.sessionHours.preMarket[0].end);
                                                            let dtPostStart = new Date();
                                                            let dtOpenEnd = new Date();
                                                            if (isUndefined(oCM.equity.EQ.sessionHours.postMarket)) {
                                                                dtOpenEnd = new Date(oCM.equity.EQ.sessionHours.regularMarket[0].end);
                                                                dtPostStart = new Date(oCM.equity.EQ.sessionHours.regularMarket[0].end);
                                                            } else {
                                                                dtOpenEnd = new Date(oCM.equity.EQ.sessionHours.postMarket[0].end);
                                                                dtPostStart = new Date(oCM.equity.EQ.sessionHours.postMarket[0].start);
                                                            }
                                                            gMarketStatus.sMarketDate = FormatDateForTD(dtCurDate);
                                                            gMarketStatus.dtLastIndexCheck = dtCurDate;
                                                            gMarketStatus.dtLastMarketStatusCheck = dtCurDate;
                                                            gMarketStatus.dtLastWLPriceCheck = dtCurDate;
                                                            if (isUndefined(oCM.equity.EQ.sessionHours.postMarket)) {
                                                                gMarketStatus.dtPostEnd = new Date(oCM.equity.EQ.sessionHours.regularMarket[0].end);
                                                                gMarketStatus.dtPostStart = new Date(oCM.equity.EQ.sessionHours.regularMarket[0].end);
                                                            } else {
                                                                gMarketStatus.dtPostEnd = new Date(oCM.equity.EQ.sessionHours.postMarket[0].end);
                                                                gMarketStatus.dtPostStart = new Date(oCM.equity.EQ.sessionHours.postMarket[0].start);
                                                            }
                                                            gMarketStatus.dtPreEnd = new Date(oCM.equity.EQ.sessionHours.preMarket[0].end);
                                                            gMarketStatus.dtPreStart = new Date(oCM.equity.EQ.sessionHours.preMarket[0].start);
                                                            gMarketStatus.dtRegularEnd = new Date(oCM.equity.EQ.sessionHours.regularMarket[0].end);
                                                            gMarketStatus.dtRegularStart = new Date(oCM.equity.EQ.sessionHours.regularMarket[0].start);

                                                            if (dtCurDate <= dtPreEnd) {
                                                                gbRegularMarketHours = false;
                                                            } else if (dtCurDate >= dtPostStart) {
                                                                gbRegularMarketHours = false;
                                                            } else {
                                                                gbRegularMarketHours = true;
                                                            }
                                                            if ((dtCurDate >= dtOpenStart) && (dtCurDate <= dtOpenEnd)) {
                                                                bReturn = true;
                                                            }
                                                            if ((dtCurDate >= gMarketStatus.dtPreStart) && (dtCurDate <= gMarketStatus.dtPreEnd)) {
                                                                document.getElementById("spanPreMarket").style.backgroundColor = "green";
                                                                document.getElementById("spanRegularMarket").style.backgroundColor = "darkred";
                                                                document.getElementById("spanPostMarket").style.backgroundColor = "darkred";
                                                            } else if ((dtCurDate >= gMarketStatus.dtRegularStart) && (dtCurDate <= gMarketStatus.dtRegularEnd)) {
                                                                document.getElementById("spanPreMarket").style.backgroundColor = "darkred";
                                                                document.getElementById("spanRegularMarket").style.backgroundColor = "green";
                                                                document.getElementById("spanPostMarket").style.backgroundColor = "darkred";
                                                            } else if ((dtCurDate >= gMarketStatus.dtPostStart) && (dtCurDate <= gMarketStatus.dtPostEnd)) {
                                                                document.getElementById("spanPreMarket").style.backgroundColor = "darkred";
                                                                document.getElementById("spanRegularMarket").style.backgroundColor = "darkred";
                                                                document.getElementById("spanPostMarket").style.backgroundColor = "green";
                                                            } else {
                                                                document.getElementById("spanPreMarket").style.backgroundColor = "darkred";
                                                                document.getElementById("spanRegularMarket").style.backgroundColor = "darkred";
                                                                document.getElementById("spanPostMarket").style.backgroundColor = "darkred";
                                                            }
                                                            bSetStatusIndicators = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        iTryCount = 2;
                                        break;
                                    }
                                case 1: //acces code expired
                                    {
                                        xhttp = null;
                                        if (GetAccessCodeUsingRefreshToken()) {
                                            iTryCount++;
                                        } else {
                                            alert("(IsMarketOpenForTrading) An error occurred attempting to refresh the access code. Please reload the app.");
                                            iTryCount = 2;
                                        }
                                        break;
                                    }
                                case 2: //other error
                                    {
                                        oCMLength = 0;
                                        break;
                                    }
                                default:
                                    {
                                        oCMLength = 0;
                                        break;
                                    }
                            }
                        }
                        else {
                            iTryCount++;
                            if (iTryCount < 2) {
                                xhttp = null;
                            }
                            else {
                                //alert ("IsMarketOpenForTrading Error - HTTP response is blank." + " (" + iTryCount.toString() + ")");
                            }
                        }
                    }
                    else {
                        iTryCount++;
                        if (iTryCount < 2) {
                            xhttp = null;
                        }
                        else {
                            //alert ("IsMarketOpenForTrading Error - HTTP response is null." + " (" + iTryCount.toString() + ")");
                        }
                    }
                }
                catch (e1) {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        alert("IsMarketOpenForTrading Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                    }
                }
            }
            else {
                break;
            }
        }
    }

    if (!bSetStatusIndicators) {
        document.getElementById("spanPreMarket").style.backgroundColor = "darkred";
        document.getElementById("spanRegularMarket").style.backgroundColor = "darkred";
        document.getElementById("spanPostMarket").style.backgroundColor = "darkred";
    }
    return bReturn;
}


function isNumberKey(evt) {
    let charCode = (evt.which) ? evt.which : event.keyCode
    if (charCode > 31 && (charCode < 48 || charCode > 57))
        return false;

    return true;
}

function isPurchasedDateHidden(sPurchasedDateIn) {
                            //1) equal to 1990-01-01 then blank and hidden
                            //2) less than 1990-01-01 then hidden and date = datediff(this value, 1990-01-01) + 1990-01-01
                            //3) greater than 1990-01-01 then not hidden
    //4) blank then not hidden
    let oWLPDH = new WLPurchasedDateHidden();
    try {
        if (sPurchasedDateIn != "") {
            let dPD = new Date(sPurchasedDateIn);
            let dPDStart = new Date("1990-01-01");
            let iDateDiff = DateDiff.inDays(dPDStart, dPD);
            if (iDateDiff == 0) {
                // case 1
                oWLPDH.bHidden = true;
            } else if (iDateDiff > 0) {
                // case 3
                oWLPDH.purchasedDate = sPurchasedDateIn;
            } else {
                // case 2
                oWLPDH.bHidden = true;
                dPDStart.setDate(dPDStart.getDate() + (-1 * iDateDiff));
                oWLPDH.purchasedDate = FormatDateForTD(dPDStart);
            }
        }
    } catch (e) {

    }
    return oWLPDH;
}

function isUndefined(name) {
    if (typeof name === "undefined") {
        return true;
    }
    return false;
}

// Utility
function jsonToQueryString(json) {
    return Object.keys(json).map(function (key) {
        return encodeURIComponent(key) + '=' +
            encodeURIComponent(json[key]);
    }).join('&');
}

function MoveDivs(bMoveDown, iAmountToChangeIn) {
    let iAmountToChange = 38;
    if (!isUndefined(iAmountToChangeIn)) {
        iAmountToChange = iAmountToChangeIn;
    }
    let iLeftLimit = 500;
    //        debugger
    let oDivs = new Array();

    let oBody = document.body;
    if (oBody.childNodes.length > 0) {
        for (let idx = 0; idx < oBody.childNodes.length; idx++) {
            let oDiv = oBody.childNodes[idx];
            if (!isUndefined(oDiv.id)) {
                if (oDiv.id.substr(0, gsSymbolDetailSpanPrefix.length) == gsSymbolDetailSpanPrefix) {
                    oDivs[oDivs.length] = oDiv;
                }
            }
        }
    }

    let oDiv = document.getElementById("tblSymbols");
    if (oDiv.style.visibility.toString().toUpperCase() == "VISIBLE") {
        if (oDiv.offsetLeft < iLeftLimit) {
            oDivs[oDivs.length] = oDiv;
        }
    }
    oDiv = document.getElementById("tblDetail");
    if (oDiv.style.visibility.toString().toUpperCase() == "VISIBLE") {
        if (oDiv.offsetLeft < iLeftLimit) {
            oDivs[oDivs.length] = oDiv;
        }
    }
    for (let idx = 0; idx < gWatchlists.length; idx++) {
        if (gWatchlists[idx].bSelected) {
            if (gWatchlists[idx].spanName != "") {
                oDiv = document.getElementById(gWatchlists[idx].spanName);
                if (oDiv.offsetLeft < iLeftLimit) {
                    oDivs[oDivs.length] = oDiv;
                }
            }
        }
    }

    if (oDivs.length > 0) {
        for (let idxDivs = 0; idxDivs < oDivs.length; idxDivs++) {
            oDiv = oDivs[idxDivs];
            let iTop = parseInt(oDiv.style.top);
            if (bMoveDown) {
                //add to top value
                iTop = iTop + iAmountToChange;
            } else {
                //subtract from top value
                iTop = iTop - iAmountToChange;
            }
            oDiv.style.top = iTop.toString() + "px";
            //                document.getElementById("tblSymbols").style.top = iTop.toString() + "px";
        }
    }
    //div.offsetTop - window.pageYOffset
}

function onClick(ev) {
    if (document.getElementById("spanWLSelectWatchlists").style.visibility.toUpperCase() == "VISIBLE") {
        if (gbShowingSelectWatchlists) {
            wlDoCancelPopup();
        }
    }
}

function onClickInfo(ev) {
    showTDAPIError("Current version is " + gsCurrentVersion, 6000);
}

function onKeyDown(ev) {
    let charCode = ev.keyCode;
    // get key
    if ((!ev.ctrlKey) && (ev.shiftKey)) {
        if (charCode == 123) { //check for shift F12 so can display current version
            ev.cancelBubble = true;
            CancelKeyStroke(ev);
            showTDAPIError("Current version is " + gsCurrentVersion, 6000);
        } else {
            ev.cancelBubble = false;
        }
    }
    else {
        ev.cancelBubble = false;
    }
}

function onKeyUp(evt) {
    if (gbUseEnterToTogglePriceHistory) {
        let charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode === 13) {
            if (document.getElementById("btnGetStockPriceHistory").disabled == false) {
                // Cancel the default action, if needed
                evt.preventDefault();
                document.getElementById("btnGetStockPriceHistory").click();
            }
        }
    }
}

function OpenSocket() {

    let userPrincipalsResponse = oACCP; /*FILL THIS IN - Get User Principals Response at https://developer.tdameritrade.com/user-principal/apis/get/userprincipals-0 with streamerSubscriptionKeys,streamerConnectionInfo in fields*/

    //Converts ISO-8601 response in snapshot to ms since epoch accepted by Streamer
    let tokenTimeStampAsDateObj = new Date(userPrincipalsResponse.streamerInfo.tokenTimestamp.split("+")[0] + "+00:00");
    let tokenTimeStampAsMs = tokenTimeStampAsDateObj.getTime();

    let credentials = {
        "userid": userPrincipalsResponse.accounts[0].accountId,
        "token": userPrincipalsResponse.streamerInfo.token,
        "company": userPrincipalsResponse.accounts[0].company,
        "segment": userPrincipalsResponse.accounts[0].segment,
        "cddomain": userPrincipalsResponse.accounts[0].accountCdDomainId,
        "usergroup": userPrincipalsResponse.streamerInfo.userGroup,
        "accesslevel": userPrincipalsResponse.streamerInfo.accessLevel,
        "authorized": "Y",
        "timestamp": tokenTimeStampAsMs,
        "appid": userPrincipalsResponse.streamerInfo.appId,
        "acl": userPrincipalsResponse.streamerInfo.acl
    }

    gLoginRequest = {
        "requests": [
            {
                "service": "ADMIN",
                "command": "LOGIN",
                "requestid": 0,
                "account": userPrincipalsResponse.accounts[0].accountId,
                "source": userPrincipalsResponse.streamerInfo.appId,
                "parameters": {
                    "credential": jsonToQueryString(credentials),
                    "token": userPrincipalsResponse.streamerInfo.token,
                    "version": "1.0"
                }
            }
        ]
    }

    if (gimySockIdx != -1) {
        mySock[gimySockIdx] = null;
    }
    mySock[mySock.length] = new WebSocket("wss://" + userPrincipalsResponse.streamerInfo.streamerSocketUrl + "/ws");
    gimySockIdx = mySock.length - 1;
    document.getElementById("spanDebug").innerHTML = "";
    mySock[gimySockIdx].onmessage = function (evt) {
        if (evt.data != "") {
            let oData = myJSON.parse(evt.data);
            if (!isUndefined(oData.response)) {
                if (oData.response.length > 0) {
                    if (oData.response[0].service == "ADMIN") {
                        if (oData.response[0].command == "LOGIN") {
                            if (oData.response[0].content.code == 0) {
                                gbLoggedIn = true;
                            } else {
                                document.getElementById("spanDebug").innerHTML = "Streaming login error - (" + oData.response[0].content.msg;
                                //showTDAPIError(oData.response[0].content.msg);
                            }
                        }
                    } else {
                        if (oData.response[0].content.code != 0) {
                            document.getElementById("spanDebug").innerHTML = "Streaming error - (" + oData.response[0].content.code + ")" + oData.response[0].content.msg;
                            //showTDAPIError("(" + oData.response[0].content.code + ")" + oData.response[0].content.msg);
                        }
                        //document.getElementById("spanDebug").innerHTML = oData.response[0].content.msg;
                    }
                }
            } else if (!isUndefined(oData.notify)) {
                if (oData.notify.length > 0) {
                    if (!isUndefined(oData.notify[0].heartbeat)) {
                        //document.getElementById("spanDebug").innerHTML = "Notify - heartbeat";
                    } else {
                        if (!isUndefined(oData.notify[0].content.code)) {
                            if (oData.notify[0].content.code == 12) {
                                document.getElementById("spanDebug").innerHTML = "Stock prices no longer being streamed due to logon to the same account.";
                            } else {
                                document.getElementById("spanDebug").innerHTML = "Notify - (" + oData.notify[0].content.code + ") " + oData.notify[0].content.msg;
                                //showTDAPIError("Notify - (" + oData.notify[0].content.code + ") " + oData.notify[0].content.msg);
                            }
                        }
                    }
                }
            } else if (!isUndefined(oData.data)) {
                if (oData.data.length > 0) {
                    //let sDebugMsg = "";
                    //let sDebugMsgSep = "";
                    for (let idxData = 0; idxData < oData.data.length; idxData++) {
                        if (oData.data[idxData].service == "QUOTE") {
                            for (let idxContent = 0; idxContent < oData.data[idxData].content.length; idxContent++) {
                                if (!isUndefined(oMDQ[oData.data[idxData].content[idxContent].key])) {
                                    let oT = oMDQ[oData.data[idxData].content[idxContent].key];
                                    //update oMDQ
                                    for (let ky in oData.data[idxData].content[idxContent]) {
                                        if (oData.data[idxData].content[idxContent].hasOwnProperty(ky)) {
                                            switch (ky) {
                                                case "delayed":
                                                    {
                                                        oT.delayed = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "cusip":
                                                    {
                                                        oT.cusip = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "assetMainType":
                                                    {
                                                        oT.assetMainType = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "1": //bidPrice
                                                    {
                                                        oT.bidPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "2": //askPrice
                                                    {
                                                        oT.askPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "3": //lastPrice
                                                    {
                                                        oT.lastPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "4": //bidSize
                                                    {
                                                        oT.bidSize = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "5": //askSize
                                                    {
                                                        oT.askSize = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "6": //askId
                                                    {
                                                        oT.askId = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "7": //bidId
                                                    {
                                                        oT.bidId = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "8": //totalVolume
                                                    {
                                                        oT.totalVolume = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "9": //lastSize
                                                    {
                                                        oT.lastSize = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "12": //highPrice
                                                    {
                                                        oT.highPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "13": //lowPrice
                                                    {
                                                        oT.lowPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "15": //closePrice
                                                    {
                                                        oT.closePrice = oData.data[idxData].content[idxContent][ky];
                                                        if (oT.closePrice > 0) {
                                                            oT.netPercentChangeInDouble = (oT.netChange / oT.closePrice) * 100.0;
                                                            oT.regularMarketPercentChangeInDouble = (oT.regularMarketNetChange / oT.closePrice) * 100.0;
                                                        }
                                                        break;
                                                    }
                                                case "16": //exchange
                                                    {
                                                        oT.exchange = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "17": //marginable
                                                    {
                                                        oT.marginable = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "18": //shortable
                                                    {
                                                        oT.shortable = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "24": //volatility
                                                    {
                                                        oT.volatility = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "26": //lastId
                                                    {
                                                        oT.lastId = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "27": //digits
                                                    {
                                                        oT.digits = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "28": //openPrice
                                                    {
                                                        oT.openPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "29": //netChange
                                                    {
                                                        oT.netChange = oData.data[idxData].content[idxContent][ky];
                                                        if (oT.closePrice > 0) {
                                                            oT.netPercentChangeInDouble = (oT.netChange / oT.closePrice) * 100.0;
                                                        }
                                                        break;
                                                    }
                                                case "30": //52WkHigh
                                                    {
                                                        oT["52WkHigh"] = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "31": //52WkLow
                                                    {
                                                        oT["52WkLow"] = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "32": //peRatio
                                                    {
                                                        oT.peRatio = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "33": //divAmount
                                                    {
                                                        oT.divAmount = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "34": //divYield
                                                    {
                                                        oT.divYield = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "39": //exchangeName
                                                    {
                                                        oT.exchangeName = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "40": //divDate
                                                    {
                                                        oT.divDate = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "43": //regularMarketLastPrice
                                                    {
                                                        oT.regularMarketLastPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "44": //regularMarketLastSize
                                                    {
                                                        oT.regularMarketLastSize = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "47": //regularMarketNetChange
                                                    {
                                                        oT.regularMarketNetChange = oData.data[idxData].content[idxContent][ky];
                                                        if (oT.closePrice > 0) {
                                                            oT.regularMarketPercentChangeInDouble = (oT.regularMarketNetChange / oT.closePrice) * 100.0;
                                                        }
                                                        break;
                                                    }
                                                case "48": //securityStatus
                                                    {
                                                        oT.securityStatus = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "49": //mark
                                                    {
                                                        oT.mark = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "50": //quoteTimeInLong
                                                    {
                                                        oT.quoteTimeInLong = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "51": //tradeTimeInLong
                                                    {
                                                        oT.tradeTimeInLong = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "52": //regularMarketTradeTimeInLong
                                                    {
                                                        oT.regularMarketTradeTimeInLong = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                            }
                                        }
                                    }
                                    //oMDQ[oData.data[idxData].content[idxContent].key] = oT;

                                } else {
                                    //add to oMDQ
                                    let oT = {
                                        "symbol": "",
                                        "description": "",
                                        "assetType": "",
                                        "assetMainType": "",
                                        "bidPrice": 0,
                                        "bidSize": 0,
                                        "bidId": "",
                                        "askPrice": 0,
                                        "askSize": 0,
                                        "askId": "",
                                        "lastPrice": 0,
                                        "lastSize": 0,
                                        "lastId": "",
                                        "openPrice": 0,
                                        "highPrice": 0,
                                        "lowPrice": 0,
                                        "closePrice": 0,
                                        "netChange": 0,
                                        "totalVolume": 0,
                                        "quoteTimeInLong": 0,
                                        "tradeTimeInLong": 0,
                                        "mark": 0,
                                        "exchange": "",
                                        "exchangeName": "",
                                        "marginable": false,
                                        "shortable": false,
                                        "volatility": 0,
                                        "digits": 0,
                                        "52WkHigh": 0,
                                        "52WkLow": 0,
                                        "peRatio": 0,
                                        "divAmount": 0,
                                        "divYield": 0,
                                        "divDate": "",
                                        "securityStatus": "",
                                        "regularMarketLastPrice": 0,
                                        "regularMarketLastSize": 0,
                                        "regularMarketNetChange": 0,
                                        "regularMarketTradeTimeInLong": 0
                                    }

                                    for (let ky in oData.data[idxData].content[idxContent]) {
                                        if (oData.data[idxData].content[idxContent].hasOwnProperty(ky)) {
                                            switch (ky) {
                                                case "key":
                                                    {
                                                        oT.symbol = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "delayed":
                                                    {
                                                        oT.delayed = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "cusip":
                                                    {
                                                        oT.cusip = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "assetMainType":
                                                    {
                                                        oT.assetType = oData.data[idxData].content[idxContent][ky];
                                                        oT.assetMainType = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "1": //bidPrice
                                                    {
                                                        oT.bidPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "2": //askPrice
                                                    {
                                                        oT.askPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "3": //lastPrice
                                                    {
                                                        oT.lastPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "4": //bidSize
                                                    {
                                                        oT.bidSize = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "5": //askSize
                                                    {
                                                        oT.askSize = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "6": //askId
                                                    {
                                                        oT.askId = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "7": //bidId
                                                    {
                                                        oT.bidId = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "8": //totalVolume
                                                    {
                                                        oT.totalVolume = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "9": //lastSize
                                                    {
                                                        oT.lastSize = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "12": //highPrice
                                                    {
                                                        oT.highPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "13": //lowPrice
                                                    {
                                                        oT.lowPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "15": //closePrice
                                                    {
                                                        oT.closePrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "16": //exchange
                                                    {
                                                        oT.exchange = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "17": //marginable
                                                    {
                                                        oT.marginable = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "18": //shortable
                                                    {
                                                        oT.shortable = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "24": //volatility
                                                    {
                                                        oT.volatility = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "26": //lastId
                                                    {
                                                        oT.lastId = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "27": //digits
                                                    {
                                                        oT.digits = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "28": //openPrice
                                                    {
                                                        oT.openPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "29": //netChange
                                                    {
                                                        oT.netChange = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "30": //52WkHigh
                                                    {
                                                        oT["52WkHigh"] = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "31": //52WkLow
                                                    {
                                                        oT["52WkLow"] = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "32": //peRatio
                                                    {
                                                        oT.peRatio = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "33": //divAmount
                                                    {
                                                        oT.divAmount = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "34": //divYield
                                                    {
                                                        oT.divYield = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "39": //exchangeName
                                                    {
                                                        oT.exchangeName = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "40": //divDate
                                                    {
                                                        oT.divDate = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "43": //regularMarketLastPrice
                                                    {
                                                        oT.regularMarketLastPrice = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "44": //regularMarketLastSize
                                                    {
                                                        oT.regularMarketLastSize = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "47": //regularMarketNetChange
                                                    {
                                                        oT.regularMarketNetChange = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "48": //securityStatus
                                                    {
                                                        oT.securityStatus = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "49": //mark
                                                    {
                                                        oT.mark = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "50": //quoteTimeInLong
                                                    {
                                                        oT.quoteTimeInLong = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "51": //tradeTimeInLong
                                                    {
                                                        oT.tradeTimeInLong = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "52": //regularMarketTradeTimeInLong
                                                    {
                                                        oT.regularMarketTradeTimeInLong = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                            }
                                        }
                                    }

                                    oMDQ[oData.data[idxData].content[idxContent].key] = oT;

                                    //sDebugMsg = sDebugMsg + sDebugMsgSep + oData.data[idxData].content[idxContent].key;
                                    //for (let ky in oData.data[idxData].content[idxContent]) {
                                    //    if (oData.data[idxData].content[idxContent].hasOwnProperty(ky)) {
                                    //        sDebugMsg = sDebugMsg + "  " + ky + " -> " + oData.data[idxData].content[idxContent][ky];
                                    //    }
                                    //}
                                    //sDebugMsgSep = ", ";

                                }
                            }
                        } else if (oData.data[idxData].service == "LEVELONE_FUTURES") {
                            for (let idxContent = 0; idxContent < oData.data[idxData].content.length; idxContent++) {
                                if (!isUndefined(oMDQ[oData.data[idxData].content[idxContent].key])) {
                                    let oT = oMDQ[oData.data[idxData].content[idxContent].key];
                                    //update oMDQ
                                    for (let ky in oData.data[idxData].content[idxContent]) {
                                        if (oData.data[idxData].content[idxContent].hasOwnProperty(ky)) {
                                            switch (ky) {
                                                case "delayed":
                                                    {
                                                        oT.delayed = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "3": //lastPrice
                                                    {
                                                        oT.lastPriceInDouble = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "14": //closePrice
                                                    {
                                                        oT.closePriceInDouble = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "19": //netChange
                                                    {
                                                        oT.changeInDouble = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                            }
                                        }
                                    }
                                    //oMDQ[oData.data[idxData].content[idxContent].key] = oT;

                                } else {
                                    //add to oMDQ
                                    let oT = {
                                        "symbol": "",
                                        "description": "",
                                        "assetType": "",
                                        "assetMainType": "",
                                        "lastPriceInDouble": 0,
                                        "closePriceInDouble": 0,
                                        "changeInDouble": "",
                                    }

                                    for (let ky in oData.data[idxData].content[idxContent]) {
                                        if (oData.data[idxData].content[idxContent].hasOwnProperty(ky)) {
                                            switch (ky) {
                                                case "key":
                                                    {
                                                        oT.symbol = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "delayed":
                                                    {
                                                        oT.delayed = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "3": //lastPrice
                                                    {
                                                        oT.lastPriceInDouble = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "14": //closePrice
                                                    {
                                                        oT.closePriceInDouble = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                                case "19": //netChange
                                                    {
                                                        oT.changeInDouble = oData.data[idxData].content[idxContent][ky];
                                                        break;
                                                    }
                                            }
                                        }
                                    }
                                    oMDQ[oData.data[idxData].content[idxContent].key] = oT;
                                }
                            }
                        }
                    }
                    //if (sDebugMsg != "") {
                    //    document.getElementById("spanDebug").innerHTML = "Data returned - " + sDebugMsg;
                    //}
                }
            }
        }
    };
    mySock[gimySockIdx].onclose = function () {
        //document.getElementById("spanDebug").innerHTML = "Socket closed";
    };
    mySock[gimySockIdx].onopen = function () {
        //document.getElementById("spanDebug").innerHTML = "Socket opened";
        mySock[gimySockIdx].send(myJSON.stringify(gLoginRequest));
    };

}

function PageLoad() {
    //debugger
    SetupWLColumnDefaults();
    //determine if production or test or localhost
    let sBearerCode = location.search;
//    alert("sBearerCode = " + sBearerCode);
    try {
        let sTmp = sBearerCode.substr(0, "?code=".length);
        if (sTmp == "?code=") {
            let sBefore = gsRedirectURL;
            gsRedirectURL = location.protocol + "//" + location.host + location.pathname;
            gsTDAPIKey = "5V5GTTHEURLAUGI2JAFC06QKAIVPAVYF"; //MyGainLoss2
            switch (location.protocol + "//" + location.host + location.pathname) {
                case "https://hapappe.com/default.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/";
                        break;
                    }
                case "https://hapappe.com/test/default.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/test/";
                        gbInTestMode = true;
                        break;
                    }
                case "https://bhalp.github.io/mySite/default.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/test/";
                        break;
                    }
                case "https://bhalp.github.io/mySiteTest/default.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/test/";
                        break;
                    }
                case "https://hapappe.com/defaultCell.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/";
                        gbUsingCell = true;
                        break;
                    }
                case "https://hapappe.com/test/defaultCell.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/test/";
                        gbInTestMode = true;
                        gbUsingCell = true;
                        break;
                    }
                case "https://bhalp.github.io/mySite/defaultCell.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/";
                        gbUsingCell = true;
                        break;
                    }
                case "https://bhalp.github.io/mySiteTest/defaultCell.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/test/";
                        gbUsingCell = true;
                        break;
                    }
                case "https://localhost:8080/":
                    {
                        gsGetDataSite = "https://localhost:8080/";
                        gsRedirectURL = "https://localhost:8080";
                        gsTDAPIKey = "VTBLS2XWYV8HCIHN8JSTSHEZTFZXNI93"; //MyGainLoss
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
            //alert("gsRedirectURL before = " + sBefore + "\n" + "gsRedirectURL after = " + gsRedirectURL);
            gsBearerCode = sBearerCode.split('=')[1];
        } else {
            let sBefore = gsRedirectURL;
            gsRedirectURL = location.protocol + "//" + location.host + location.pathname;
            switch (location.protocol + "//" + location.host + location.pathname) {
                case "https://hapappe.com/default.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/";
                        break;
                    }
                case "https://hapappe.com/test/default.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/test/";
                        gbInTestMode = true;
                        break;
                    }
                case "https://bhalp.github.io/mySite/default.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/";
                        break;
                    }
                case "https://bhalp.github.io/mySiteTest/default.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/test/";
                        break;
                    }
                case "https://hapappe.com/defaultCell.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/";
                        gbUsingCell = true;
                        break;
                    }
                case "https://hapappe.com/test/defaultCell.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/test/";
                        gbInTestMode = true;
                        gbUsingCell = true;
                        break;
                    }
                case "https://bhalp.github.io/mySite/defaultCell.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/";
                        gbUsingCell = true;
                        break;
                    }
                case "https://bhalp.github.io/mySiteTest/defaultCell.htm":
                    {
                        gsGetDataSite = "https://hapappe.com/test/";
                        gbUsingCell = true;
                        break;
                    }
                case "https://localhost:8080/":
                    {
                        gsGetDataSite = "https://localhost:8080/";
                        gsRedirectURL = "https://localhost:8080";
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
            //alert("gsRedirectURL before = " + sBefore + "\n" + "gsRedirectURL after = " + gsRedirectURL);
            let sParams = sBearerCode.split('&');
            gsAccess_token_expiration_time = sParams[0].split('=')[1];
            gsRefreshToken = sParams[1].split('=')[1];
            if (sParams.length == 3) {
                switch (sParams[2].split('=')[1]) {
                    case "1": // APIKey = "VTBLS2XWYV8HCIHN8JSTSHEZTFZXNI93"
                        {
                            gsTDAPIKey = "VTBLS2XWYV8HCIHN8JSTSHEZTFZXNI93"; //MyGainLoss
                            break;
                        }
                    case "2": // APIKey = "5V5GTTHEURLAUGI2JAFC06QKAIVPAVYF"
                        {
                            gsTDAPIKey = "5V5GTTHEURLAUGI2JAFC06QKAIVPAVYF"; //MyGainLoss2
                            break;
                        }
                    default:
                        {
                            gsTDAPIKey = "VTBLS2XWYV8HCIHN8JSTSHEZTFZXNI93"; //MyGainLoss
                            break;
                        }
                }
            } else {
                gsTDAPIKey = "VTBLS2XWYV8HCIHN8JSTSHEZTFZXNI93"; //MyGainLoss
            }
        }
    } catch (e1) {
        gsBearerCode = "";
        gsAccess_token_expiration_time = "";
        gsRefreshToken = "";
        gsTDAPIKey = "";
    }
    //gbUsingCell = true;
    
    gbCellWLSpecial = false; //set this to true if want 2 line watchlists

    let x = document.getElementById("TheBody");
    x.style.backgroundColor = gsBodyBackgroundColor;
    x.onmouseup = function () {
        window.setTimeout("wlResetIsDownAllWatchlists()", 100);
        window.setTimeout("ResetIsDownAllSymbolDetailDivs()", 100);
    };

    let sTmp = ""
    let soptMinLines = "<select id=\"optMinLines\">";
    let iLineLimit = giLineLimitInitial;
    if (gbUsingCell) {
        iLineLimit = giLineLimitInitialCell;
    }
    for (let idx = 10; idx < 61; idx++) {
        if (idx == iLineLimit) {
            soptMinLines = soptMinLines + "<option selected value=\"" + idx.toString() + "\">" + idx.toString() + "</option>";
        } else {
            soptMinLines = soptMinLines + "<option value=\"" + idx.toString() + "\">" + idx.toString() + "</option>";
        }
    }
    soptMinLines = soptMinLines + "</select>";
    let sIndexWidth = "width:120px;"
    let sWLButtonWidth = "width:100px;"
    if (gbUsingCell) {

        document.getElementById("spanInfo").style.display = "inline";
    //    sTmp = "<table style=\"border-collapse:collapse; border: 0px solid black; width:420px;border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";

    //    sTmp = sTmp + "<tr height=\"20\">";
    //    sTmp = sTmp + "<td><input type=\"checkbox\" id=\"chkIndexDJI\" name=\"chkIndexDJI\" value=\"\" checked onclick=\"chkIndexChanged(event)\">" +
    //        "<label for=\"chkIndexDJI\"> Dow</label>" +
    //        "<td><input type=\"checkbox\" id=\"chkIndexNasdaq\" name=\"chkIndexNasdaq\" value=\"\" checked onclick=\"chkIndexChanged(event)\">" +
    //        "<label for=\"chkIndexNasdaq\"> Nasdaq</label>" + "</td>" +
    //        "<td><input type=\"checkbox\" id=\"chkIndexSP\" name=\"chkIndexSP\" value=\"\" checked onclick=\"chkIndexChanged(event)\">" +
    //        "<label for=\"chkIndexSP\"> S&P 500</label>" + "</td>" +
    //        "<td>" + "&nbsp;" + "</td>" +
    //        "</tr>" +
    //        "<tr height =\"20\">" +
    //        "<td><input type=\"checkbox\" id=\"chkIndexLargeBio\" name=\"chkIndexLargeBio\" value=\"\" checked onclick=\"chkIndexChanged(event)\">" +
    //        "<label for=\"chkIndexLargeBio\"> Large Bio</label>" + "</td>" +
    //        "<td><input type=\"checkbox\" id=\"chkIndexSmallBio\" name=\"chkIndexSmallBio\" value=\"\" checked onclick=\"chkIndexChanged(event)\">" +
    //        "<label for=\"chkIndexSmallBio\"> Small Bio</label>" + "</td>" +
    //        "<td><input type=\"checkbox\" id=\"chkIndexRussell2000\" name=\"chkIndexRussell2000\" value=\"\" onclick=\"chkIndexChanged(event)\">" +
    //        "<label for=\"chkIndexRussell2000\"> Russell 2K</label>" + "</td>" +
    //        "<td>" + "&nbsp;" + "</td>" +
    //        "</tr>" +
    //        "<tr height =\"20\">" +
    //        "<td><input type=\"checkbox\" id=\"chkIndexNasdaq100\" name=\"chkIndexNasdaq100\" value=\"\" onclick=\"chkIndexChanged(event)\">" +
    //        "<label for=\"chkIndexNasdaq100\"> Nasdaq 100</label>" + "</td>" +
    //        "<td><input type=\"checkbox\" id=\"chkIndex10yrTreasury\" name=\"chkIndex10yrTreasury\" value=\"\" onclick=\"chkIndexChanged(event)\">" +
    //        "<label for=\"chkIndex10yrTreasury\"> 10yr Treas</label>" + "</td>" +
    //        "<td><input type=\"checkbox\" id=\"chkIndexOilGas\" name=\"chkIndexOilGas\" value=\"\" onclick=\"chkIndexChanged(event)\">" +
    //        "<label for=\"chkIndexOilGas\"> Oil & Gas</label>" + "</td>" +
    //        "<td><input type=\"checkbox\" id=\"chkIndexOther\" name=\"chkIndexOther\" value=\"\" onclick=\"chkIndexChanged(event)\">" +
    //        "<label for=\"chkIndexOther\"> Other</label>" + "</td>" +
    //        "</tr>" +
    //        "<tr height =\"40\">" +
    //        "<td colspan=4>" + 
    //        "<input type=\"button\" style=\"vertical-align:middle; border-radius:15px; visibility:visible;\" id=\"btnWLSelect\" name=\"btnWLSelect\" value=\"Select WLs\" onclick=\"SelectWatchlist()\">" +
    //        "&nbsp;" +
    //        "<input type=\"button\" style=\"vertical-align:middle; border-radius:15px;\" id=\"btnWLReset\" name=\"btnWLReset\" value=\"Reset WLs\" onclick=\"ResetWatchlist()\">" +
    //        "&nbsp;" +
    //        "<input type=\"button\" style=\"vertical-align:middle; border-radius:15px;\" id=\"btnWLImport\" name=\"btnWLImport\" value=\"Import WLs\" onclick=\"DoWLImport()\">" +
    //        "&nbsp;Display&nbsp;Lines:&nbsp;" + soptMinLines +
    //        "</td>" +
    //        "</tr>" +
    //        "</table>" + 
    //        "<div id=\"spanIndexes\" style=\"display:none; font-size:10pt;\">" +
    //        "Index or stock symbols separated by commas:" +
    //        "<br />" +
    //        "<input id=\"txtIndexes\" name=\"txtIndexes\" type=\"search\" style=\"font-family:Arial, Helvetica, sans-serif; font-size:10pt;width:300px\" value=\"\">" +
    //        "</div>";
    } else {
    }

    sTmp = "<table id=\"tblIndexSelect\" name=\"tblIndexSelect\" style=\"border-collapse:collapse; border: 0px solid black; border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";

    sTmp = sTmp + "<tr style=\"height:20px;\">";
    sTmp = sTmp + "<td style=\"" + sIndexWidth + "\"><input type=\"checkbox\" id=\"chkIndexDJI\" name=\"chkIndexDJI\" value=\"\" checked onclick=\"chkIndexChanged(event)\">" +
        "<label for=\"chkIndexDJI\"> Dow</label>" + "</td>" +
        "<td style=\"" + sIndexWidth + "\"><input type=\"checkbox\" id=\"chkIndexNasdaq\" name=\"chkIndexNasdaq\" value=\"\" checked onclick=\"chkIndexChanged(event)\">" +
        "<label for=\"chkIndexNasdaq\"> Nasdaq</label>" + "</td>" +
        "<td style=\"" + sIndexWidth + "\"><input type=\"checkbox\" id=\"chkIndexSP\" name=\"chkIndexSP\" value=\"\" checked onclick=\"chkIndexChanged(event)\">" +
        "<label for=\"chkIndexSP\"> S&P 500</label>" + "</td>" +
        "<td style=\"" + sIndexWidth + "\">" + "&nbsp;" + "</td>" +
        "</tr>" +
        "<tr style=\"height:20px;\">" +
        "<td style=\"" + sIndexWidth + "\"><input type=\"checkbox\" id=\"chkIndexLargeBio\" name=\"chkIndexLargeBio\" value=\"\" checked onclick=\"chkIndexChanged(event)\">" +
        "<label for=\"chkIndexLargeBio\"> Large Bio</label>" + "</td>" +
        "<td style=\"" + sIndexWidth + "\"><input type=\"checkbox\" id=\"chkIndexSmallBio\" name=\"chkIndexSmallBio\" value=\"\" checked onclick=\"chkIndexChanged(event)\">" +
        "<label for=\"chkIndexSmallBio\"> Small Bio</label>" + "</td>" +
        "<td style=\"" + sIndexWidth + "\"><input type=\"checkbox\" id=\"chkIndexRussell2000\" name=\"chkIndexRussell2000\" value=\"\" onclick=\"chkIndexChanged(event)\">" +
        "<label for=\"chkIndexRussell2000\"> Russell 2K</label>" + "</td>" +
        "<td style=\"" + sIndexWidth + "\">" + "&nbsp;" + "</td>" +
        "</tr>" +
        "<tr style=\"height:20px;\">" +
        "<td style=\"" + sIndexWidth + "\"><input type=\"checkbox\" id=\"chkIndexNasdaq100\" name=\"chkIndexNasdaq100\" value=\"\" onclick=\"chkIndexChanged(event)\">" +
        "<label for=\"chkIndexNasdaq100\"> Nasdaq 100</label>" + "</td>" +
        "<td style=\"" + sIndexWidth + "\"><input type=\"checkbox\" id=\"chkIndex10yrTreasury\" name=\"chkIndex10yrTreasury\" value=\"\" onclick=\"chkIndexChanged(event)\">" +
        "<label for=\"chkIndex10yrTreasury\"> 10yr Treas</label>" + "</td>" +
        "<td style=\"" + sIndexWidth + "\"><input type=\"checkbox\" id=\"chkIndexOilGas\" name=\"chkIndexOilGas\" value=\"\" onclick=\"chkIndexChanged(event)\">" +
        "<label for=\"chkIndexOilGas\"> Oil & Gas</label>" + "</td>" +
        "<td style=\"" + sIndexWidth + "\"><input type=\"checkbox\" id=\"chkIndexOther\" name=\"chkIndexOther\" value=\"\" onclick=\"chkIndexChanged(event)\">" +
        "<label for=\"chkIndexOther\"> Other</label>" + "</td>" +
        "</tr>" +
        "<tr style=\"height:20px;\">" +
        "<td colspan=\"4\">" +
        "<div id=\"spanIndexes\" style=\"display:none; font-size:10pt;\">" +
        "Index or stock symbols separated by commas:" +
        "<br />" +
        "<input id=\"txtIndexes\" name=\"txtIndexes\" type=\"search\" style=\"font-family:Arial, Helvetica, sans-serif; font-size:10pt;width:300px\" value=\"\">" +
        "</div>" +
        "</td>" +
        "</tr>" +
        "</table>";


    //"Account name to setup Old G/L:" +
    //    "<br />" +
    //    "<input id=\"txtOldGLAccount\" name=\"txtOldGLAccount\" type=\"search\" style=\"font-family:Arial, Helvetica, sans-serif; font-size:10pt;width:300px\" value=\"\">" +

    document.getElementById("tdIndexes").innerHTML = sTmp;

    sTmp = "<br><table style=\"border-collapse:collapse; border: 0px solid black; border-width:0px;font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">" +
        "<tr style=\"height:20px;\">" +
        "<td style=\"" + sWLButtonWidth + "\">" +
        "<input title=\"Select a watchlist to display.\" type=\"button\" style=\"border-radius:15px; visibility:visible;\" id=\"btnWLSelect\" name=\"btnWLSelect\" value=\"Select WL\" onclick=\"SelectWatchlist()\">" +
        "</td>" +
        "<td style=\"" + sWLButtonWidth + "\">" +
        "<input title=\"Press this after using the TDAmeritrade website to add or delete a watchlist.\" type=\"button\" style=\"border-radius:15px;\" id=\"btnWLReset\" name=\"btnWLReset\" value=\"Reset WLs\" onclick=\"ResetWatchlist()\">" +
        "</td>" +
        "<td style=\"" + sWLButtonWidth + "\">" +
        "<input title=\"Press this import all TD watchlists.\" type=\"button\" style=\"border-radius:15px;\" id=\"btnWLImport\" name=\"btnWLImport\" value=\"Import WLs\" onclick=\"DoWLImport()\">" +
        "</td>" +
        "<td style=\"" + sWLButtonWidth + "text-align:right;\">" + "Display Lines:" + "</td>" +
        "<td style=\"" + sWLButtonWidth + "\">" +
        soptMinLines +
        "</td>" +
        "</tr>" +
        "</table>";

    document.getElementById("tdWLButtons").innerHTML = sTmp;

    document.getElementById("tblDetail").onclick = function () {
        giZIndex++;
        if ((document.getElementById("tblDetail") != null) && (!isUndefined(document.getElementById("tblDetail")))) {
            document.getElementById("tblDetail").style.zIndex = giZIndex.toString();
        }
    };

    document.getElementById("tblSymbols").onclick = function () {
        giZIndex++;
        if ((document.getElementById("tblSymbols") != null) && (!isUndefined(document.getElementById("tblSymbols")))) {
            document.getElementById("tblSymbols").style.zIndex = giZIndex.toString();
        }
    };

    document.getElementById("spanPreMarket").style.display = "inline";
    document.getElementById("spanRegularMarket").style.display = "inline";
    document.getElementById("spanPostMarket").style.display = "inline";

    //setup fixed price array
    let oFixedPrice = new FixedPrice();
    oFixedPrice.symbol = "GNL";
    oFixedPrice.price = 13.75;
    oFixedPrice.date = "2020-04-13";
    gaFixedPrices[gaFixedPrices.length] = oFixedPrice;
    oFixedPrice = new FixedPrice();
    oFixedPrice.symbol = "AFIN";
    oFixedPrice.price = 6.76;
    oFixedPrice.date = "2020-04-13";
    gaFixedPrices[gaFixedPrices.length] = oFixedPrice;
    //oFixedPrice = new FixedPrice();
    //oFixedPrice.symbol = "TTD";
    //oFixedPrice.price = 0.000001;
    //oFixedPrice.date = "2021-06-17";
    //gaFixedPrices[gaFixedPrices.length] = oFixedPrice;

    // set markets to track
    let sCookie = getCookie(gsMarketCookieName);
    if (sCookie != null) {
        //before V6.7 cookie should contain (required) dji active (true or false)
        //                      (required) nasdaq active(true or false)
        //                      (required) s & p active(true or false)
        //                      (required) Large Bio active(true or false)
        //                      (required) Small Bio active(true or false)
        //                      (required) Start Date like 2020-01-01
        //                      (optional)symbol / desc, symbol / desc
        //after V6.6 cookie should contain (required) dji active (true or false)
        //                      (required) nasdaq active(true or false)
        //                      (required) s & p active(true or false)
        //                      (required) Large Bio active(true or false)
        //                      (required) Small Bio active(true or false)
        //                      (required) Russell 2000 active(true or false)
        //                      (required) Nasdaq 100 active(true or false)
        //                      (required) 10yr Treasury active(true or false)
        //                      (required) Oil & Gas active(true or false)
        //                      (required) Start Date like 2020-01-01
        //                      (optional)symbol / desc, symbol / desc
        // e.g. true,true,true,true,true,2020-01-01 or false,true,false,true,true,2020-01-01,aapl/Apple etc.
        let sTmp = sCookie.split(",");
        if (sTmp.length > 0) {
            if (sTmp.length > 9) {
                if (sTmp[0] == "true") {
                    document.getElementById("chkIndexDJI").checked = true;
                } else {
                    document.getElementById("chkIndexDJI").checked = false;
                }
                if (sTmp[1] == "true") {
                    document.getElementById("chkIndexNasdaq").checked = true;
                } else {
                    document.getElementById("chkIndexNasdaq").checked = false;
                }
                if (sTmp[2] == "true") {
                    document.getElementById("chkIndexSP").checked = true;
                } else {
                    document.getElementById("chkIndexSP").checked = false;
                }
                if (sTmp[3] == "true") {
                    document.getElementById("chkIndexLargeBio").checked = true;
                } else {
                    document.getElementById("chkIndexLargeBio").checked = false;
                }
                if (sTmp[4] == "true") {
                    document.getElementById("chkIndexSmallBio").checked = true;
                } else {
                    document.getElementById("chkIndexSmallBio").checked = false;
                }
                if (sTmp[5] == "true") {
                    document.getElementById("chkIndexRussell2000").checked = true;
                } else {
                    document.getElementById("chkIndexRussell2000").checked = false;
                }
                if (sTmp[6] == "true") {
                    document.getElementById("chkIndexNasdaq100").checked = true;
                } else {
                    document.getElementById("chkIndexNasdaq100").checked = false;
                }
                if (sTmp[7] == "true") {
                    document.getElementById("chkIndex10yrTreasury").checked = true;
                } else {
                    document.getElementById("chkIndex10yrTreasury").checked = false;
                }
                if (sTmp[8] == "true") {
                    document.getElementById("chkIndexOilGas").checked = true;
                } else {
                    document.getElementById("chkIndexOilGas").checked = false;
                }
                if (sTmp[9] != "") {
                    document.pwdForm.txtStartDate.value = sTmp[9];
                } else {
                    document.pwdForm.txtStartDate.value = gsInitialStartDate;
                }
                if (sTmp.length > 10) {
                    document.getElementById("chkIndexOther").checked = true;
                    document.getElementById("spanIndexes").style.display = "block";
                    let sOtherIndexesSep = "";
                    let sIndexes = "";
                    for (let idx = 10; idx < sTmp.length; idx++) {
                        sIndexes = sIndexes + sOtherIndexesSep + sTmp[idx];
                        sOtherIndexesSep = ",";
                    }
                    document.getElementById("txtIndexes").value = sIndexes;
                } else {
                    document.getElementById("chkIndexOther").checked = false;
                    document.getElementById("txtIndexes").value = "";
                }
            } else if (sTmp.length > 5) {
                if (sTmp[0] == "true") {
                    document.getElementById("chkIndexDJI").checked = true;
                } else {
                    document.getElementById("chkIndexDJI").checked = false;
                }
                if (sTmp[1] == "true") {
                    document.getElementById("chkIndexNasdaq").checked = true;
                } else {
                    document.getElementById("chkIndexNasdaq").checked = false;
                }
                if (sTmp[2] == "true") {
                    document.getElementById("chkIndexSP").checked = true;
                } else {
                    document.getElementById("chkIndexSP").checked = false;
                }
                if (sTmp[3] == "true") {
                    document.getElementById("chkIndexLargeBio").checked = true;
                } else {
                    document.getElementById("chkIndexLargeBio").checked = false;
                }
                if (sTmp[4] == "true") {
                    document.getElementById("chkIndexSmallBio").checked = true;
                } else {
                    document.getElementById("chkIndexSmallBio").checked = false;
                }
                if (sTmp[5] != "") {
                    document.pwdForm.txtStartDate.value = sTmp[5];
                } else {
                    document.pwdForm.txtStartDate.value = gsInitialStartDate;
                }
                if (sTmp.length > 6) {
                    document.getElementById("chkIndexOther").checked = true;
                    document.getElementById("spanIndexes").style.display = "block";
                    let sOtherIndexesSep = "";
                    let sIndexes = "";
                    for (let idx = 6; idx < sTmp.length; idx++) {
                        sIndexes = sIndexes + sOtherIndexesSep + sTmp[idx];
                        sOtherIndexesSep = ",";
                    }
                    document.getElementById("txtIndexes").value = sIndexes;
                } else {
                    document.getElementById("chkIndexOther").checked = false;
                    document.getElementById("txtIndexes").value = "";
                }
            } else {
                gsMarketsCurrentIndexes = "";
                document.pwdForm.txtStartDate.value = gsInitialStartDate;
            }
        } else {
            gsMarketsCurrentIndexes = "";
            document.pwdForm.txtStartDate.value = gsInitialStartDate;
        }
    }

    sCookie = getCookie(gsSectionDisplayCookieName);
    if (sCookie != null) {
        //after V9.2 cookie should contain 
        //                      (required) ShowIndexSelection (true or false)
        //                      (required) ShowIndexes (true or false)
        //                      (required) ShowTradeHistorySelection (true or false)
        //                      (required) ShowPriceHistorySelection (true of false)
        // e.g. true,true,true,true
        let sTmp = sCookie.split(",");
        if (sTmp.length > 0) {
            if (sTmp[0] == "true") { //indexSelection
                giSectionHeights.IndexSelection.selected = true;
            } else {
                giSectionHeights.IndexSelection.selected = false;
            }
            giSectionHeights.IndexSelection.lastselected = giSectionHeights.IndexSelection.selected;
            if (sTmp[1] == "true") { //indexes
                giSectionHeights.Indexes.selected = true;
            } else {
                giSectionHeights.Indexes.selected = false;
            }
            giSectionHeights.Indexes.lastselected = giSectionHeights.Indexes.selected;
            if (sTmp[2] == "true") { //TradeHistorySelection
                giSectionHeights.TradeHistorySelection.selected = true;
            } else {
                giSectionHeights.TradeHistorySelection.selected = false;
            }
            giSectionHeights.TradeHistorySelection.lastselected = giSectionHeights.TradeHistorySelection.selected;
            if (sTmp[3] == "true") { //PriceHistorySelection
                giSectionHeights.PriceHistorySelection.selected = true;
            } else {
                giSectionHeights.PriceHistorySelection.selected = false;
            }
            giSectionHeights.PriceHistorySelection.lastselected = giSectionHeights.PriceHistorySelection.selected;
        }
    }

    //SetupIndexes();

    //alert("gsAccessToken = " + gsAccessToken);
    document.getElementById("txtSymbols").focus();
    document.getElementById("txtEndDate").value = FormatCurrentDateForTD();
    SetWait();
    if (gsRefreshToken == "") {
        GetAccessCode();
        //do the following if want to only make changes to one site
        // Simulate an HTTP redirect:
        //            window.location.replace("http://bobsanping.homeip.net:82/tdapp/default.asp?refreshToken=" + DoURLEncode(gAccessToken.refresh_token) + "&expirationTime=" + gAccessToken.expires_in.toString());
    } else {
        gAccessToken.refresh_token = gsRefreshToken;
        gAccessToken.access_token_expiration_time = (new Date()) + parseInt(gsAccessTokenExpirationTime);
        GetAccessCodeUsingRefreshToken();
    }
    GetTDData(true);
    //if (gAccounts.length > 0) {
    //    if (gWatchlists.length > 0) {
    //        SetupWatchlists(false);
    //    }
    //}
    //        GetAccounts();
    //if (gAccounts.length > 0) {
    //    GetWatchlists(false);
    //    if (gWatchlists.length > 0) {
    //        SetupWatchlists(false);
    //        //get the cookie to mark the selected watchlists
    //    }
    //}
    //        document.getElementById("tdLoggedOnAs").innerHTML = "<b>Logged on as: " + gsLogonUser + "</b>&nbsp;Access Token Expiration:&nbsp;" + FormatDateWithTime(new Date((new Date()).getTime() + (gAccessToken.expires_in * 1000)), true, false);
    document.getElementById("spanLoggedOnAs").innerHTML = "<b>Logged on as: " + gsLogonUser + "</b>" + gsStopLight;
    SetDefault();
    //DoGetIndexValues();
    //DoGetWatchlistPrices();
    drag_div("spanWL");
    drag_divPH("tblSymbols");
    drag_divPH("tblDetail");
    window.setTimeout("GetSectionHeights()", 10);
}

function PastCopiedSymbols(bFirstTime, iProgressIncrementIn, idxItemStart, idxWL, iStartDateIn, iEndDateIn) {
    let iProgressIncrement = iProgressIncrementIn;

    let iRecsLimit = 4000;
    let sRecs = "";
    let sRecsSep = "";

    let sQuantity = iStartDateIn.toString();
    let sAveragePrice = iEndDateIn.toString(); //current update date and time
    let sGL = "0";

    if (bFirstTime) {
        sRecs = "";
        for (let idxWLItem = 0; idxWLItem < gWatchlistItemsToCopy.length; idxWLItem++) {
            let sSymbol = gWatchlistItemsToCopy[idxWLItem].symbol.toUpperCase();
            let sPurchasedDate = gWatchlistItemsToCopy[idxWLItem].purchasedDate;
            let sCatalystDate = gWatchlistItemsToCopy[idxWLItem].catalystDate;
            let sOldGL = gWatchlistItemsToCopy[idxWLItem].priceInfo.oldgl.toString();
            let sSymbolDescription = gWatchlistItemsToCopy[idxWLItem].symbolDescription;
            let sAssetType = "EQUITY";
            if (!isUndefined(oMDQ[sSymbol])) {
                sAssetType = oMDQ[sSymbol].assetType;
            }
            sRecs = sRecs + sRecsSep + sSymbol + "," +
                sPurchasedDate + "," +
                sSymbolDescription + "," +
                sAssetType + "," +
                "0" + "," +
                sQuantity + "," +
                sAveragePrice + "," +
                "0" + "," +
                sOldGL + "," +
                sCatalystDate;
            sRecsSep = "|";
        }

        giProgress = 0;
        iProgressIncrement = Math.floor(100 / (Math.floor(sRecs.length / iRecsLimit) + 1));
        gsLastErrors.length = 0;
        gsAllSuccess.length = 0;
        ShowProgress(true, false);
    }


    //build array of records to insert
//@p_symbol varchar(20),
//@p_acquireddate varchar(10),
//@p_sym_description varchar(50),
//@p_assettype varchar(50),
//@p_gl varchar(20),
//@p_gllaststartdate varchar(20),
//@p_gllastenddate varchar(20),
//@p_hidden char(1),
//@p_oldgl varchar(20),
//@p_catalystdate varchar(10))
    sRecs = "";
    sRecsSep = "";
    for (let idxWLItem = idxItemStart; idxWLItem < gWatchlistItemsToCopy.length; idxWLItem++) {
        let sSymbol = gWatchlistItemsToCopy[idxWLItem].symbol.toUpperCase();
        let sPurchasedDate = gWatchlistItemsToCopy[idxWLItem].purchasedDate;
        let sCatalystDate = gWatchlistItemsToCopy[idxWLItem].catalystDate;
        let sOldGL = gWatchlistItemsToCopy[idxWLItem].priceInfo.oldgl.toString();
        let sSymbolDescription = gWatchlistItemsToCopy[idxWLItem].symbolDescription;
        let sAssetType = "EQUITY";
        if (!isUndefined(oMDQ[sSymbol])) {
            sAssetType = oMDQ[sSymbol].assetType;
        }

        let sThisRec = sSymbol + "," +
            sPurchasedDate + "," +
            sSymbolDescription + "," +
            sAssetType + "," +
            "0" + "," +
            sQuantity + "," +
            sAveragePrice + "," +
            "0" + "," +
            sOldGL + "," +
            sCatalystDate;

        if ((sRecs + sThisRec + sRecsSep).length > iRecsLimit) {
            giProgress = giProgress + iProgressIncrement;
            if (AddWLDetailRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
                if (gsLastError != "") {
                    gsLastErrors[gsLastErrors.length] = " Error pasting symbols" + " -- " + gsLastError;
                } else {
                    gsLastErrors[gsLastErrors.length] = " Error pasting symbols";
                }
            } else {
                gsAllSuccess[gsAllSuccess.length] = "Successfully pasted symbols";
            }
            window.setTimeout("PastCopiedSymbols(false, " + iProgressIncrement.toString() + ", " + idxWLItem.toString() + ", " + idxWL.toString() + ", " + iStartDateIn.toString() + ", " + iEndDateIn.toString() + ")", 500);
            return;
        } else {
            sRecs = sRecs + sRecsSep + sThisRec;
            sRecsSep = "|";
        }
    }

    giProgress = giProgress + iProgressIncrement;
    if (AddWLDetailRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
        if (gsLastError != "") {
            gsLastErrors[gsLastErrors.length] = " Error pasting symbols" + " -- " + gsLastError;
        } else {
            gsLastErrors[gsLastErrors.length] = " Error pasting symbols";
        }
    } else {
        gsAllSuccess[gsAllSuccess.length] = "Successfully pasted symbols";
    }

    if (gsLastErrors.length == 0) { //add WLItems to watchlist and set them to selected
        for (let idxWLItem = 0; idxWLItem < gWatchlistItemsToCopy.length; idxWLItem++) {
            let sSymbol = gWatchlistItemsToCopy[idxWLItem].symbol.toUpperCase();
            let sPurchasedDate = gWatchlistItemsToCopy[idxWLItem].purchasedDate;
            let sCatalystDate = gWatchlistItemsToCopy[idxWLItem].catalystDate;
            let sOldGL = gWatchlistItemsToCopy[idxWLItem].priceInfo.oldgl.toString();
            let sSymbolDescription = gWatchlistItemsToCopy[idxWLItem].symbolDescription;
            let sAssetType = "EQUITY";
            if (!isUndefined(oMDQ[sSymbol])) {
                sAssetType = oMDQ[sSymbol].assetType;
            }
            let bFoundIt = false;
            for (let idxItem = 0; idxItem < gWatchlists[idxWL].WLItems.length; idxItem++) {
                if (gWatchlists[idxWL].WLItems[idxItem].symbol == sSymbol) {
                    gWatchlists[idxWL].WLItems[idxItem].bSelected = true;
                    bFoundIt = true;
                    break;
                }
            }
            if (!bFoundIt) {
                let oWLItem = new WLItem();
                oWLItem.bSelectedForOrder = true;
                oWLItem.assetType = sAssetType;
                oWLItem.symbol = sSymbol;

                //oWLItem.sequenceId = iItemCnt;
                oWLItem.purchasedDate = sPurchasedDate;
                oWLItem.catalystDate = sCatalystDate;
                oWLItem.bHidden = false;
                oWLItem.symbolDescription = sSymbolDescription;
                if (sGL == "") {
                    sGL = "0";
                }
                oWLItem.priceInfo.averagePrice = parseFloat(sGL);
                oWLItem.priceInfo.GLUpdateDate = iEndDateIn;
                oWLItem.priceInfo.GLUpdateStartDate = iStartDateIn;
                if (sOldGL == "") {
                    oWLItem.priceInfo.oldgl = 0;
                } else {
                    oWLItem.priceInfo.oldgl = parseFloat(sOldGL);
                }

                gWatchlists[idxWL].WLItems[gWatchlists[idxWL].WLItems.length] = oWLItem;
            }
        }
        gWatchlists[idxWL].WLItems[gWatchlists[idxWL].WLItems.length - 1].bSelectedForOrder = false;
        wlMarkSelectedItem(idxWL, gWatchlists[idxWL].WLItems.length - 1);

    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
            gbDoResetWatchlists = true;
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    giProgress = 0;
    ShowProgress(false, true);
    gbDoingCreateOrders = false;
    DoGetTDData();
}

function PostOCancel(sAccountId, sData) {
    let iTryCount = 0;
    let iReturn = 0;

    iTryCount = 0;
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------

        let xhttp = null;
        let iInnerTryCount = 0;

        let sServerURL = "https://api.tdameritrade.com/v1/accounts/" + sAccountId + "/orders/" + sData;

        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpenDelete(xhttp, sServerURL, "Error during xhttp.open to " + sServerURL, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

            // send the request
            try {
                //debugger
                xhttp.send();
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        let oCM = myJSON.parse(xhttp.responseText);
                        switch (checkTDAPIErrorNoErrorDisplayed(oCM)) {
                            case 0: //no error
                                {
                                    break;
                                }
                            case 1: //acces code expired
                                {
                                    xhttp = null;
                                    if (GetAccessCodeUsingRefreshToken()) {
                                        iTryCount++;
                                    } else {
                                        alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                        iReturn = 1;
                                        iTryCount = 2;
                                    }
                                    break;
                                }
                            case 2: //other error
                                {
                                    iReturn = 2;
                                    iTryCount = 2;
                                    gsLastError = oCM.error;
                                    break;
                                }
                            default:
                                {
                                    iReturn = 3;
                                    iTryCount = 2;
                                    break;
                                }
                        }
                    }
                    else {
                        iReturn = 0; //success
                        iTryCount = 2;
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        iReturn = 5;
                        gsLastError = "HTTP response is null.";
                    }
                }
            }
            catch (e1) {
                //debugger
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    //alert("PostTDOrder Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                    iReturn = 6;
                    gsLastError = e1.message;
                }
            }
        }
        else {
            iReturn = 7; //error during HTTP open request
            gsLastError = "Error during HTTP open request";
            iTryCount = 2;
            break;
        }
    }

    return iReturn;
}

function PostSODelete(sAccountId, sData) {
    let iTryCount = 0;
    let iReturn = 0;

    iTryCount = 0;
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------

        let xhttp = null;
        let iInnerTryCount = 0;

        let sServerURL = "https://api.tdameritrade.com/v1/accounts/" + sAccountId + "/savedorders/" + sData;

        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpenDelete(xhttp, sServerURL, "Error during xhttp.open to " + sServerURL, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

            // send the request
            try {
                //debugger
                xhttp.send();
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        let oCM = myJSON.parse(xhttp.responseText);
                        switch (checkTDAPIErrorNoErrorDisplayed(oCM)) {
                            case 0: //no error
                                {
                                    break;
                                }
                            case 1: //acces code expired
                                {
                                    xhttp = null;
                                    if (GetAccessCodeUsingRefreshToken()) {
                                        iTryCount++;
                                    } else {
                                        alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                        iReturn = 1;
                                        iTryCount = 2;
                                    }
                                    break;
                                }
                            case 2: //other error
                                {
                                    iReturn = 2;
                                    iTryCount = 2;
                                    gsLastError = oCM.error;
                                    break;
                                }
                            default:
                                {
                                    iReturn = 3;
                                    iTryCount = 2;
                                    break;
                                }
                        }
                    }
                    else {
                        iReturn = 0; //success
                        iTryCount = 2;
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        iReturn = 5;
                        gsLastError = "HTTP response is null.";
                    }
                }
            }
            catch (e1) {
                //debugger
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    //alert("PostTDOrder Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                    iReturn = 6;
                    gsLastError = e1.message;
                }
            }
        }
        else {
            iReturn = 7; //error during HTTP open request
            gsLastError = "Error during HTTP open request";
            iTryCount = 2;
            break;
        }
    }

    return iReturn;
}

function PostTDOrder(sAccountId, sData) {
    //sType = BUY, SELL, TRAILING STOP
    let iTryCount = 0;
    let iReturn = 0;

    iTryCount = 0;
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------

        let xhttp = null;
        let iInnerTryCount = 0;

        let sServerURL = "https://api.tdameritrade.com/v1/accounts/" + sAccountId + "/savedorders";

        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpen(xhttp, sServerURL, "Error during xhttp.open to " + sServerURL, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);
            xhttp.setRequestHeader("Content-Type", "application/json");

            // send the request
            try {
                //debugger
                xhttp.send(sData);
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        let oCM = myJSON.parse(xhttp.responseText);
                        switch (checkTDAPIErrorNoErrorDisplayed(oCM)) {
                            case 0: //no error
                                {
                                    break;
                                }
                            case 1: //acces code expired
                                {
                                    xhttp = null;
                                    if (GetAccessCodeUsingRefreshToken()) {
                                        iTryCount++;
                                    } else {
                                        alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                        iReturn = 1;
                                        iTryCount = 2;
                                    }
                                    break;
                                }
                            case 2: //other error
                                {
                                    iReturn = 2;
                                    iTryCount = 2;
                                    gsLastError = oCM.error;
                                    break;
                                }
                            default:
                                {
                                    iReturn = 3;
                                    iTryCount = 2;
                                    break;
                                }
                        }
                    }
                    else {
                        iReturn = 0; //success
                        iTryCount = 2;
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        iReturn = 5;
                        gsLastError = "HTTP response is null.";
                    }
                }
            }
            catch (e1) {
                //debugger
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    //alert("PostTDOrder Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                    iReturn = 6;
                    gsLastError = e1.message;
                }
            }
        }
        else {
            iReturn = 7; //error during HTTP open request
            gsLastError = "Error during HTTP open request";
            iTryCount = 2;
            break;
        }
    }

    return iReturn;
}

function PostTDPlaceOrder(sAccountId, sData) {
    //sType = BUY, SELL, TRAILING STOP
    let iTryCount = 0;
    let iReturn = 0;

    iTryCount = 0;
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------

        let xhttp = null;
        let iInnerTryCount = 0;

        let sServerURL = "https://api.tdameritrade.com/v1/accounts/" + sAccountId + "/orders";

        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpen(xhttp, sServerURL, "Error during xhttp.open to " + sServerURL, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);
            xhttp.setRequestHeader("Content-Type", "application/json");

            // send the request
            try {
                //debugger
                xhttp.send(sData);
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        let oCM = myJSON.parse(xhttp.responseText);
                        switch (checkTDAPIErrorNoErrorDisplayed(oCM)) {
                            case 0: //no error
                                {
                                    break;
                                }
                            case 1: //acces code expired
                                {
                                    xhttp = null;
                                    if (GetAccessCodeUsingRefreshToken()) {
                                        iTryCount++;
                                    } else {
                                        alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                        iReturn = 1;
                                        iTryCount = 2;
                                    }
                                    break;
                                }
                            case 2: //other error
                                {
                                    iReturn = 2;
                                    iTryCount = 2;
                                    gsLastError = oCM.error;
                                    break;
                                }
                            default:
                                {
                                    iReturn = 3;
                                    iTryCount = 2;
                                    break;
                                }
                        }
                    }
                    else {
                        iReturn = 0; //success
                        iTryCount = 2;
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        iReturn = 5;
                        gsLastError = "HTTP response is null.";
                    }
                }
            }
            catch (e1) {
                //debugger
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    //alert("PostTDOrder Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                    iReturn = 6;
                    gsLastError = e1.message;
                }
            }
        }
        else {
            iReturn = 7; //error during HTTP open request
            gsLastError = "Error during HTTP open request";
            iTryCount = 2;
            break;
        }
    }

    return iReturn;
}

function PostTDWLCreateWL(sAccountId, sData) {
    let iTryCount = 0;
    let iReturn = 0;

    iTryCount = 0;
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------

        let xhttp = null;
        let iInnerTryCount = 0;
        let sServerURL = "https://api.tdameritrade.com/v1/accounts/" + sAccountId + "/watchlists";

        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpen(xhttp, sServerURL, "Error during xhttp.open to " + sServerURL, false)) {
            // set the request header
            xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);
            xhttp.setRequestHeader("Content-Type", "application/json");

            // send the request
            try {
                //debugger
                xhttp.send(sData);
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        let oCM = myJSON.parse(xhttp.responseText);
                        switch (checkTDAPIErrorNoErrorDisplayed(oCM)) {
                            case 0: //no error
                                {
                                    break;
                                }
                            case 1: //acces code expired
                                {
                                    xhttp = null;
                                    if (GetAccessCodeUsingRefreshToken()) {
                                        iTryCount++;
                                    } else {
                                        alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                        iReturn = 1;
                                        iTryCount = 2;
                                    }
                                    break;
                                }
                            case 2: //other error
                                {
                                    iReturn = 2;
                                    iTryCount = 2;
                                    gsLastError = oCM.error;
                                    break;
                                }
                            default:
                                {
                                    iReturn = 3;
                                    iTryCount = 2;
                                    break;
                                }
                        }
                    }
                    else {
                        iReturn = 0; //success
                        iTryCount = 2;
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        iReturn = 5;
                        gsLastError = "HTTP response is null.";
                    }
                }
            }
            catch (e1) {
                //debugger
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    //alert("PostTDOrder Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                    iReturn = 6;
                    gsLastError = e1.message;
                }
            }
        }
        else {
            iReturn = 7; //error during HTTP open request
            gsLastError = "Error during HTTP open request";
            iTryCount = 2;
            break;
        }
    }

    return iReturn;
}

function PostWLDeleteWL(sAccountId, sWLId) {
    let iTryCount = 0;
    let iReturn = 0;

    iTryCount = 0;
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------

        let xhttp = null;
        let iInnerTryCount = 0;

        let sServerURL = "https://api.tdameritrade.com/v1/accounts/" + sAccountId + "/watchlists/" + sWLId;

        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpenDelete(xhttp, sServerURL, "Error during xhttp.open to " + sServerURL, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);

            // send the request
            try {
                //debugger
                xhttp.send();
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        let oCM = myJSON.parse(xhttp.responseText);
                        switch (checkTDAPIErrorNoErrorDisplayed(oCM)) {
                            case 0: //no error
                                {
                                    break;
                                }
                            case 1: //acces code expired
                                {
                                    xhttp = null;
                                    if (GetAccessCodeUsingRefreshToken()) {
                                        iTryCount++;
                                    } else {
                                        alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                        iReturn = 1;
                                        iTryCount = 2;
                                    }
                                    break;
                                }
                            case 2: //other error
                                {
                                    iReturn = 2;
                                    iTryCount = 2;
                                    gsLastError = oCM.error;
                                    break;
                                }
                            default:
                                {
                                    iReturn = 3;
                                    iTryCount = 2;
                                    break;
                                }
                        }
                    }
                    else {
                        iReturn = 0; //success
                        iTryCount = 2;
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        iReturn = 5;
                        gsLastError = "HTTP response is null.";
                    }
                }
            }
            catch (e1) {
                //debugger
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    //alert("PostTDOrder Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                    iReturn = 6;
                    gsLastError = e1.message;
                }
            }
        }
        else {
            iReturn = 7; //error during HTTP open request
            gsLastError = "Error during HTTP open request";
            iTryCount = 2;
            break;
        }
    }

    return iReturn;
}

function PostTDWLOrder(sAccountId, sWatchlistId, sData) {
    let iTryCount = 0;
    let iReturn = 0;

    iTryCount = 0;
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------

        let xhttp = null;
        let iInnerTryCount = 0;
        let sServerURL = "https://api.tdameritrade.com/v1/accounts/" + sAccountId + "/watchlists/" + sWatchlistId;

        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpenPatch(xhttp, sServerURL, "Error during xhttp.open to " + sServerURL, false, false, "", "")) {
            // set the request header
            xhttp.setRequestHeader("AUTHORIZATION", "Bearer " + gAccessToken.access_token);
            xhttp.setRequestHeader("Content-Type", "application/json");

            // send the request
            try {
                //debugger
                xhttp.send(sData);
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        let oCM = myJSON.parse(xhttp.responseText);
                        switch (checkTDAPIErrorNoErrorDisplayed(oCM)) {
                            case 0: //no error
                                {
                                    break;
                                }
                            case 1: //acces code expired
                                {
                                    xhttp = null;
                                    if (GetAccessCodeUsingRefreshToken()) {
                                        iTryCount++;
                                    } else {
                                        alert("An error occurred attempting to refresh the access code. Please reload the app.");
                                        iReturn = 1;
                                        iTryCount = 2;
                                    }
                                    break;
                                }
                            case 2: //other error
                                {
                                    iReturn = 2;
                                    iTryCount = 2;
                                    gsLastError = oCM.error;
                                    break;
                                }
                            default:
                                {
                                    iReturn = 3;
                                    iTryCount = 2;
                                    break;
                                }
                        }
                    }
                    else {
                        iReturn = 0; //success
                        iTryCount = 2;
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        iReturn = 5;
                        gsLastError = "HTTP response is null.";
                    }
                }
            }
            catch (e1) {
                //debugger
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    //alert("PostTDOrder Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                    iReturn = 6;
                    gsLastError = e1.message;
                }
            }
        }
        else {
            iReturn = 7; //error during HTTP open request
            gsLastError = "Error during HTTP open request";
            iTryCount = 2;
            break;
        }
    }

    return iReturn;
}

function PostWLAutoCloseSymbolOrders(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, idxOrderStart, sAccountId, sWatchlistId, iTryCountIn, idxWL, bAddStartDateToName) {
    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    let iTryCount = iTryCountIn;
    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = 100 / gTDWLOrders.length;
        gsLastErrors.length = 0;
        giTDPostOrderRetryCnt = 0;
//        ShowProgress(true, false);
    }
    for (let idxOrder = idxOrderStart; idxOrder > -1; idxOrder--) {
        if (giProgress < 100) {
            giProgress = giProgress + iProgressIncrement;
        }
        let oTDWLOrder = new TDWLOrder();
        oTDWLOrder = gTDWLOrders[idxOrder];
        if (!oTDWLOrder.bProcessed) {
            if (oTDWLOrder.sError == gsWLAutoGLUpdateNoAccountError) {
                // an error occurred
                iNumErrors++;
                gTDWLOrders[idxOrder].bProcessed = true;
            } else {
                let sOrder = "";
                sOrder = oTDWLOrder.aWL00Start +
                    oTDWLOrder.aWL01name +
                    oTDWLOrder.aWL02watchlistId +
                    oTDWLOrder.aWL03watchlistItemsStart +
                    oTDWLOrder.aWL03watchlistItemStart +
                    oTDWLOrder.aWL04sequenceId +
                    oTDWLOrder.aWL05Aquantity +
                    oTDWLOrder.aWL06AaveragePrice +
                    oTDWLOrder.aWL07commission +
                    oTDWLOrder.aWL08instrumentStart +
                    oTDWLOrder.aWL09symbol +
                    oTDWLOrder.aWL10assetType +
                    oTDWLOrder.aWL11instrumentEnd +
                    oTDWLOrder.aWL12watchlistItemEnd +
                    oTDWLOrder.aWL12watchlistItemsEnd +
                    oTDWLOrder.aWL13end;
                if (PostTDWLOrder(sAccountId, sWatchlistId, sOrder) == 0) {
                    //success
                    iNumSuccess++;
                    gTDWLOrders[idxOrder].bProcessed = true;
                    if (gTDWLOrders[idxOrder].sError != "") {
                        iNumErrors--;
                    }
                    gTDWLOrders[idxOrder].sError = "";
                } else {
                    if (gsLastError.indexOf("Individual App's transactions per seconds restriction reached.") != -1) {
                        if (iTryCount < 3) {
                            iTryCount++;
                            giProgress = giProgress - 1;
                            window.setTimeout("PostWLAutoCloseSymbolOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + idxOrder.toString() + ", '" + sAccountId + "','" + sWatchlistId + "', " + iTryCount.toString() + ", " + idxWL.toString() + ", " + bAddStartDateToName + ")", 3000);
                            return;
                        } else {
                            // an error occurred
                            iNumErrors++;
                            gTDWLOrders[idxOrder].sError = oTDWLOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                        }
                    } else {
                        // an error occurred
                        iNumErrors++;
                        gTDWLOrders[idxOrder].sError = oTDWLOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                    }
                }
            }
        }
        window.setTimeout("PostWLAutoCloseSymbolOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (idxOrder - 1).toString() + ", '" + sAccountId + "','" + sWatchlistId + "',  0, " + idxWL.toString() + ", " + bAddStartDateToName + ")", 200);
        return;
    }
    let sMsg = iNumSuccess.toString() + " watchlist ";
    if ((iNumSuccess > 1) || (iNumSuccess == 0)) {
        sMsg = sMsg + "symbols updated";
    } else {
        sMsg = sMsg + "symbol updated";
    }
    if ((iNumErrors > 0) && (giTDPostOrderRetryCnt < 3)) {
        giTDPostOrderRetryCnt++;
        giProgress = 0;
        window.setTimeout("PostWLAutoCloseSymbolOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (gTDWLOrders.length - 1).toString() + ", '" + sAccountId + "','" + sWatchlistId + "',  0, " + idxWL.toString() + ", " + bAddStartDateToName + ")", 4000);
        return;
    } else {
        if (iNumErrors > 0) {
            sMsg = sMsg + " with the following errors: ";
            for (let idxOrder = 0; idxOrder < gTDWLOrders.length; idxOrder++) {
                if (!gTDWLOrders[idxOrder].bProcessed) {
                    sMsg = sMsg + gsCRLF + gTDWLOrders[idxOrder].sError;
                } else {
                    if (gTDWLOrders[idxOrder].sError == gsWLAutoGLUpdateNoAccountError) {
                        sMsg = sMsg + gsCRLF + gTDWLOrders[idxOrder].symbol + " -- " + gTDWLOrders[idxOrder].sError;
                    }
                }
            }
            alert(sMsg);
        } else {
            sMsg = sMsg + ".";
            alert(sMsg);
        }
    }

    gbDoResetWatchlists = true;
    DoGetTDData();
    if (iNumErrors == 0) {
        ClearAllWLInputFields(idxWL, bAddStartDateToName);
    }

    GetTradesCanceled();
//    ShowProgress(false, true);
    gbDoingCreateOrders = false;
//    SetDefault();
}

function PostWLBuyOrders(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, idxOrderStart, sAccountId, iTryCountIn, idxWL) {
    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    let iTryCount = iTryCountIn;
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    gsSaveOrdersSummaryMsg = "";
    if (document.getElementById("chkSave" + sThisId).checked) {
        if (bFirstTime) {
            giProgress = 0;
            iProgressIncrement = 100 / gTDOrders.length;
            gsLastErrors.length = 0;
            giTDPostOrderRetryCnt = 0;
            ShowProgress(true, false);
        }
        for (let idxOrder = idxOrderStart; idxOrder > -1; idxOrder--) {
            if (giProgress < 100) {
                giProgress = giProgress + iProgressIncrement;
            }
            let oTDOrder = new TDOrder();
            oTDOrder = gTDOrders[idxOrder];
            if (!oTDOrder.bProcessed) {
                let sOrder = "";
                sOrder = oTDOrder.a00complexOrderStrategyTypeStart +
                    oTDOrder.a02orderType +
                    oTDOrder.a03Asession +
                    oTDOrder.a04duration +
                    oTDOrder.a05orderStrategyType +
                    oTDOrder.a06orderLegCollectionStart +
                    oTDOrder.a07instructionStart +
                    oTDOrder.a08quantity +
                    oTDOrder.a09instrumentStart +
                    oTDOrder.a10symbol +
                    oTDOrder.a11assetType +
                    oTDOrder.a12instrumentEnd + oTDOrder.a13instructionEnd + oTDOrder.a14orderLegCollectionEnd + oTDOrder.a15complexOrderStrategyTypeEnd;
                if (PostTDOrder(sAccountId, sOrder) == 0) {
                    //success
                    iNumSuccess++;
                    gTDOrders[idxOrder].bProcessed = true;
                    if (gTDOrders[idxOrder].sError != "") {
                        iNumErrors--;
                    }
                    gTDOrders[idxOrder].sError = "";
                } else {
                    if (gsLastError.indexOf("Individual App's transactions per seconds restriction reached.") != -1) {
                        if (iTryCount < 3) {
                            iTryCount++;
                            giProgress = giProgress - 1;
                            window.setTimeout("PostWLBuyOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + idxOrder.toString() + ", '" + sAccountId + "'," + iTryCount.toString() + ", " + idxWL.toString() + ")", 3000);
                            return;
                        } else {
                            // an error occurred
                            iNumErrors++;
                            gTDOrders[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                        }
                    } else {
                        // an error occurred
                        iNumErrors++;
                        gTDOrders[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                    }
                }
            }
            window.setTimeout("PostWLBuyOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (idxOrder - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 200);
            return;
        }
        let sMsg = iNumSuccess.toString() + " BUY ";
        if (iNumSuccess > 1) {
            sMsg = sMsg + "orders created";
        } else {
            sMsg = sMsg + "order created";
        }
        if ((iNumErrors > 0) && (giTDPostOrderRetryCnt < 3)) {
            giTDPostOrderRetryCnt++;
            giProgress = 0;
            window.setTimeout("PostWLBuyOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 4000);
            return;
        } else {
            if (iNumErrors > 0) {
                sMsg = sMsg + " with the following errors: ";
                for (let idxOrder = 0; idxOrder < gTDOrders.length; idxOrder++) {
                    if (!gTDOrders[idxOrder].bProcessed) {
                        sMsg = sMsg + gsCRLF + gTDOrders[idxOrder].sError;
                    }
                }
                sMsg = sMsg + gsCRLF + "Use the Account Saved Orders watchlist to place these orders.";
                if (document.getElementById("chkPlace" + sThisId).checked) {
                    gsSaveOrdersSummaryMsg = sMsg;
                } else {
                    alert(sMsg);
                }
            } else {
                sMsg = sMsg + ". Use the Account Saved Orders watchlist to place these orders.";
                if (document.getElementById("chkPlace" + sThisId).checked) {
                    gsSaveOrdersSummaryMsg = sMsg;
                } else {
                    alert(sMsg);
                }
            }
        }

        if (document.getElementById("chkPlace" + sThisId).checked) {
            window.setTimeout("PostWLPlaceOrders(true, 0, 0, 0, " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
        } else {
            if (iNumErrors == 0) {
                ClearAllWLInputFields(idxWL);
            }
            ShowProgress(false, true);
            gbDoingCreateOrders = false;
            SetDefault();
            SetDefaultWL(idxWL);
        }
    } else { //only doing place orders
        window.setTimeout("PostWLPlaceOrders(true, 0, 0, 0, " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
    }
}

function PostWLBuyOrdersLimit(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, idxOrderStart, sAccountId, iTryCountIn, idxWL) {
    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    let iTryCount = iTryCountIn;
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    gsSaveOrdersSummaryMsg = "";
    if (document.getElementById("chkSave" + sThisId).checked) {
        if (bFirstTime) {
            giProgress = 0;
            iProgressIncrement = 100 / gTDOrders.length;
            gsLastErrors.length = 0;
            giTDPostOrderRetryCnt = 0;
            ShowProgress(true, false);
        }
        for (let idxOrder = idxOrderStart; idxOrder > -1; idxOrder--) {
            if (giProgress < 100) {
                giProgress = giProgress + iProgressIncrement;
            }
            let oTDOrder = new TDOrder();
            oTDOrder = gTDOrders[idxOrder];
            if (!oTDOrder.bProcessed) {
                let sOrder = "";
                sOrder = oTDOrder.a00complexOrderStrategyTypeStart + oTDOrder.a01complexOrderStrategyType +
                    oTDOrder.a02orderType +
                    oTDOrder.a03AsessionSeamless +
                    oTDOrder.a04duration +
                    oTDOrder.a03FcancelTime +
                    oTDOrder.a02Aprice +
                    oTDOrder.a05orderStrategyType +
                    oTDOrder.a06orderLegCollectionStart +
                    oTDOrder.a07instructionStart +
                    oTDOrder.a08quantity +
                    oTDOrder.a09instrumentStart +
                    oTDOrder.a10symbol +
                    oTDOrder.a11assetType +
                    oTDOrder.a12instrumentEnd + oTDOrder.a13instructionEnd + oTDOrder.a14orderLegCollectionEnd + oTDOrder.a15complexOrderStrategyTypeEnd;
                if (PostTDOrder(sAccountId, sOrder) == 0) {
                    //success
                    iNumSuccess++;
                    gTDOrders[idxOrder].bProcessed = true;
                    if (gTDOrders[idxOrder].sError != "") {
                        iNumErrors--;
                    }
                    gTDOrders[idxOrder].sError = "";
                } else {
                    if (gsLastError.indexOf("Individual App's transactions per seconds restriction reached.") != -1) {
                        if (iTryCount < 3) {
                            iTryCount++;
                            giProgress = giProgress - 1;
                            window.setTimeout("PostWLBuyOrdersLimit(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + idxOrder.toString() + ", '" + sAccountId + "'," + iTryCount.toString() + ", " + idxWL.toString() + ")", 3000);
                            return;
                        } else {
                            // an error occurred
                            iNumErrors++;
                            gTDOrders[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                        }
                    } else {
                        // an error occurred
                        iNumErrors++;
                        gTDOrders[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                    }
                }
            }
            window.setTimeout("PostWLBuyOrdersLimit(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (idxOrder - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 200);
            return;
        }
        let sMsg = iNumSuccess.toString() + " BUY LIMIT ";
        if (iNumSuccess > 1) {
            sMsg = sMsg + "orders created";
        } else {
            sMsg = sMsg + "order created";
        }
        if ((iNumErrors > 0) && (giTDPostOrderRetryCnt < 3)) {
            giTDPostOrderRetryCnt++;
            giProgress = 0;
            window.setTimeout("PostWLBuyOrdersLimit(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 4000);
            return;
        } else {
            if (iNumErrors > 0) {
                sMsg = sMsg + " with the following errors: ";
                for (let idxOrder = 0; idxOrder < gTDOrders.length; idxOrder++) {
                    if (!gTDOrders[idxOrder].bProcessed) {
                        sMsg = sMsg + gsCRLF + gTDOrders[idxOrder].sError;
                    }
                }
                sMsg = sMsg + gsCRLF + "Use the Account Saved Orders watchlist to place these orders.";
                if (document.getElementById("chkPlace" + sThisId).checked) {
                    gsSaveOrdersSummaryMsg = sMsg;
                } else {
                    alert(sMsg);
                }
            } else {
                sMsg = sMsg + ". Use the Account Saved Orders watchlist to place these orders.";
                if (document.getElementById("chkPlace" + sThisId).checked) {
                    gsSaveOrdersSummaryMsg = sMsg;
                } else {
                    alert(sMsg);
                }
            }
        }

        if (document.getElementById("chkPlace" + sThisId).checked) {
            window.setTimeout("PostWLPlaceOrders(true, 0, 0, 0, " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
        } else {
            if (iNumErrors == 0) {
                ClearAllWLInputFields(idxWL);
            }
            ShowProgress(false, true);
            gbDoingCreateOrders = false;
            SetDefault();
            SetDefaultWL(idxWL);
        }
    } else { //only doing place orders
        window.setTimeout("PostWLPlaceOrders(true, 0, 0, 0, " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
    }
}

function PostWLDeleteSymbolOrders(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, idxOrderStart, sAccountId, sWatchlistId, iTryCountIn, idxWL) {
    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = 100;
        //iProgressIncrement = 100 / gTDWLOrders.length;
        gsLastErrors.length = 0;
        giTDPostOrderRetryCnt = 0;
        ShowProgress(true, false);
    }
    if (giProgress < 100) {
        giProgress = giProgress + iProgressIncrement;
    }
    let sOrder = "";
    let sSep = "";
    for (let idxOrder = 0; idxOrder < gTDWLOrders.length; idxOrder++) {
        let oTDWLOrder = new TDWLOrder();
        oTDWLOrder = gTDWLOrders[idxOrder];
        if (sOrder == "") {
            sOrder = oTDWLOrder.aWL00Start +
                oTDWLOrder.aWL01name +
                oTDWLOrder.aWL02watchlistId +
                oTDWLOrder.aWL03watchlistItemsStart;
        }
        sOrder = sOrder + sSep +
            oTDWLOrder.aWL03watchlistItemStart +
            oTDWLOrder.aWL04sequenceId +
            oTDWLOrder.aWL05quantity +
            oTDWLOrder.aWL06averagePrice +
            oTDWLOrder.aWL07commission +
            oTDWLOrder.aWL07purchasedDate +
            oTDWLOrder.aWL08instrumentStart +
            oTDWLOrder.aWL09symbol +
            oTDWLOrder.aWL10assetType +
            oTDWLOrder.aWL11instrumentEnd +
            oTDWLOrder.aWL12watchlistItemEnd;
        sSep = ",";
    }
    let oTDWLOrder = new TDWLOrder();
    sOrder = sOrder + oTDWLOrder.aWL12watchlistItemsEnd +
        oTDWLOrder.aWL13end;

    if (PostTDWLOrder(sAccountId, sWatchlistId, sOrder) == 0) {
        //success
        iNumSuccess = gTDWLOrders.length;
        let sMsg = iNumSuccess.toString() + " watchlist ";
        if (iNumSuccess > 1) {
            sMsg = sMsg + "symbols deleted";
        } else {
            sMsg = sMsg + "symbol deleted";
        }
        alert(sMsg);
        gbDoResetWatchlists = true;
        DoGetTDData();
        ShowProgress(false, true);
        gbDoingCreateOrders = false;
        SetDefault();
    } else {
        let sMsg = ""
        sMsg = sMsg + "Error deleting symbols -- ";
        sMsg = sMsg + gsLastError;
        alert(sMsg);
        gbDoResetWatchlists = true;
        DoGetTDData();
        ShowProgress(false, true);
        gbDoingCreateOrders = false;
        SetDefault();
    }
}

function PostWLDeleteSymbolOrdersOGL(sAccountId) {
    let iNumSuccess = 0;
    let iNumSuccessDeleteWL = 0;
    let iNumErrors = 0;
    let iNumErrorsDeleteWL = 0;
    let iProgressIncrement = 100;

    giProgress = 0;
    iProgressIncrement = 100;
    //iProgressIncrement = 100 / gTDWLOrders.length;
    gsLastErrors.length = 0;
    giTDPostOrderRetryCnt = 0;
    ShowProgress(true, false);

    if (giProgress < 100) {
        giProgress = giProgress + iProgressIncrement;
    }

    let sMsg = "";

    if (gTDWLOrdersDeleteWL.length > 0) {
        //first delete all of the watchlists
        for (let idxOrder = 0; idxOrder < gTDWLOrdersDeleteWL.length; idxOrder++) {
            let oTDWLOrder = new TDWLOrder();
            oTDWLOrder = gTDWLOrdersDeleteWL[idxOrder];
            if (PostWLDeleteWL(sAccountId, oTDWLOrder.sWLId) == 0) {
                iNumSuccessDeleteWL++;
            } else {
                // an error occurred
                iNumErrorsDeleteWL++;
                gTDWLOrdersDeleteWL[idxOrder].sError = oTDWLOrder.sWLName + " -- " + gsLastError;
            }
        }
    }

    //now delete the symbols from the watchlists

    let sOrder = "";
    let sSep = "";
    let sLastWLId = "";
    let iNumInThisOrder = 0;
    let sErrors = "";
    for (let idxOrder = 0; idxOrder < gTDWLOrders.length; idxOrder++) {
        let oTDWLOrder = new TDWLOrder();
        oTDWLOrder = gTDWLOrders[idxOrder];
        if (oTDWLOrder.sWLId != sLastWLId) {
            sLastWLId = oTDWLOrder.sWLId;
            if (sOrder != "") {
                let oTDWLOrder = new TDWLOrder();
                sOrder = sOrder + oTDWLOrder.aWL12watchlistItemsEnd +
                    oTDWLOrder.aWL13end;
                if (PostTDWLOrder(sAccountId, sLastWLId, sOrder) == 0) {
                    //success
                    iNumSuccess = iNumSuccess + iNumInThisOrder;
                } else {
                    let sMsg = ""
                    sErrors = sErrors + gsLastError + "\n";
                }
                sOrder = "";
                sSep = "";
                iNumInThisOrder = 0;
            }
        }
        if (sOrder == "") {
            sOrder = oTDWLOrder.aWL00Start +
                oTDWLOrder.aWL01name +
                oTDWLOrder.aWL02watchlistId +
                oTDWLOrder.aWL03watchlistItemsStart;
        }
        iNumInThisOrder++;
        sOrder = sOrder + sSep +
            oTDWLOrder.aWL03watchlistItemStart +
            oTDWLOrder.aWL04sequenceId +
            oTDWLOrder.aWL05quantity +
            oTDWLOrder.aWL06averagePrice +
            oTDWLOrder.aWL07commission +
            oTDWLOrder.aWL07purchasedDate +
            oTDWLOrder.aWL08instrumentStart +
            oTDWLOrder.aWL09symbol +
            oTDWLOrder.aWL10assetType +
            oTDWLOrder.aWL11instrumentEnd +
            oTDWLOrder.aWL12watchlistItemEnd;
        sSep = ",";
    }
    if (sOrder != "") {
        let oTDWLOrder = new TDWLOrder();
        sOrder = sOrder + oTDWLOrder.aWL12watchlistItemsEnd +
            oTDWLOrder.aWL13end;
        if (PostTDWLOrder(sAccountId, sLastWLId, sOrder) == 0) {
            //success
            iNumSuccess = iNumSuccess + iNumInThisOrder;
        } else {
            sErrors = sErrors + gsLastError + "\n";
        }
    }

    if (sErrors == "") {
        //no errors
        if (iNumSuccessDeleteWL > 0) {
            sMsg = iNumSuccessDeleteWL.toString() + " Old GL ";
            if (iNumSuccessDeleteWL > 1) {
                sMsg = sMsg + "watchlists deleted\n";
            } else {
                sMsg = sMsg + "watchlist deleted\n";
            }
        }
        if (iNumSuccess > 0) {
            sMsg = sMsg + iNumSuccess.toString() + " Old GL ";
            if (iNumSuccess > 1) {
                sMsg = sMsg + "symbols deleted";
            } else {
                sMsg = sMsg + "symbol deleted";
            }
        }
    } else {
        if ((iNumSuccess > 0) || (iNumSuccessDeleteWL > 0)) {
            if (iNumSuccessDeleteWL > 0) {
                sMsg = iNumSuccessDeleteWL.toString() + " Old GL ";
                if (iNumSuccessDeleteWL > 1) {
                    sMsg = sMsg + "watchlists deleted\n";
                } else {
                    sMsg = sMsg + "watchlist deleted\n";
                }
            }
            if (iNumSuccess > 0) {
                sMsg = sMsg + iNumSuccess.toString() + " Old GL ";
                if (iNumSuccess > 1) {
                    sMsg = sMsg + "symbols deleted";
                } else {
                    sMsg = sMsg + "symbol deleted";
                }
            }
            sMsg = sMsg + " with the following errors\n" + sErrors;

        } else {
            //nothing worked
            sMsg = "No Old GL symbols deleted";
            sMsg = sMsg + " with the following errors\n" + sErrors;
        }
    }
    alert(sMsg);
    gbDoResetWatchlists = true;
    DoGetTDData();
    ShowProgress(false, true);
    gbDoingCreateOrders = false;
    SetDefault();
}

function PostWLHTTP(sCommand, oCMindex) {
    let iTryCount = 0;
    let iReturn = 0;
    let sServerURL = gsGetDataSite + "getData.php";

    if (gbInTestMode) {
        sServerURL = gsGetDataSite + "getDataTest.php";
    }

    iTryCount = 0;
    while (iTryCount < 2) {
        //-------------------------------------------------------------------------------------------------

        let xhttp = null;
        let iInnerTryCount = 0;
        let iCheckTDAPIReturn = 0;
        let bBadoCMIndex = false;
        let sAPIError = "";
        xhttp = oHTTP();
        while ((xhttp == null) && (iInnerTryCount < 5)) {
            xhttp = oHTTP();
            iInnerTryCount = iInnerTryCount + 1;
        }
        iInnerTryCount = 0;
        if (CheckHTTPOpen(xhttp, sServerURL, "PostWLHTTP Error during xhttp.open", false)) {
            // send the request
            try {
                //debugger
                xhttp.send(sCommand);
                if (xhttp.responseText != null) {
                    if (xhttp.responseText != "") {
                        switch (oCMindex) {
                            case 0: //returns nothing
                                {
                                    if (xhttp.responseText.indexOf("<response><data>Error: ") != -1) {
                                        iCheckTDAPIReturn = 2;
                                        sAPIError = xhttp.responseText.substr("<response><data>".length);
                                    }
                                    //oCMTemp = myJSON.parse(xhttp.responseText);
                                    //iCheckTDAPIReturn = checkTDAPIError(oCMTemp);
                                    //if (iCheckTDAPIReturn != 0) {
                                    //    if (!(isUndefined(oCMTemp.error))) {
                                    //        sAPIError = oCMTemp.error;
                                    //    }
                                    //}
                                    break;
                                }
                            case 1: //executed AddWLMain - returns WLId
                                {
                                    if (xhttp.responseText.indexOf("<response><data>Error: ") != -1) {
                                        iCheckTDAPIReturn = 2;
                                        sAPIError = xhttp.responseText.substr("<response><data>".length);
                                    } else {
                                        oCMTemp1 = myJSON.parse(xhttp.responseText);
                                    }
                                    break;
                                }
                            case 2: //returns oCMWL
                                {
                                    if (xhttp.responseText.indexOf("<response><data>Error: ") != -1) {
                                        iCheckTDAPIReturn = 2;
                                        sAPIError = xhttp.responseText.substr("<response><data>".length);
                                    } else {
                                        oCMWL = myJSON.parse(xhttp.responseText);
                                    }
                                    break;
                                }
                            case 3: //returns oCMOGL
                                {
                                    if (xhttp.responseText.indexOf("<response><data>Error: ") != -1) {
                                        iCheckTDAPIReturn = 2;
                                        sAPIError = xhttp.responseText.substr("<response><data>".length);
                                    } else {
                                        oCMOGL = myJSON.parse(xhttp.responseText);
                                    }
                                    break;
                                }
                            default:
                                {
                                    bBadoCMIndex = true;
                                    break;
                                }
                        }
                        if (!bBadoCMIndex) {
                            switch (iCheckTDAPIReturn) {
                                case 0: //no error
                                    {
                                        iReturn = 0;
                                        gsLastError = "";
                                        iTryCount = 2;
                                        break;
                                    }
                                case 2: //other error
                                    {
                                        iReturn = 2;
                                        gsLastError = sAPIError;
                                        iTryCount = 2;
                                        break;
                                    }
                                default:
                                    {
                                        iReturn = 3;
                                        gsLastError = "Unknown error.";
                                        iTryCount = 2;
                                        break;
                                    }
                            }
                        } else {
                            iReturn = 8;
                            gsLastError = "Bad oCM Index."
                            iTryCount = 2;
                        }
                    }
                    else {
                        iTryCount = 2;
                        iReturn = 4;
                        gsLastError = "HTTP response is blank.";
                    }
                }
                else {
                    iTryCount++;
                    if (iTryCount < 2) {
                        xhttp = null;
                    }
                    else {
                        iReturn = 5;
                        gsLastError = "HTTP response is null.";
                    }
                }
            }
            catch (e1) {
                //debugger
                iTryCount++;
                if (iTryCount < 2) {
                    xhttp = null;
                }
                else {
                    //alert("GetIndexValues Error retrieving data (" + iTryCount.toString() + ") - " + e1.message);
                    iReturn = 6;
                    gsLastError = e1.message;
                }
            }
        }
        else {
            iReturn = 7; //error during HTTP open request
            gsLastError = "Error during HTTP open request";
            iTryCount = 2;
            break;
        }
    }

    return iReturn;
}

function PostWLOpenSymbolOrders(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, idxOrderStart, sAccountId, sWatchlistId, iTryCountIn, idxWL) {
    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    let iTryCount = iTryCountIn;
    let bDoingPurchasedDateUpdate = false;
    let bDoingPurchasedDateClear = false;
    let bDoingCreateWL = false;
    let bDoingHide = false;
    let bDoingUnHide = false;
    let bDoingAddSymbols = false;
    let iNumHidden = 0;
    let iNumShown = 0;

    let sSymbolsToShow = "";
    let sSymbolsToShowSep = "";

    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = 100;
        //iProgressIncrement = 100 / gTDWLOrders.length;
        gsLastErrors.length = 0;
        giTDPostOrderRetryCnt = 0;
        ShowProgress(true, false);
    }
    if (giProgress < 100) {
        giProgress = giProgress + iProgressIncrement;
    }
    let sOrder = "";
    let sSep = "";
    for (let idxOrder = 0; idxOrder < gTDWLOrders.length; idxOrder++) {
        let oTDWLOrder = new TDWLOrder();
        oTDWLOrder = gTDWLOrders[idxOrder];
        if (sOrder == "") {
            if (oTDWLOrder.bDoingPurchasedDateClear) {
                bDoingPurchasedDateClear = true;
            } else if (oTDWLOrder.bDoingPurchasedDateUpdate) {
                bDoingPurchasedDateUpdate = true;
            } else if (oTDWLOrder.bDoingCreateWL) {
                bDoingCreateWL = true;
            } else {
                bDoingAddSymbols = true;
            }

            if (oTDWLOrder.bDoingHide) {
                bDoingHide = true;
            } else if (oTDWLOrder.bDoingUnHide) {
                bDoingUnHide = true;
            }

            sOrder = oTDWLOrder.aWL00Start +
                oTDWLOrder.aWL01name +
                oTDWLOrder.aWL02watchlistId +
                oTDWLOrder.aWL03watchlistItemsStart;
        }

        if (oTDWLOrder.bDoingPurchasedDateClear && bDoingUnHide) {
            iNumShown = iNumShown + 0.5;
            if ((", " + sSymbolsToShow + ", ").indexOf(", " + oTDWLOrder.symbol + ", ") == -1) {
                sSymbolsToShow = sSymbolsToShow + sSymbolsToShowSep + oTDWLOrder.symbol;
                sSymbolsToShowSep = ", ";
            }
        } else if (oTDWLOrder.bDoingPurchasedDateUpdate && bDoingUnHide) {
            iNumShown = iNumShown + 1;
            if ((", " + sSymbolsToShow + ", ").indexOf(", " + oTDWLOrder.symbol + ", ") == -1) {
                sSymbolsToShow = sSymbolsToShow + sSymbolsToShowSep + oTDWLOrder.symbol;
                sSymbolsToShowSep = ", ";
            }
        } else if (oTDWLOrder.bDoingPurchasedDateUpdate && bDoingHide) {
            iNumHidden = iNumHidden + 1;
        }
        sOrder = sOrder + sSep +
            oTDWLOrder.aWL03watchlistItemStart +
            oTDWLOrder.aWL04sequenceId +
            oTDWLOrder.aWL05quantity +
            oTDWLOrder.aWL06averagePrice +
            oTDWLOrder.aWL07commission +
            oTDWLOrder.aWL07purchasedDate +
            oTDWLOrder.aWL08instrumentStart +
            oTDWLOrder.aWL09symbol +
            oTDWLOrder.aWL10assetType +
            oTDWLOrder.aWL11instrumentEnd +
            oTDWLOrder.aWL12watchlistItemEnd;
        sSep = ",";
    }
    let oTDWLOrder = new TDWLOrder();
    sOrder = sOrder + oTDWLOrder.aWL12watchlistItemsEnd +
                      oTDWLOrder.aWL13end;

    if (bDoingCreateWL) {
        if (PostTDWLCreateWL(sAccountId, sOrder) == 0) {
            //success
            iNumSuccess = gTDWLOrders.length;
            let sMsg = iNumSuccess.toString() + " watchlist ";
            if (iNumSuccess > 1) {
                sMsg = sMsg + "symbols added";
            } else {
                sMsg = sMsg + "symbol added";
            }
            alert(sMsg);
            gbDoResetWatchlists = true;
            DoGetTDData();
            if (iNumErrors == 0) {
                if (idxWL != -1) {
                    ClearAllWLInputFields(idxWL);
                }
            }
            ShowProgress(false, true);
            gbDoingCreateOrders = false;
            SetDefault();
        } else {
            let sMsg = ""
            sMsg = sMsg + "Error adding new symbols -- ";
            sMsg = sMsg + gsLastError;
            alert(sMsg);
            gbDoResetWatchlists = true;
            DoGetTDData();
            ShowProgress(false, true);
            gbDoingCreateOrders = false;
            SetDefault();
        }
    } else {
        if (PostTDWLOrder(sAccountId, sWatchlistId, sOrder) == 0) {
            //success
            let sMsg = "";
            if (bDoingPurchasedDateClear) {
                iNumSuccess = gTDWLOrders.length / 2;
            } else if (bDoingPurchasedDateUpdate) {
                iNumSuccess = gTDWLOrders.length;
            } else {
                iNumSuccess = gTDWLOrders.length;
            }
            if (bDoingHide) {
                sMsg = iNumHidden.toString() + " watchlist ";
            } else if (bDoingUnHide) {
                sMsg = sSymbolsToShow + " (" + iNumShown.toString() + ") watchlist ";
                //sMsg = iNumShown.toString() + " watchlist ";
            } else {
                sMsg = iNumSuccess.toString() + " watchlist ";
            }
            if (bDoingPurchasedDateUpdate) {
                if (bDoingHide) {
                    if (iNumSuccess > 1) {
                        sMsg = sMsg + "symbols hidden";
                    } else {
                        sMsg = sMsg + "symbol hidden";
                    }
                } else if (bDoingUnHide) {
                    if (iNumSuccess > 1) {
                        sMsg = sMsg + "symbols shown";
                    } else {
                        sMsg = sMsg + "symbol shown";
                    }
                } else {
                    if (iNumSuccess > 1) {
                        sMsg = sMsg + "symbols Acquired Date updated";
                    } else {
                        sMsg = sMsg + "symbol Acquired Date updated";
                    }
                }
            } else if (bDoingPurchasedDateClear) {
                if (bDoingUnHide) {
                    if (iNumSuccess > 1) {
                        sMsg = sMsg + "symbols shown";
                    } else {
                        sMsg = sMsg + "symbol shown";
                    }
                } else {
                    if (iNumSuccess > 1) {
                        sMsg = sMsg + "symbols Acquired Date cleared";
                    } else {
                        sMsg = sMsg + "symbol Acquired Date cleared";
                    }
                }
            } else {
                if (iNumSuccess > 1) {
                    sMsg = sMsg + "symbols added";
                } else {
                    sMsg = sMsg + "symbol added";
                }
            }
            alert(sMsg);
            gbDoResetWatchlists = true;
            DoGetTDData();
            if (iNumErrors == 0) {
                if (idxWL != -1) {
                    if (bDoingHide) {
                        ClearAllWLSelected(idxWL);
                    } else if (bDoingUnHide) {
                        SelectAllUnhidden(idxWL, sSymbolsToShow);
                        ClearAllWLInputFields(idxWL);
                    } else {
                        ClearAllWLInputFields(idxWL);
                    }
                }
            }
            ShowProgress(false, true);
            gbDoingCreateOrders = false;
            SetDefault();
        } else {
            let sMsg = ""
            if (bDoingPurchasedDateUpdate) {
                if (bDoingHide) {
                    if (iNumSuccess > 1) {
                        sMsg = sMsg + "Error hiding symbols -- ";
                    } else {
                        sMsg = sMsg + "Error hiding symbol -- ";
                    }
                } else if (bDoingUnHide) {
                    sMsg = sMsg + "Error showing hidden symbols -- ";
                } else {
                    sMsg = sMsg + "Error showing hidden symbol -- ";
                }
            } else if (bDoingPurchasedDateClear) {
                sMsg = sMsg + "Error clearing Acquired Date -- ";
            } else {
                sMsg = sMsg + "Error adding new symbols -- ";
            }
            sMsg = sMsg + gsLastError;
            alert(sMsg);
            gbDoResetWatchlists = true;
            DoGetTDData();
            ShowProgress(false, true);
            gbDoingCreateOrders = false;
            SetDefault();
        }
    }

}

function PostWLPlaceOrders(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, idxOrderStart, sAccountId, iTryCountIn, idxWL) {
    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    let iTryCount = iTryCountIn;
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = 100 / gOrdersToPlace.length;
        gsLastErrors.length = 0;
        giTDPostOrderRetryCnt = 0;
        ShowProgress(true, false);
    }
    for (let idxOrder = idxOrderStart; idxOrder > -1; idxOrder--) {
        if (giProgress < 100) {
            giProgress = giProgress + iProgressIncrement;
        }
        let oTDOrder = new TDSavedOrder();
        oTDOrder = gOrdersToPlace[idxOrder];
        if (!oTDOrder.bProcessed) {
            let sOrder = "";
            switch (oTDOrder.orderType) { //"MARKET", "LIMIT", or "TRAILING_STOP"
                case "MARKET":
                    {
                        if (!oTDOrder.bProcessed) {
                            sOrder = oTDOrder.a00complexOrderStrategyTypeStart +
                                oTDOrder.a02orderType +
                                oTDOrder.a03Asession +
                                oTDOrder.a04duration +
                                oTDOrder.a05orderStrategyType +
                                oTDOrder.a06orderLegCollectionStart +
                                oTDOrder.a07instructionStart +
                                oTDOrder.a08quantity +
                                oTDOrder.a09instrumentStart +
                                oTDOrder.a10symbol +
                                oTDOrder.a11assetType +
                                oTDOrder.a12instrumentEnd + oTDOrder.a13instructionEnd + oTDOrder.a14orderLegCollectionEnd + oTDOrder.a15complexOrderStrategyTypeEnd;
                        }
                        break;
                    }
                case "LIMIT":
                    {
                        sOrder = oTDOrder.a00complexOrderStrategyTypeStart + oTDOrder.a01complexOrderStrategyType +
                            oTDOrder.a02orderType +
                            oTDOrder.a03AsessionSeamless +
                            oTDOrder.a04duration +
                            oTDOrder.a03FcancelTime +
                            oTDOrder.a02Aprice +
                            oTDOrder.a05orderStrategyType +
                            oTDOrder.a06orderLegCollectionStart +
                            oTDOrder.a07instructionStart +
                            oTDOrder.a08quantity +
                            oTDOrder.a09instrumentStart +
                            oTDOrder.a10symbol +
                            oTDOrder.a11assetType +
                            oTDOrder.a12instrumentEnd + oTDOrder.a13instructionEnd + oTDOrder.a14orderLegCollectionEnd + oTDOrder.a15complexOrderStrategyTypeEnd;
                        break;
                    }
                case "TRAILING_STOP":
                    {
                        sOrder = oTDOrder.a00complexOrderStrategyTypeStart + oTDOrder.a01complexOrderStrategyType +
                            oTDOrder.a02orderType + oTDOrder.a03FcancelTime +
                            oTDOrder.a03Asession + oTDOrder.a03BstopPriceLinkBasis + oTDOrder.a03CstopPriceLinkType + oTDOrder.a03DstopPriceOffset + oTDOrder.a03EstopType +
                            oTDOrder.a04duration +
                            oTDOrder.a05orderStrategyType +
                            oTDOrder.a06orderLegCollectionStart +
                            oTDOrder.a07instructionStart +
                            oTDOrder.a08quantity +
                            oTDOrder.a09instrumentStart +
                            oTDOrder.a10symbol +
                            oTDOrder.a11assetType +
                            oTDOrder.a12instrumentEnd + oTDOrder.a13instructionEnd + oTDOrder.a14orderLegCollectionEnd + oTDOrder.a15complexOrderStrategyTypeEnd;
                        break;
                    }
            }
            if (PostTDPlaceOrder(sAccountId, sOrder) == 0) {
                //success
                iNumSuccess++;
                gOrdersToPlace[idxOrder].bProcessed = true;
                if (gOrdersToPlace[idxOrder].sError != "") {
                    iNumErrors--;
                }
                gOrdersToPlace[idxOrder].sError = "";
            } else {
                if (gsLastError.indexOf("Individual App's transactions per seconds restriction reached.") != -1) {
                    if (iTryCount < 3) {
                        iTryCount++;
                        giProgress = giProgress - 1;
                        window.setTimeout("PostWLPlaceOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + idxOrder.toString() + ", '" + sAccountId + "'," + iTryCount.toString() + ", " + idxWL.toString() + ")", 3000);
                        return;
                    } else {
                        // an error occurred
                        iNumErrors++;
                        gOrdersToPlace[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                    }
                } else {
                    // an error occurred
                    iNumErrors++;
                    gOrdersToPlace[idxOrder].bProcessed = true;
                    gOrdersToPlace[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                }
            }
        }
        window.setTimeout("PostWLPlaceOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (idxOrder - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 500);
        return;
    }
    let sMsg = iNumSuccess.toString() + " ";
    if (iNumSuccess > 1) {
        sMsg = sMsg + "orders placed";
    } else {
        sMsg = sMsg + "order placed";
    }
    if ((iNumErrors > 0) && (giTDPostOrderRetryCnt < 3)) {
        giTDPostOrderRetryCnt++;
        giProgress = 0;
        window.setTimeout("PostWLPlaceOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 4000);
        return;
    } else {
        if (iNumErrors > 0) {
            sMsg = sMsg + " with the following errors: ";
            for (let idxOrder = 0; idxOrder < gOrdersToPlace.length; idxOrder++) {
                if (gOrdersToPlace[idxOrder].sError != "") {
                    sMsg = sMsg + gsCRLF + gOrdersToPlace[idxOrder].sError;
                }
            }
            sMsg = sMsg + gsCRLF + "Log in your TD account. Click Trade/Orders to view the status of these orders.";
            if ((document.getElementById("chkSave" + sThisId) != null) && (!isUndefined(document.getElementById("chkSave" + sThisId)))) {
                if (document.getElementById("chkSave" + sThisId)) {
                    alert(sMsg + "\n\n" + gsSaveOrdersSummaryMsg);
                } else {
                    alert(sMsg);
                }
            } else {
                alert(sMsg);
            }
        } else {
            sMsg = sMsg + ". Log in your TD account. Click Trade/Orders to view the status of these orders.";
            if ((document.getElementById("chkSave" + sThisId) != null) && (!isUndefined(document.getElementById("chkSave" + sThisId)))) {
                if (document.getElementById("chkSave" + sThisId)) {
                    alert(sMsg + "\n\n" + gsSaveOrdersSummaryMsg);
                } else {
                    alert(sMsg);
                }
            } else {
                alert(sMsg);
            }
        }
    }

    ShowProgress(false, true);
    gbDoingCreateOrders = false;
    SetDefault();
    SetDefaultWL(idxWL);
}

function PostWLSellOrders(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, idxOrderStart, sAccountId, iTryCountIn, idxWL) {
    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    let iTryCount = iTryCountIn;
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    gsSaveOrdersSummaryMsg = "";
    if (document.getElementById("chkSave" + sThisId).checked) {
        if (bFirstTime) {
            giProgress = 0;
            iProgressIncrement = 100 / gTDOrders.length;
            gsLastErrors.length = 0;
            giTDPostOrderRetryCnt = 0;
            ShowProgress(true, false);
        }
        for (let idxOrder = idxOrderStart; idxOrder > -1; idxOrder--) {
            if (giProgress < 100) {
                giProgress = giProgress + iProgressIncrement;
            }
            let oTDOrder = new TDOrder();
            oTDOrder = gTDOrders[idxOrder];
            if (!oTDOrder.bProcessed) {
                let sOrder = "";
                sOrder = oTDOrder.a00complexOrderStrategyTypeStart + oTDOrder.a01complexOrderStrategyType +
                    oTDOrder.a02orderType +
                    oTDOrder.a03Asession +
                    oTDOrder.a04duration +
                    oTDOrder.a05orderStrategyType +
                    oTDOrder.a06orderLegCollectionStart +
                    oTDOrder.a07instructionStart +
                    oTDOrder.a08quantity +
                    oTDOrder.a09instrumentStart +
                    oTDOrder.a10symbol +
                    oTDOrder.a11assetType +
                    oTDOrder.a12instrumentEnd + oTDOrder.a13instructionEnd + oTDOrder.a14orderLegCollectionEnd + oTDOrder.a15complexOrderStrategyTypeEnd;
                if (PostTDOrder(sAccountId, sOrder) == 0) {
                    //success
                    iNumSuccess++;
                    gTDOrders[idxOrder].bProcessed = true;
                    if (gTDOrders[idxOrder].sError != "") {
                        iNumErrors--;
                    }
                    gTDOrders[idxOrder].sError = "";
                } else {
                    if (gsLastError.indexOf("Individual App's transactions per seconds restriction reached.") != -1) {
                        if (iTryCount < 3) {
                            iTryCount++;
                            giProgress = giProgress - 1;
                            window.setTimeout("PostWLSellOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + idxOrder.toString() + ", '" + sAccountId + "'," + iTryCount.toString() + ", " + idxWL.toString() + ")", 3000);
                            return;
                        } else {
                            // an error occurred
                            iNumErrors++;
                            gTDOrders[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                        }
                    } else {
                        // an error occurred
                        iNumErrors++;
                        gTDOrders[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                    }
                }
            }
            window.setTimeout("PostWLSellOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (idxOrder - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 200);
            return;
        }
        let sMsg = iNumSuccess.toString() + " SELL ";
        if (iNumSuccess > 1) {
            sMsg = sMsg + "orders created";
        } else {
            sMsg = sMsg + "order created";
        }
        if ((iNumErrors > 0) && (giTDPostOrderRetryCnt < 3)) {
            giTDPostOrderRetryCnt++;
            giProgress = 0;
            window.setTimeout("PostWLSellOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 4000);
            return;
        } else {
            if (iNumErrors > 0) {
                sMsg = sMsg + " with the following errors: ";
                for (let idxOrder = 0; idxOrder < gTDOrders.length; idxOrder++) {
                    if (!gTDOrders[idxOrder].bProcessed) {
                        sMsg = sMsg + gsCRLF + gTDOrders[idxOrder].sError;
                    }
                }
                sMsg = sMsg + gsCRLF + "Use the Account Saved Orders watchlist to place these orders.";
                if (document.getElementById("chkPlace" + sThisId).checked) {
                    gsSaveOrdersSummaryMsg = sMsg;
                } else {
                    alert(sMsg);
                }
            } else {
                sMsg = sMsg + ". Use the Account Saved Orders watchlist to place these orders.";
                if (document.getElementById("chkPlace" + sThisId).checked) {
                    gsSaveOrdersSummaryMsg = sMsg;
                } else {
                    alert(sMsg);
                }
            }
        }

        if (document.getElementById("chkPlace" + sThisId).checked) {
            window.setTimeout("PostWLPlaceOrders(true, 0, 0, 0, " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
        } else {
            if (iNumErrors == 0) {
                ClearAllWLInputFields(idxWL);
            }
            ShowProgress(false, true);
            gbDoingCreateOrders = false;
            SetDefault();
            SetDefaultWL(idxWL);
        }
    } else { //only doing place orders
        window.setTimeout("PostWLPlaceOrders(true, 0, 0, 0, " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
    }

}

function PostWLSellOrdersLimit(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, idxOrderStart, sAccountId, iTryCountIn, idxWL) {
    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    let iTryCount = iTryCountIn;
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    gsSaveOrdersSummaryMsg = "";
    if (document.getElementById("chkSave" + sThisId).checked) {
        if (bFirstTime) {
            giProgress = 0;
            iProgressIncrement = 100 / gTDOrders.length;
            gsLastErrors.length = 0;
            giTDPostOrderRetryCnt = 0;
            ShowProgress(true, false);
        }
        for (let idxOrder = idxOrderStart; idxOrder > -1; idxOrder--) {
            if (giProgress < 100) {
                giProgress = giProgress + iProgressIncrement;
            }
            let oTDOrder = new TDOrder();
            oTDOrder = gTDOrders[idxOrder];
            if (!oTDOrder.bProcessed) {
                let sOrder = "";
                sOrder = oTDOrder.a00complexOrderStrategyTypeStart + oTDOrder.a01complexOrderStrategyType +
                    oTDOrder.a02orderType +
                    oTDOrder.a03AsessionSeamless +
                    oTDOrder.a04duration +
                    oTDOrder.a03FcancelTime +
                    oTDOrder.a02Aprice +
                    oTDOrder.a05orderStrategyType +
                    oTDOrder.a06orderLegCollectionStart +
                    oTDOrder.a07instructionStart +
                    oTDOrder.a08quantity +
                    oTDOrder.a09instrumentStart +
                    oTDOrder.a10symbol +
                    oTDOrder.a11assetType +
                    oTDOrder.a12instrumentEnd + oTDOrder.a13instructionEnd + oTDOrder.a14orderLegCollectionEnd + oTDOrder.a15complexOrderStrategyTypeEnd;
                if (PostTDOrder(sAccountId, sOrder) == 0) {
                    //success
                    iNumSuccess++;
                    gTDOrders[idxOrder].bProcessed = true;
                    if (gTDOrders[idxOrder].sError != "") {
                        iNumErrors--;
                    }
                    gTDOrders[idxOrder].sError = "";
                } else {
                    if (gsLastError.indexOf("Individual App's transactions per seconds restriction reached.") != -1) {
                        if (iTryCount < 3) {
                            iTryCount++;
                            giProgress = giProgress - 1;
                            window.setTimeout("PostWLSellOrdersLimit(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + idxOrder.toString() + ", '" + sAccountId + "'," + iTryCount.toString() + ", " + idxWL.toString() + ")", 3000);
                            return;
                        } else {
                            // an error occurred
                            iNumErrors++;
                            gTDOrders[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                        }
                    } else {
                        // an error occurred
                        iNumErrors++;
                        gTDOrders[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                    }
                }
            }
            window.setTimeout("PostWLSellOrdersLimit(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (idxOrder - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 200);
            return;
        }
        let sMsg = iNumSuccess.toString() + " SELL LIMIT ";
        if (iNumSuccess > 1) {
            sMsg = sMsg + "orders created";
        } else {
            sMsg = sMsg + "order created";
        }
        if ((iNumErrors > 0) && (giTDPostOrderRetryCnt < 3)) {
            giTDPostOrderRetryCnt++;
            giProgress = 0;
            window.setTimeout("PostWLSellOrdersLimit(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 4000);
            return;
        } else {
            if (iNumErrors > 0) {
                sMsg = sMsg + " with the following errors: ";
                for (let idxOrder = 0; idxOrder < gTDOrders.length; idxOrder++) {
                    if (!gTDOrders[idxOrder].bProcessed) {
                        sMsg = sMsg + gsCRLF + gTDOrders[idxOrder].sError;
                    }
                }
                sMsg = sMsg + gsCRLF + "Use the Account Saved Orders watchlist to place these orders.";
                if (document.getElementById("chkPlace" + sThisId).checked) {
                    gsSaveOrdersSummaryMsg = sMsg;
                } else {
                    alert(sMsg);
                }
            } else {
                sMsg = sMsg + ". Use the Account Saved Orders watchlist to place these orders.";
                if (document.getElementById("chkPlace" + sThisId).checked) {
                    gsSaveOrdersSummaryMsg = sMsg;
                } else {
                    alert(sMsg);
                }
            }
        }

        if (document.getElementById("chkPlace" + sThisId).checked) {
            window.setTimeout("PostWLPlaceOrders(true, 0, 0, 0, " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
        } else {
            if (iNumErrors == 0) {
                ClearAllWLInputFields(idxWL);
            }
            ShowProgress(false, true);
            gbDoingCreateOrders = false;
            SetDefault();
            SetDefaultWL(idxWL);
        }
    } else { //only doing place orders
        window.setTimeout("PostWLPlaceOrders(true, 0, 0, 0, " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
    }

}

function PostWLTrailingStopOrders(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, idxOrderStart, sAccountId, iTryCountIn, idxWL) {
    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    let iTryCount = iTryCountIn;

    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    gsSaveOrdersSummaryMsg = "";
    if (document.getElementById("chkSave" + sThisId).checked) {
        if (bFirstTime) {
            giProgress = 0;
            iProgressIncrement = 100 / gTDOrders.length;
            gsLastErrors.length = 0;
            giTDPostOrderRetryCnt = 0;
            ShowProgress(true, false);
        }
        for (let idxOrder = idxOrderStart; idxOrder > -1; idxOrder--) {
            if (giProgress < 100) {
                giProgress = giProgress + iProgressIncrement;
            }
            let oTDOrder = new TDOrder();
            oTDOrder = gTDOrders[idxOrder];
            if (!oTDOrder.bProcessed) {
                let sOrder = "";
                sOrder = oTDOrder.a00complexOrderStrategyTypeStart + oTDOrder.a01complexOrderStrategyType +
                    oTDOrder.a02orderType + oTDOrder.a03FcancelTime +
                    oTDOrder.a03Asession + oTDOrder.a03BstopPriceLinkBasis + oTDOrder.a03CstopPriceLinkType + oTDOrder.a03DstopPriceOffset + oTDOrder.a03EstopType +
                    oTDOrder.a04duration +
                    oTDOrder.a05orderStrategyType +
                    oTDOrder.a06orderLegCollectionStart +
                    oTDOrder.a07instructionStart +
                    oTDOrder.a08quantity +
                    oTDOrder.a09instrumentStart +
                    oTDOrder.a10symbol +
                    oTDOrder.a11assetType +
                    oTDOrder.a12instrumentEnd + oTDOrder.a13instructionEnd + oTDOrder.a14orderLegCollectionEnd + oTDOrder.a15complexOrderStrategyTypeEnd;
                if (PostTDOrder(sAccountId, sOrder) == 0) {
                    //success
                    iNumSuccess++;
                    gTDOrders[idxOrder].bProcessed = true;
                    if (gTDOrders[idxOrder].sError != "") {
                        iNumErrors--;
                    }
                    gTDOrders[idxOrder].sError = "";
                } else {
                    if (gsLastError.indexOf("Individual App's transactions per seconds restriction reached.") != -1) {
                        if (iTryCount < 3) {
                            iTryCount++;
                            giProgress = giProgress - 1;
                            window.setTimeout("PostWLTrailingStopOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + idxOrder.toString() + ", '" + sAccountId + "'," + iTryCount.toString() + ", " + idxWL.toString() + ")", 3000);
                            return;
                        } else {
                            // an error occurred
                            iNumErrors++;
                            gTDOrders[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                        }
                    } else {
                        // an error occurred
                        iNumErrors++;
                        gTDOrders[idxOrder].sError = oTDOrder.symbol + "(" + iTryCount.toString() + ") -- " + gsLastError;
                    }
                }
            }
            window.setTimeout("PostWLTrailingStopOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (idxOrder - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 200);
            return;
        }
        let sMsg = iNumSuccess.toString() + " TRAILING STOP ";
        if (iNumSuccess > 1) {
            sMsg = sMsg + "orders created";
        } else {
            sMsg = sMsg + "order created";
        }
        if ((iNumErrors > 0) && (giTDPostOrderRetryCnt < 3)) {
            giTDPostOrderRetryCnt++;
            giProgress = 0;
            window.setTimeout("PostWLTrailingStopOrders(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + (gTDOrders.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 4000);
            return;
        } else {
            if (iNumErrors > 0) {
                sMsg = sMsg + " with the following errors: ";
                for (let idxOrder = 0; idxOrder < gTDOrders.length; idxOrder++) {
                    if (!gTDOrders[idxOrder].bProcessed) {
                        sMsg = sMsg + gsCRLF + gTDOrders[idxOrder].sError;
                    }
                }
                sMsg = sMsg + gsCRLF + "Use the Account Saved Orders watchlist to place these orders.";
                if (document.getElementById("chkPlace" + sThisId).checked) {
                    gsSaveOrdersSummaryMsg = sMsg;
                } else {
                    alert(sMsg);
                }
            } else {
                sMsg = sMsg + ". Use the Account Saved Orders watchlist to place these orders.";
                if (document.getElementById("chkPlace" + sThisId).checked) {
                    gsSaveOrdersSummaryMsg = sMsg;
                } else {
                    alert(sMsg);
                }
            }
        }

        if (document.getElementById("chkPlace" + sThisId).checked) {
            window.setTimeout("PostWLPlaceOrders(true, 0, 0, 0, " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
        } else {
            if (iNumErrors == 0) {
                ClearAllWLInputFields(idxWL);
            }
            ShowProgress(false, true);
            gbDoingCreateOrders = false;
            SetDefault();
            SetDefaultWL(idxWL);
        }
    } else { //only doing place orders
        window.setTimeout("PostWLPlaceOrders(true, 0, 0, 0, " + (gOrdersToPlace.length - 1).toString() + ", '" + sAccountId + "', 0, " + idxWL.toString() + ")", 10);
    }
}

function printdiv(printdivname) {
    window.setTimeout("printdiv_do('" + printdivname + "')", 300);
}

function printdiv_do(printdivname) {
    let headstr = "<html><head><title>Watchlist Details</title></head><body>";
    let footstr1 = "</"; let footstr2 = "body>"; let footstr = footstr1 + footstr2;
    let newstr = document.getElementById(printdivname).innerHTML;
    let oldstr = document.body.innerHTML;
    document.body.innerHTML = headstr + newstr + footstr;
    window.print();
    if (gbUsingCell) {
        gsOldBody = oldstr;
        window.setTimeout("printdiv_do_finish()", 2000);
    } else {
        document.body.innerHTML = oldstr;
        window.setTimeout("wlResetDragAllWatchlists()", 1000);
    }
}

function printdiv_do_finish() {
    document.body.innerHTML = gsOldBody;
    window.setTimeout("wlResetDragAllWatchlists()", 1000);
}

function PutPopupOnTop(sThisId) {
    giZIndex++;
    document.getElementById(sThisId).style.zindex = giZIndex.toString();
}

function RemoveAllSymbolDetailDivs() {
    let oDivs = new Array();
    let oBody = document.body;
    if (oBody.childNodes.length > 0) {
        for (let idx = 0; idx < oBody.childNodes.length; idx++) {
            let oDiv = oBody.childNodes[idx];
            if (!isUndefined(oDiv.id)) {
                if (oDiv.id.substr(0, gsSymbolDetailSpanPrefix.length) == gsSymbolDetailSpanPrefix) {
                    oDivs[oDivs.length] = oDiv.id;
                }
            }
        }
        if (oDivs.length > 0) {
            for (let idx = 0; idx < oDivs.length; idx++) {
                RemoveDiv(oDivs[idx]);
            }
        }
    }
}

function RemoveDiv(sDivId) {
    try {
        let item = document.getElementById(sDivId);
        item.parentNode.removeChild(item);
    } catch (e) {

    }
}

function ReportTimeOut() {
    bTimedOut = true;
    window.clearInterval(iTimerID);
    xhttpAsync.abort();
    SetDefault();
    alert("Timeout");
    bDoingLookup = false;
}

function ResetIsDownAllSymbolDetailDivs() {
    let oBody = document.body;
    if (oBody.childNodes.length > 0) {
        for (let idx = 0; idx < oBody.childNodes.length; idx++) {
            let oDiv = oBody.childNodes[idx];
            if (!isUndefined(oDiv.id)) {
                if (oDiv.id.substr(0, gsSymbolDetailSpanPrefix.length) == gsSymbolDetailSpanPrefix) {
                    let x = document.getElementById(oDiv.id);
                    x.isDown = false;
                }
            }
        }
    }

    if (gWatchlists.length > 0) {
        for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
            if (gWatchlists[idxWL].spanName != "") {
                if ((gWatchlists[idxWL].bSelected) || (gWatchlists[idxWL].bSelectedO) || (gWatchlists[idxWL].bSelectedSO) || (gWatchlists[idxWL].bSelectedWLSummary) || (gWatchlists[idxWL].bSelectedOGL)) {
                    if (!isUndefined(document.getElementById(gWatchlists[idxWL].spanName))) {
                        let x = document.getElementById(gWatchlists[idxWL].spanName);
                        x.isDown = false;
                    }
                }
            }
        }
    }
}

function ResetWatchlist() {
    if (!gbDoingCreateOrders) {
        SetWait();
        window.setTimeout("DoResetWatchlists()", 50);
    }
}

function SaveWL(bFirstTime, iNumSuccessIn, iNumErrorsIn, iProgressIncrementIn, iTryCountIn, idxWL, iPublicAccess, idxWLItemStart, sNewNameIn, sSaveDateIn) {

    let iNumSuccess = iNumSuccessIn;
    let iNumErrors = iNumErrorsIn;
    let iProgressIncrement = iProgressIncrementIn;
    let iTryCount = iTryCountIn;

    let sSymbolsToInsert = "";
    let sSymbolsSep = "";
    let sSymbolDescriptionsToInsert = "";
    let sSymbolAcquiredDatesInsert = "";
    let iSymbolsMax = 600;
    let iSymbolDescriptionsMax = 2000;
    let iSymbolAcquiredDatesMax = 1000;

    //let iSymbolsMax = 100;
    //let iSymbolDescriptionsMax = 400;
    //let iSymbolAcquiredDatesMax = 200;

    let idxNextStart = 0;
    let sNewName = Replace_XMLChar(sNewNameIn);
    let sAccountName = Replace_XMLChar(gWatchlists[idxWL].accountName);
    let sAccountId = Replace_XMLChar(gWatchlists[idxWL].accountId);
    let sSaveDate = sSaveDateIn;

    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = 100 / 10;
        gsLastErrors.length = 0;
        giTDPostOrderRetryCnt = 0;
        ShowProgress(true, false);
    }

    for (let idxWLItem = idxWLItemStart; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        let sSymbol = Replace_XMLChar(gWatchlists[idxWL].WLItems[idxWLItem].symbol);
        let sSymbolDesc = "";
        let sPurchasedDate = Replace_XMLChar(gWatchlists[idxWL].WLItems[idxWLItem].purchasedDate);
        if (!((gSymbolsGL[gWatchlists[idxWL].accountId + sSymbol] == null) || (isUndefined(gSymbolsGL[gWatchlists[idxWL].accountId + sSymbol])))) {
            if (gSymbolsGL[gWatchlists[idxWL].accountId + sSymbol].symbolDescription != "") {
                sSymbolDesc = Replace_XMLChar(gSymbolsGL[gWatchlists[idxWL].accountId + sSymbol].symbolDescription);
            }
        }
        if (((sSymbolsToInsert.length + sSymbol.length + sSymbolsSep.length) < iSymbolsMax) &&
            ((sSymbolDescriptionsToInsert.length + sSymbolDesc.length + sSymbolsSep.length) < iSymbolDescriptionsMax) &&
            ((sSymbolAcquiredDatesInsert.length + sPurchasedDate.length + sSymbolsSep.length) < iSymbolAcquiredDatesMax)) {
            iNumSuccess++;
            sSymbolsToInsert = sSymbolsToInsert + sSymbolsSep + sSymbol;
            sSymbolDescriptionsToInsert = sSymbolDescriptionsToInsert + sSymbolsSep + sSymbolDesc;
            sSymbolAcquiredDatesInsert = sSymbolAcquiredDatesInsert + sSymbolsSep + sPurchasedDate;
        } else {
            idxNextStart = idxWLItem;
            break;
        }
        sSymbolsSep = ",";
    }
    //now have all of the data to insert so go ahead and insert it

    if (giProgress < 100) {
        giProgress = giProgress + iProgressIncrement;
    }

    let s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "AddTDData";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>False</returnsvalues>";

    s = s + "<param>";
    s = s + "<name>WLName</name>";
    s = s + "<type>" + adWChar.toString() + "</type>";
    s = s + "<direction>" + adParamInput.toString() + "</direction>";
    s = s + "<size>" + sNewName.length + "</size>";
    s = s + "<value>" + sNewName + "</value>";
    s = s + "</param>";

    s = s + "<param>";
    s = s + "<name>WLAccountName</name>";
    s = s + "<type>" + adWChar.toString() + "</type>";
    s = s + "<direction>" + adParamInput.toString() + "</direction>";
    s = s + "<size>" + sAccountName.length + "</size>";
    s = s + "<value>" + sAccountName + "</value>";
    s = s + "</param>";

    s = s + "<param>";
    s = s + "<name>WLAccountID</name>";
    s = s + "<type>" + adWChar.toString() + "</type>";
    s = s + "<direction>" + adParamInput.toString() + "</direction>";
    s = s + "<size>" + sAccountId.length + "</size>";
    s = s + "<value>" + sAccountId + "</value>";
    s = s + "</param>";

    s = s + "<param>";
    s = s + "<name>SaveDate</name>";
    s = s + "<type>" + adWChar.toString() + "</type>";
    s = s + "<direction>" + adParamInput.toString() + "</direction>";
    s = s + "<size>" + sSaveDate.length + "</size>";
    s = s + "<value>" + sSaveDate + "</value>";
    s = s + "</param>";

    s = s + "<param>";
    s = s + "<name>Symbol</name>";
    s = s + "<type>" + adWChar.toString() + "</type>";
    s = s + "<direction>" + adParamInput.toString() + "</direction>";
    s = s + "<size>" + sSymbolsToInsert.length + "</size>";
    s = s + "<value>" + sSymbolsToInsert + "</value>";
    s = s + "</param>";

    s = s + "<param>";
    s = s + "<name>SymbolDescription</name>";
    s = s + "<type>" + adWChar.toString() + "</type>";
    s = s + "<direction>" + adParamInput.toString() + "</direction>";
    s = s + "<size>" + sSymbolDescriptionsToInsert.length + "</size>";
    s = s + "<value>" + sSymbolDescriptionsToInsert + "</value>";
    s = s + "</param>";

    s = s + "<param>";
    s = s + "<name>SymbolAcquiredDate</name>";
    s = s + "<type>" + adWChar.toString() + "</type>";
    s = s + "<direction>" + adParamInput.toString() + "</direction>";
    s = s + "<size>" + sSymbolAcquiredDatesInsert.length + "</size>";
    s = s + "<value>" + sSymbolAcquiredDatesInsert + "</value>";
    s = s + "</param>";

    s = s + "<param>";
    s = s + "<name>Viewable</name>";
    s = s + "<type>" + adWChar.toString() + "</type>";
    s = s + "<direction>" + adParamInput.toString() + "</direction>";
    s = s + "<size>" + iPublicAccess.toString().length + "</size>";
    s = s + "<value>" + iPublicAccess.toString() + "</value>";
    s = s + "</param>";

    s = s + "</command>";


    //let s = "<?xml version=\"1.0\"?>" + "\r\n";
    //s = s + "<command><commandtext>";
    //s = s + "GetTDData '" + sNewName + "','" + sAccountName + "'";
    //s = s + "</commandtext>";
    //s = s + "<returnsvalues>True</returnsvalues>";

    //s = s + "<param>";
    //s = s + "<name>WLName</name>";
    //s = s + "<type>" + adWChar.toString() + "</type>";
    //s = s + "<direction>" + adParamInput.toString() + "</direction>";
    //s = s + "<size>" + sNewName.length + "</size>";
    //s = s + "<value>" + sNewName + "</value>";
    //s = s + "</param>";

    //s = s + "<param>";
    //s = s + "<name>WLAccountName</name>";
    //s = s + "<type>" + adWChar.toString() + "</type>";
    //s = s + "<direction>" + adParamInput.toString() + "</direction>";
    //s = s + "<size>" + sAccountName.length + "</size>";
    //s = s + "<value>" + sAccountName + "</value>";
    //s = s + "</param>";

    //s = s + "</command>";



    let xhttp = null;
    let iInnerTryCount = 0;

    let sServerURL = gsGetDataSite + "getData.php";

    if (gbInTestMode) {
        sServerURL = gsGetDataSite + "getDataTest.php";
    }

    xhttp = oHTTP();
    while ((xhttp == null) && (iInnerTryCount < 5)) {
        xhttp = oHTTP();
        iInnerTryCount = iInnerTryCount + 1;
    }
    iInnerTryCount = 0;

    if (CheckHTTPOpen(xhttp, sServerURL, "SaveWL Error during xhttp.open", false)) {
        xhttp.send(s);
        // display errors
        //msgbox xhttpAsync.responseText
        if (xhttp.responseText.indexOf("<response><data>Error: ") != -1) {
            ShowProgress(false, true);
            gbDoingCreateOrders = false;
            SetDefault();
            SetDefaultWL(idxWL);
            alert(xhttp.responseText.substr("<response><data>".length));
            return
        }
    }

    if (idxNextStart != 0) {
        window.setTimeout("SaveWL(false, " + iNumSuccess.toString() + ", " + iNumErrors.toString() + ", " + iProgressIncrement.toString() + ", " + iTryCount.toString() + ", " + idxWL.toString() + ", " + iPublicAccess.toString() + ", " + idxNextStart.toString() + ",'" + sNewName + "', '" + sSaveDate + "')", 100);
    } else {
        let sMsg = iNumSuccess.toString() + " ";
        if (iNumSuccess > 1) {
            sMsg = sMsg + "symbols saved";
        } else {
            sMsg = sMsg + "symbol saved";
        }
        alert(sMsg);
        ShowProgress(false, true);
        gbDoingCreateOrders = false;
        SetDefault();
        SetDefaultWL(idxWL);
    }
}

function SelectAllUnhidden(idxWL, sSymbolsToShow) {
    let iNumSelected = 0;
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    let bAllChecked = true;
    for (let idx = 0; idx < gWatchlists[idxWL].WLItems.length; idx++) {
        let sThisTRId = "TR" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + FormatIntegerNumber(idx, 3, "0");
        let sThischkItemId = "chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + FormatIntegerNumber(idx, 3, "0");
        if ((", " + sSymbolsToShow + ", ").indexOf(", " + gWatchlists[idxWL].WLItems[idx].symbol + ", ") != -1) {
            gWatchlists[idxWL].WLItems[idx].bSelectedForOrder = true;
            iNumSelected++;

            if ((!isUndefined(document.getElementById(sThisTRId))) && (document.getElementById(sThisTRId) != null)) {
                document.getElementById(sThisTRId).style.backgroundColor = gsWLTableSelectedRowBackgroundColor;
            }
            if ((!isUndefined(document.getElementById(sThischkItemId))) && (document.getElementById(sThischkItemId) != null)) {
                document.getElementById(sThischkItemId).checked = true;
            }


        } else {
            gWatchlists[idxWL].WLItems[idx].bSelectedForOrder = false;
            bAllChecked = false;

            if ((!isUndefined(document.getElementById(sThisTRId))) && (document.getElementById(sThisTRId) != null)) {
                if ((idx % 2) == 0) {
                    document.getElementById(sThisTRId).style.backgroundColor = gsWLTableEvenRowBackgroundColor;
                } else {
                    document.getElementById(sThisTRId).style.backgroundColor = gsWLTableOddRowBackgroundColor;
                }
            }
            if ((!isUndefined(document.getElementById(sThischkItemId))) && (document.getElementById(sThischkItemId) != null)) {
                document.getElementById(sThischkItemId).checked = false;
            }
        }
    }

    if ((bAllChecked) && (iNumSelected != 0)) {
        if ((!isUndefined(document.getElementById("chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + "000"))) && (document.getElementById("chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + "000") != null)) {
            document.getElementById("chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + "000").checked = true;
        }
    }
    if (iNumSelected == 0) {
        if ((!isUndefined(document.getElementById("spanWLNumChecked" + sThisId))) && (document.getElementById("spanWLNumChecked" + sThisId) != null)) {
            document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "&nbsp;";
        }
    } else {
        if ((!isUndefined(document.getElementById("spanWLNumChecked" + sThisId))) && (document.getElementById("spanWLNumChecked" + sThisId) != null)) {
            document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "(" + FormatIntegerNumber(iNumSelected, 3, "") + ")&nbsp;&nbsp;";
        }
    }

}

function SelectWatchlist() {
    if (!gbDoingCreateOrders) {
        if (gbUsingCell) {
            //get list of watchlists
            if (gWatchlists.length == 0) {
                GetWatchlistsNew(false);
                if (gWatchlists.length > 0) {
                    SetupWatchlists(false);
                    document.getElementById("pwdForm").style.display = "none";
                    document.getElementById("MainForm").style.display = "none";
                    document.getElementById("wlFormColumn").style.display = "none";
                    wlHideAllWatchlists();
                    document.getElementById("wlForm").style.display = "block";
                }
            } else {
                SetupWatchlists(false);
                document.getElementById("pwdForm").style.display = "none";
                document.getElementById("MainForm").style.display = "none";
                document.getElementById("wlFormColumn").style.display = "none";
                wlHideAllWatchlists();
                document.getElementById("wlForm").style.display = "block";
            }
        } else {
            if (gbShowingSelectWatchlists) {
                wlDoCancelPopup();
            } else {

                let dLeft = document.pwdForm.btnWLSelect.getBoundingClientRect().left;
                let dTop = document.pwdForm.btnWLSelect.getBoundingClientRect().top;

                dLeft = dLeft.toFixed(0);
                dTop = dTop.toFixed(0);

                //alert ("sRight = " + sRight.toString());
                document.getElementById("spanWLSelectWatchlists").style.top = dTop.toString() + "px";
                document.getElementById("spanWLSelectWatchlists").style.left = dLeft.toString() + "px";

                //get list of watchlists
                if (gWatchlists.length == 0) {
                    GetWatchlistsNew(false);
                    if (gWatchlists.length > 0) {
                        SetupWatchlists(false);
                        document.pwdForm.btnWLSelect.style.visibility = "hidden";
                        document.getElementById("spanWLSelectWatchlists").style.visibility = "visible";
                        giZIndex++;
                        document.getElementById("spanWLSelectWatchlists").style.zIndex = giZIndex.toString();
                        gbDoingSymbolsSelect = false;
                        window.setTimeout("wlDoSetShowingSelectWatchlists()", 10);
                    }
                } else {
                    SetupWatchlists(false);
                    document.pwdForm.btnWLSelect.style.visibility = "hidden";
                    document.getElementById("spanWLSelectWatchlists").style.visibility = "visible";
                    giZIndex++;
                    document.getElementById("spanWLSelectWatchlists").style.zIndex = giZIndex.toString();
                    gbDoingSymbolsSelect = false;
                    window.setTimeout("wlDoSetShowingSelectWatchlists()", 10);
                }
            }
        }
    }
}

function SelectWatchlistColumns(idxWL) {
    SetupWLColumnSelection(idxWL);
    document.getElementById("pwdForm").style.display = "none";
    document.getElementById("MainForm").style.display = "none";
    document.getElementById("wlForm").style.display = "none";
    wlHideAllWatchlists();
    document.getElementById("wlFormColumn").style.display = "block";
//    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
//        gbDoingCreateOrders = true;
//        if (giGetTDDataTimeoutId != 0) {
//            window.clearTimeout(giGetTDDataTimeoutId);
//        }
//        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
//        if (idxWL != -1) {
//        }
//    }
}

function SelectWatchlistSymbols() {
    if (!gbDoingCreateOrders) {
        if (gbUsingCell) {
            //get list of watchlists
            if (gWatchlists.length == 0) {
                GetWatchlists(false);
                if (gWatchlists.length > 0) {
                    SetupWatchlists(true);
                    document.getElementById("pwdForm").style.display = "none";
                    document.getElementById("MainForm").style.display = "none";
                    document.getElementById("wlFormColumn").style.display = "none";
                    document.getElementById("wlForm").style.display = "block";
                    gbDoingSymbolsSelect = true;
                }
            } else {
                SetupWatchlists(true);
                document.getElementById("pwdForm").style.display = "none";
                document.getElementById("MainForm").style.display = "none";
                document.getElementById("wlFormColumn").style.display = "none";
                document.getElementById("wlForm").style.display = "block";
                gbDoingSymbolsSelect = true;
            }
        } else {
            if (gbShowingSelectWatchlists) {
                wlDoCancelPopup();
            } else {
                let dLeft = document.pwdForm.btnSymSelect.getBoundingClientRect().left;
                let dTop = document.pwdForm.btnSymSelect.getBoundingClientRect().top;

                dLeft = dLeft.toFixed(0);
                dTop = dTop.toFixed(0);

                //alert ("sRight = " + sRight.toString());
                document.getElementById("spanWLSelectWatchlists").style.top = dTop.toString() + "px";
                document.getElementById("spanWLSelectWatchlists").style.left = dLeft.toString() + "px";

                //get list of watchlists
                if (gWatchlists.length == 0) {
                    GetWatchlists(false);
                    if (gWatchlists.length > 0) {
                        SetupWatchlists(true);
                        document.pwdForm.btnSymSelect.style.visibility = "hidden";
                        document.pwdForm.btnSymFind.style.visibility = "hidden";
                        document.getElementById("spanWLSelectWatchlists").style.visibility = "visible";
                        giZIndex++;
                        document.getElementById("spanWLSelectWatchlists").style.zIndex = giZIndex.toString();
                        gbDoingSymbolsSelect = true;
                        window.setTimeout("wlDoSetShowingSelectWatchlists()", 10);
                    }
                } else {
                    SetupWatchlists(true);
                    document.pwdForm.btnSymSelect.style.visibility = "hidden";
                    document.pwdForm.btnSymFind.style.visibility = "hidden";
                    document.getElementById("spanWLSelectWatchlists").style.visibility = "visible";
                    giZIndex++;
                    document.getElementById("spanWLSelectWatchlists").style.zIndex = giZIndex.toString();
                    gbDoingSymbolsSelect = true;
                    window.setTimeout("wlDoSetShowingSelectWatchlists()", 10);
                }
            }
        }
    }
}

function setCookie(name, value, daysToLive) {
    // Encode value in order to escape semicolons, commas, and whitespace
    let cookie = name + "=" + encodeURIComponent(value);

    if (typeof daysToLive === "number") {
        /* Sets the max-age attribute so that the cookie expires
        after the specified number of days */
        cookie += "; max-age=" + (daysToLive * 24 * 60 * 60);

        document.cookie = cookie;
    }
}

function SetCurrentCookie() {
    //before V6.7 cookie should contain (required) dji active (true or false)
    //                      (required) nasdaq active(true or false)
    //                      (required) s & p active(true or false)
    //                      (required) Large Bio active(true or false)
    //                      (required) Small Bio active(true or false)
    //                      (required) Start Date like 2020-01-01
    //                      (optional)symbol / desc, symbol / desc
    //after V6.6 cookie should contain (required) dji active (true or false)
    //                      (required) nasdaq active(true or false)
    //                      (required) s & p active(true or false)
    //                      (required) Large Bio active(true or false)
    //                      (required) Small Bio active(true or false)
    //                      (required) Russell 2000 active(true or false)
    //                      (required) Nasdaq 100 active(true or false)
    //                      (required) 10yr Treasury active(true or false)
    //                      (required) Oil & Gas active(true or false)
    //                      (required) Start Date like 2020-01-01
    //                      (optional)symbol / desc, symbol / desc
    // e.g. true,true,true,true,true,2020-01-01 or false,true,false,true,true,2020-01-01,aapl/Apple etc.

    let sSep = "";
    let sCookie = "";
    if (document.getElementById("chkIndexDJI").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }
    if (document.getElementById("chkIndexNasdaq").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }
    if (document.getElementById("chkIndexSP").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }
    if (document.getElementById("chkIndexLargeBio").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }
    if (document.getElementById("chkIndexSmallBio").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }

    if (document.getElementById("chkIndexRussell2000").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }
    if (document.getElementById("chkIndexNasdaq100").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }
    if (document.getElementById("chkIndex10yrTreasury").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }
    if (document.getElementById("chkIndexOilGas").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }

    if (TrimLikeVB(document.pwdForm.txtStartDate.value) != "") {
        sCookie = sCookie + sSep + TrimLikeVB(document.pwdForm.txtStartDate.value);
        sSep = ","
    } else {
        sCookie = sCookie + sSep + gsInitialStartDate;
        sSep = ","
    }

    if (document.getElementById("chkIndexOther").checked && (TrimLikeVB(document.getElementById("txtIndexes").value) != "")) {
        sCookie = sCookie + sSep + document.getElementById("txtIndexes").value;
    }
    return sCookie;
}

function SetCurrentCookieSections() {
    //after V9.2 cookie should contain 
    //                      (required) ShowIndexSelection (true or false)
    //                      (required) ShowIndexes (true or false)
    //                      (required) ShowTradeHistorySelection (true or false)
    //                      (required) ShowPriceHistorySelection (true of false)
    // e.g. true,true,true,true

    let sSep = "";
    let sCookie = "";

    //ShowIndexSelection
    if (document.getElementById("chkShowIndexSelection").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }

    //ShowIndexes
    if (document.getElementById("chkShowIndexes").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }

    //ShowTradeHistorySelection
    if (document.getElementById("chkShowTradeHistorySelection").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }

    //ShowPriceHistorySelection
    if (document.getElementById("chkShowPriceHistorySelection").checked) {
        sCookie = sCookie + sSep + "true";
        sSep = ","
    } else {
        sCookie = sCookie + sSep + "false";
        sSep = ","
    }

    return sCookie;
}

function SetCurrentIndexes() {
    let sSep = "";
    gsMarketsCurrentIndexes = "";
    if (document.getElementById("chkIndexDJI").checked) {
        gsMarketsCurrentIndexes = gsMarketsCurrentIndexes + sSep + gsMarketsDJI + "/" + gsMarketsDJIDesc;
        sSep = ","
    }
    if (document.getElementById("chkIndexNasdaq").checked) {
        gsMarketsCurrentIndexes = gsMarketsCurrentIndexes + sSep + gsMarketsNasdaq + "/" + gsMarketsNasdaqDesc;
        sSep = ",";
    }
    if (document.getElementById("chkIndexSP").checked) {
        gsMarketsCurrentIndexes = gsMarketsCurrentIndexes + sSep + gsMarketsSP + "/" + gsMarketsSPDesc;
        sSep = ",";
    }
    if (document.getElementById("chkIndexLargeBio").checked) {
        gsMarketsCurrentIndexes = gsMarketsCurrentIndexes + sSep + gsMarketsLargeBio + "/" + gsMarketsLargeBioDesc;
        sSep = ",";
    }
    if (document.getElementById("chkIndexSmallBio").checked) {
        gsMarketsCurrentIndexes = gsMarketsCurrentIndexes + sSep + gsMarketsSmallBio + "/" + gsMarketsSmallBioDesc;
        sSep = ",";
    }
    if (document.getElementById("chkIndexRussell2000").checked) {
        gsMarketsCurrentIndexes = gsMarketsCurrentIndexes + sSep + gsMarketsRussell2000 + "/" + gsMarketsRussell2000Desc;
        sSep = ",";
    }
    if (document.getElementById("chkIndexNasdaq100").checked) {
        gsMarketsCurrentIndexes = gsMarketsCurrentIndexes + sSep + gsMarketsNasdaq100 + "/" + gsMarketsNasdaq100Desc;
        sSep = ",";
    }
    if (document.getElementById("chkIndex10yrTreasury").checked) {
        gsMarketsCurrentIndexes = gsMarketsCurrentIndexes + sSep + gsMarkets10yrTreasury + "/" + gsMarkets10yrTreasuryDesc;
        sSep = ",";
    }
    if (document.getElementById("chkIndexOilGas").checked) {
        gsMarketsCurrentIndexes = gsMarketsCurrentIndexes + sSep + gsMarketsOilGas + "/" + gsMarketsOilGasDesc;
        sSep = ",";
    }

    let sTmp = document.getElementById("txtIndexes").value;
    sTmp = GetUniqueListOfSymbols(sTmp);
    if (document.getElementById("chkIndexOther").checked && (sTmp != "")) {
        gsMarketsCurrentIndexes = gsMarketsCurrentIndexes + sSep + sTmp;
    }
}

function SetDefault() {
    if (gbDoingStockPriceHistory) {
        //document.pwdForm.btnGetStockPriceHistoryStop.style.cursor = "auto";
        //document.pwdForm.btnGetStockPriceHistoryStop.disabled = false;

        //document.pwdForm.btnGetStockPriceHistory.value = "Start Price History";

    } else {
        document.body.style.cursor = "auto";
        document.pwdForm.txtSymbols.style.cursor = "auto";
        document.pwdForm.txtSymbols.disabled = false;

        document.pwdForm.btnGetTrades.style.cursor = "auto";
        document.pwdForm.btnGetTrades.disabled = false;

        document.pwdForm.btnGetStockPriceHistory.value = "Start Price History";
        document.pwdForm.btnGetStockPriceHistory.style.cursor = "auto";
        document.pwdForm.btnGetStockPriceHistory.disabled = false;

        //document.pwdForm.btnGetStockPriceHistoryStart.style.cursor = "auto";
        //document.pwdForm.btnGetStockPriceHistoryStart.disabled = false;

        //document.pwdForm.btnGetStockPriceHistoryStop.style.cursor = "wait";
        //document.pwdForm.btnGetStockPriceHistoryStop.disabled = true;

        document.pwdForm.txtShortTime.style.cursor = "auto";
        document.pwdForm.txtShortTime.disabled = false;

        document.pwdForm.txtLongTime.style.cursor = "auto";
        document.pwdForm.txtLongTime.disabled = false;

        document.pwdForm.chkUseExtended.disabled = false;
        document.pwdForm.chkUseEnterToTogglePriceHistory.disabled = false;
        document.pwdForm.chkUseLastTradingDay.disabled = false;
        document.pwdForm.chkCollectDetail.disabled = false;

        document.pwdForm.txtStartDate.style.cursor = "auto";
        document.pwdForm.txtStartDate.disabled = false;

        document.pwdForm.txtEndDate.style.cursor = "auto";
        document.pwdForm.txtEndDate.disabled = false;

        document.pwdForm.btnWLSelect.style.cursor = "auto";
        document.pwdForm.btnWLSelect.disabled = false;
        document.pwdForm.btnWLReset.style.cursor = "auto";
        document.pwdForm.btnWLReset.disabled = false;
        document.pwdForm.btnWLImport.style.cursor = "auto";
        document.pwdForm.btnWLImport.disabled = false;
        document.pwdForm.btnSymSelect.style.cursor = "auto";
        document.pwdForm.btnSymSelect.disabled = false;
        document.pwdForm.btnSymFind.style.cursor = "auto";
        document.pwdForm.btnSymFind.disabled = false;


        document.getElementById("spanRunning").style.backgroundColor = "green";
        document.getElementById("spanRunning").style.Color = "white";
        document.getElementById("spanRunning").style.visibility = "hidden";

    }
}

function SetDefaultWL(idxWL) {
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    if ((document.getElementById("chkPlace" + sThisId) != null) && (!isUndefined(document.getElementById("chkPlace" + sThisId)))) {
        document.getElementById("chkPlace" + sThisId).disabled = false;
    }
    if ((document.getElementById("chkSave" + sThisId) != null) && (!isUndefined(document.getElementById("chkSave" + sThisId)))) {
        document.getElementById("chkSave" + sThisId).disabled = false;
    }
}

function SetFeeIndicator(idx) {
    let tmpoSymbol = new Symbol();
    tmpoSymbol = gSymbols[idx];
    let sFeeIndicator = "";
    if (tmpoSymbol.fees > 0) {
        if (tmpoSymbol.fees < 0.1) {
            sFeeIndicator = "<span title=\"Fees less than $0.10\" style=\"color:blue;\">&nbsp;*</span>";
        } else if (tmpoSymbol.fees < 0.5) {
            sFeeIndicator = "<span title=\"Fees less than $0.50\" style=\"color:crimson;\">&nbsp;*</span>";
        } else if (tmpoSymbol.fees < 0.75) {
            sFeeIndicator = "<span title=\"Fees less than $0.75\" style=\"color:cyan;\">&nbsp;*</span>";
        } else if (tmpoSymbol.fees < 1.0) {
            sFeeIndicator = "<span title=\"Fees less than $1.00\" style=\"color:Chartreuse;\">&nbsp;*</span>";
        } else {
            sFeeIndicator = "<span title=\"Fees greater than $1.00\" style=\"color:DeepPink;\">&nbsp;*</span>";
        }
    }
    return sFeeIndicator;
}

function SetLineCnt() {
    if (!isUndefined(document.getElementById("optMinLines"))) {
        let sTmp = TrimLikeVB(document.getElementById("optMinLines").value);
        let iTmp = parseInt(sTmp);
        //let bNeedChange = true;
        //if (sTmp == "") {
        //    iTmp = 30;
        //} else {
        //    iTmp = parseInt(sTmp);
        //    if (iTmp == 0) {
        //        iTmp = 30;
        //    } else if (iTmp < 10) {
        //        iTmp = 10;
        //    } else if (iTmp > 40) {
        //        iTmp = 40;
        //    } else {
        //        bNeedChange = false;
        //    }
        //}
        //if (bNeedChange) {
        //    document.getElementById("txtMinLines").value = iTmp.toString();
        //}
        giLineLimit = iTmp;
        gsTableHeightWithScrollbar = (giLineLimit * giLineHeight).toString() + "px";
        gsTableHeightOverflow = "height:" + (giLineLimit * giLineHeight).toString() + "px; overflow: auto; ";
    }
}

function SetNameWithDefaultUpdateGLDate(oWL) {
    let sReturnName = "";
    if (oWL.name != "") {
        sReturnName = oWL.name;
        if (oWL.defaultUpdateGLDate != "") { //must be like yyyy-mm-dd
            if (oWL.defaultUpdateGLDate.length == 10) {
                if (oWL.name.length < 31) {
                    sReturnName = oWL.name + "-" + oWL.defaultUpdateGLDate.substr(0, 4) + oWL.defaultUpdateGLDate.substr(5, 2) + oWL.defaultUpdateGLDate.substr(8, 2);
                } else { //need to truncate the name to 31 characters
                    sReturnName = oWL.name.substr(0, 31) + "-" + oWL.defaultUpdateGLDate.substr(0, 4) + oWL.defaultUpdateGLDate.substr(5, 2) + oWL.defaultUpdateGLDate.substr(8, 2);
                }
            }
        }
    }
    return sReturnName;
}

function SetPurchasedDateHidden(sPurchasedDateIn) {
    //1) equal to 1990-01-01 then blank and hidden
    //2) less than 1990-01-01 then hidden and date = datediff(this value, 1990-01-01) + 1990-01-01
    //3) greater than 1990-01-01 then not hidden
    //4) blank then not hidden
    let oWLPDH = new WLPurchasedDateHidden();
    try {
        if (sPurchasedDateIn != "") {
            let dPD = new Date(sPurchasedDateIn);
            let dPDStart = new Date("1990-01-01");
            let iDateDiff = DateDiff.inDays(dPDStart, dPD);

            if (iDateDiff == 0) {
                // case 1
                oWLPDH.bHidden = true;
            } else if (iDateDiff > 0) {
                // case 3
                dPDStart.setDate(dPDStart.getDate() - iDateDiff);
                oWLPDH.purchasedDate = FormatDateForTD(dPDStart);
            } else {
                // case 2
                //already hidden - do nothing
                oWLPDH.purchasedDate = sPurchasedDateIn;
            }
        } else {
            oWLPDH.purchasedDate = "1990-01-01";
        }
    } catch (e) {

    }
    return oWLPDH.purchasedDate;
}

function SetSpecialPriceColor(dDiffShort, dDiffLong, dPrice) {
    //Stock Price	Min Move <= 5 Mins	Min Move <= 40 Mins
    //    < 5	0.50	0.65
    //5 - 10	0.75	1.00
    //10 - 20	1.10	1.45
    //20 - 40	1.40	1.80
    //40 - 60	1.50	1.95
    //80 - 100	1.90	2.45
    //    > 100	2.00	2.60
    let iReturn = 0; //0 = not special, 1 = short special, 2 = long special, 3 = short and long special
    if (dPrice < 5.01) {
        if ((dDiffShort > 0.49) && (dDiffLong > 0.64)) {
            iReturn = 3;
        } else if (dDiffShort > 0.49) {
            iReturn = 1;
        } else if (dDiffLong > 0.64) {
            iReturn = 2;
        }
    } else if (dPrice < 10.01) {
        if ((dDiffShort > 0.75) && (dDiffLong > 1.0)) {
            iReturn = 3;
        } else if (dDiffShort > 0.75) {
            iReturn = 1;
        } else if (dDiffLong > 1.0) {
            iReturn = 2;
        }
    } else if (dPrice < 20.01) {
        if ((dDiffShort > 1.1) && (dDiffLong > 1.45)) {
            iReturn = 3;
        } else if (dDiffShort > 1.1) {
            iReturn = 1;
        } else if (dDiffLong > 1.45) {
            iReturn = 2;
        }
    } else if (dPrice < 40.01) {
        if ((dDiffShort > 1.4) && (dDiffLong > 1.8)) {
            iReturn = 3;
        } else if (dDiffShort > 1.4) {
            iReturn = 1;
        } else if (dDiffLong > 1.8) {
            iReturn = 2;
        }
    } else if (dPrice < 60.01) {
        if ((dDiffShort > 1.5) && (dDiffLong > 1.95)) {
            iReturn = 3;
        } else if (dDiffShort > 1.5) {
            iReturn = 1;
        } else if (dDiffLong > 1.95) {
            iReturn = 2;
        }
    } else if (dPrice < 100.01) {
        if ((dDiffShort > 1.9) && (dDiffLong > 2.45)) {
            iReturn = 3;
        } else if (dDiffShort > 1.9) {
            iReturn = 1;
        } else if (dDiffLong > 2.45) {
            iReturn = 2;
        }
    } else {
        if ((dDiffShort > 2.0) && (dDiffLong > 2.6)) {
            iReturn = 3;
        } else if (dDiffShort > 2.0) {
            iReturn = 1;
        } else if (dDiffLong > 2.6) {
            iReturn = 2;
        }
    }
    return iReturn;
}

function SetupIndexes() {
    SetCurrentIndexes();
    //debugger
    if (gsMarketsLastIndexes != gsMarketsCurrentIndexes) {
        gsMarketsLastIndexes = gsMarketsCurrentIndexes;
        setCookie(gsMarketCookieName, SetCurrentCookie(), 30);
        let sMarketsToTrack = gsMarketsLastIndexes.split(",");
        gMarketIndexes.length = 0;
        if (sMarketsToTrack.length > 0) {
            let sRow1 = "<tr>";
            let sRow2 = "<tr>";
            let sRow3 = "<tr>";
            for (let idx = 0; idx < sMarketsToTrack.length; idx++) {
                let sMarket = sMarketsToTrack[idx].split("/");
                if (sMarket.length > 0) {
                    let marketIndex = new MarketIndex();
                    if (sMarket[0] == gsMarketsOilGas) {
                        marketIndex.symbol = gsMarketsOilGasActual;
                    } else {
                        marketIndex.symbol = sMarket[0].toUpperCase();
                    }
                    if (sMarket.length == 2) {
                        marketIndex.description = sMarket[1];
                    } else {
                        marketIndex.description = sMarket[0];
                    }
                    marketIndex.tdName = "tdMarket" + idx.toString();
                    gMarketIndexes[gMarketIndexes.length] = marketIndex;
                    sRow1 = sRow1 + "<td id=\"" + marketIndex.tdName + "\" style=\"color:black; vertical-align:top; text-align:center; width:" + gsMarketWidth + "px\"></td>";
                    sRow2 = sRow2 + "<td id=\"" + marketIndex.tdName + "Value\" style=\"color:black; vertical-align:top; text-align:center; width:" + gsMarketWidth + "px\"></td>";
                    sRow3 = sRow3 + "<td style=\"vertical-align:middle; text-align:center; width:" + gsMarketWidth + "px\" >" +
                        "<input style=\"padding-left:2px; padding-right:0px; padding-top:0px; padding-bottom:0px; border-width:0px; font-family:Arial, Helvetica, sans-serif; font-size:10pt; text-align:center; width:" + gsMarketWidthChange + "px; height:20px; visibility:visible\" type=\"button\" id=\"" + marketIndex.tdName + "Change\" name=\"" + marketIndex.tdName + "Change\" value=\"0\" onclick=\"DoChangeIndexChange()\">" +
                        "</td>";
                    //sRow3 = sRow3 + "<td style=\"vertical-align:middle; text-align:left; width:" + gsMarketWidth + "px\" >" +
                    //    "<input style=\"border-radius:5px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;width:" + gsMarketWidthChange + "px; height:20px; visibility:visible\" type=\"button\" id=\"" + marketIndex.tdName + "Change\" name=\"" + marketIndex.tdName + "Change\" value=\"0\" onclick=\"DoChangeIndexChange()\">" +
                    //    "</td>";
                }
            }
            sRow1 = sRow1 + "</tr>"
            sRow2 = sRow2 + "</tr>"
            sRow3 = sRow3 + "</tr>"
            document.getElementById("tblIndexTable").style.width = (sMarketsToTrack.length * parseInt(gsMarketWidth)).toString() + "px";
            document.getElementById("tblIndexTable").innerHTML = sRow1 + sRow2 + sRow3;
        }
    }

}
function SetupWatchlists(bDoingSymbols) {

    let gsAccounts = [];
    //get list of account to display - if no watchlist for the account just show add new watchlist 
    if (gAccounts.length > 0) {
        for (let idxAccounts = 0; idxAccounts < gAccounts.length; idxAccounts++) {
            if (!(gAccounts[idxAccounts].CBliquidationValue < gdAccountMinimumLiquidationValue)) {
                gsAccounts[gAccounts[idxAccounts].accountName] = {"accountid": gAccounts[idxAccounts].accountId, "haswatchlists": false};
            }
        }
    }

    if (gbUsingCell) {
        if (gWatchlists.length > 0) {
            let s = "<table id=\"tblWLSelected\" style=\"border-width:1px;\">";
            //        let s = "<table id=\"tblWLSelected\" style=\"width:500px;border-width:1px;\">";

            s = s + "<tr><td colspan=\"2\" style=\"color:black; height:20px; width:100%; text-align:left; vertical-align:top; border-width:0px; border-style:solid; border-spacing:1px; border-color:White\"><b>Watchlists</b></td></tr>";

            let sLastAccountname = "";
            let sonClick = "";
            for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
                if (((gWatchlists[idxWL].name == gsAccountSavedOrders) && (!bDoingSymbols)) ||
                    ((gWatchlists[idxWL].name == gsAccountOrders) && (!bDoingSymbols)) ||
                    ((gWatchlists[idxWL].name == gsAccountWLSummary) && (!bDoingSymbols)) ||
                    ((gWatchlists[idxWL].name != gsAccountSavedOrders) &&
                     (gWatchlists[idxWL].name != gsAccountOrders) &&
                     (gWatchlists[idxWL].name != gsAccountWLSummary))) {
                    if (gWatchlists[idxWL].accountName != sLastAccountname) {
                        sLastAccountname = gWatchlists[idxWL].accountName;
                        if (!isUndefined(gsAccounts[sLastAccountname])) {
                            gsAccounts[sLastAccountname].haswatchlists = true;
                        }
                        s = s + "<tr>";
                        s = s + "<td colspan=\"2\" style=\"width:100%; text-align:left; vertical-align:top;border-width:0px;\">" + sLastAccountname + "</td>";
                        s = s + "</tr>";
                        if ((!gWatchlists[idxWL].bShared) && (!bDoingSymbols)) {
                            sonClick = "onclick=\"wlSelectedCell(" + (-1 * parseInt(gsAccounts[sLastAccountname].accountid)).toString() + ", '" + sLastAccountname + "')\"";
                            s = s + "<tr>";
                            s = s + "<td style=\"width:50px;vertical-align:top;border-width:0px;\"></td > ";
                            s = s + "<td " + sonClick + " style=\"text-align:left;vertical-align:top;border-width:0px;\">Add New Watchlist</td>";
                            s = s + "</tr>";
                        } else {
                            sonClick = "";
                        }
                    }
                    s = s + "<tr>";
                    sonClick = "onclick=\"wlSelectedCell(" + idxWL.toString() + ", '')\"";

                    if (bDoingSymbols) {
                        let bSelected = false;
                        if (bDoingSymbols) {
                            bSelected = gWatchlists[idxWL].bSelectedSymbols;
                        } else if (gWatchlists[idxWL].name == gsAccountOrders) {
                            bSelected = gWatchlists[idxWL].bSelectedO
                        } else if (gWatchlists[idxWL].name == gsAccountSavedOrders) {
                            bSelected = gWatchlists[idxWL].bSelectedSO
                        } else {
                            bSelected = gWatchlists[idxWL].bSelected;
                        }
                        if (bSelected) {
                            s = s + "<td style=\"vertical-align:top;border-width:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
                                "<input checked type=\"checkbox\" value=\"\" onclick=\"wlMarkSelected(" + idxWL.toString() + ")\">" +
                                "</td > ";
                        } else {
                            s = s + "<td style=\"vertical-align:top;border-width:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
                                "<input type=\"checkbox\" value=\"\" onclick=\"wlMarkSelected(" + idxWL.toString() + ")\">" +
                                "</td > ";
                        }
                        if (gWatchlists[idxWL].bShared) {
                            s = s + "<td " + sonClick + " style=\"text-align:left;vertical-align:top;border-width:0px;\">" +
                                gWatchlists[idxWL].name + " (shared)" +
                                "</td>";
                        } else {
                            s = s + "<td " + sonClick + " style=\"text-align:left;vertical-align:top;border-width:0px;\">" +
                                gWatchlists[idxWL].name +
                                "</td>";
                        }

                    } else {
                        s = s + "<td style=\"width:50px;vertical-align:top;border-width:0px;\"></td > ";
                        if (gWatchlists[idxWL].bShared) {
                            s = s + "<td " + sonClick + " style=\"text-align:left;vertical-align:top;border-width:0px;\">" +
                                gWatchlists[idxWL].name + " (shared)" +
                                "</td>";
                        } else {
                            s = s + "<td " + sonClick + " style=\"text-align:left;vertical-align:top;border-width:0px;\">" +
                                gWatchlists[idxWL].name +
                                "</td>";
                        }
                    }
                    s = s + "</tr>";
                }
            }
            s = s + "<tr></tr>";

            if (!bDoingSymbols) {
                for (let key in gsAccounts) {
                    if (gsAccounts.hasOwnProperty(key)) {
                        if (!gsAccounts[key].haswatchlists) {
                            //add an account with just the Add New Watchlist entry
                            s = s + "<tr>";
                            s = s + "<td colspan=\"2\" style=\"width:100%; text-align:left; vertical-align:top;border-width:0px;\">" + key + "</td>";
                            s = s + "</tr>";

                            sonClick = "onclick=\"wlSelectedCell(" + (-1 * parseInt(gsAccounts[key].accountid)).toString() + ", '" + key + "')\"";
                            s = s + "<tr>";
                            s = s + "<td style=\"width:50px;vertical-align:top;border-width:0px;\"></td > ";
                            s = s + "<td " + sonClick + " style=\"text-align:left;vertical-align:top;border-width:0px;\">Add New Watchlist</td>";
                            s = s + "</tr>";
                        }
                    }
                }
            }

            if (bDoingSymbols) {
                s = s + "<tr>";
                s = s + "<td style=\"vertical-align:top;border-width:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
                    "<input style=\"border-radius:15px;\" type=\"button\" value=\"OK\" onclick=\"wlOKClicked()\">" +
                    "</td > ";
                s = s + "<td style=\"vertical-align:top;border-width:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
                    "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlCancelClicked()\">" +
                    "</td > ";
                s = s + "</tr>";
            } else {
                s = s + "<tr>";
                s = s + "<td style=\"width:50px;vertical-align:top;border-width:0px;\"></td > ";
                s = s + "<td style=\"vertical-align:top;border-width:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
                    "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlCancelClicked()\">" +
                    "</td > ";
                s = s + "</tr>";
            }

            s = s + "</table>";
            document.getElementById("divWLSelect").innerHTML = s;
        }
    } else {
        if (gWatchlists.length > 0) {
            let s = "<select id=\"optWL\" size=\"20\" onclick=\"wlWatchlistSelected()\">";

            let sLastAccountname = "";
            for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
                if (((gWatchlists[idxWL].name == gsAccountSavedOrders) && (!bDoingSymbols)) ||
                    ((gWatchlists[idxWL].name == gsAccountOrders) && (!bDoingSymbols)) ||
                    ((gWatchlists[idxWL].name == gsAccountWLSummary) && (!bDoingSymbols)) ||
                    ((gWatchlists[idxWL].name != gsAccountSavedOrders) &&
                     (gWatchlists[idxWL].name != gsAccountOrders) &&
                     (gWatchlists[idxWL].name != gsAccountWLSummary))) {
                    if (sLastAccountname == "") {
                        sLastAccountname = gWatchlists[idxWL].accountName;
                        if (!isUndefined(gsAccounts[sLastAccountname])) {
                            gsAccounts[sLastAccountname].haswatchlists = true;
                        }
                        s = s + "<option selected value=\"\">&nbsp;</option>";
                        s = s + "<optgroup label=\"" + sLastAccountname + "\">";
                    } else {
                        if (gWatchlists[idxWL].accountName != sLastAccountname) {
                            sLastAccountname = gWatchlists[idxWL].accountName;
                            if (!isUndefined(gsAccounts[sLastAccountname])) {
                                gsAccounts[sLastAccountname].haswatchlists = true;
                            }
                            if ((!gWatchlists[idxWL - 1].bShared) && (!bDoingSymbols)) {
                                s = s + "<option value=" + (-1 * parseInt(gsAccounts[gWatchlists[idxWL - 1].accountName].accountid)).toString() + ">Add New Watchlist</option>";
                            }
                            s = s + "</optgroup>";
                            s = s + "<optgroup label=\"" + sLastAccountname + "\">";
                        }
                    }
                    if (gWatchlists[idxWL].bShared) {
                        s = s + "<option value=\"" + idxWL.toString() + "\">" + gWatchlists[idxWL].name + " (shared)</option>";
                    } else {
                        s = s + "<option value=\"" + idxWL.toString() + "\">" + gWatchlists[idxWL].name + "</option>";
                    }
                }
            }
            if ((!gWatchlists[gWatchlists.length - 1].bShared) && (!bDoingSymbols)) {
                s = s + "<option value=" + (-1 * parseInt(gsAccounts[gWatchlists[gWatchlists.length - 1].accountName].accountid)).toString() + ">Add New Watchlist</option>";
            }
            s = s + "</optgroup>";

            if (!bDoingSymbols) {
                for (let key in gsAccounts) {
                    if (gsAccounts.hasOwnProperty(key)) {
                        if (!gsAccounts[key].haswatchlists) {
                            //add an account with just the Add New Watchlist entry
                            s = s + "<optgroup label=\"" + key + "\">";
                            s = s + "<option value=" + (-1 * parseInt(gsAccounts[key].accountid)).toString() + ">Add New Watchlist</option>";
                            s = s + "</optgroup>";
                        }
                    }
                }
            }

            s = s + "</select>";

            document.getElementById("spanWLSelectWatchlists").innerHTML = s;
        }
    }
}

function SetupWLColumnDefaults() {
    let iOrder = 0;

    gsWLColumnsDefault["Symbol"] = clone(gsWLColumnsAll["Symbol"]);
    gsWLColumnsDefault["PurchaseDate"] = clone(gsWLColumnsAll["PurchaseDate"]);
    gsWLColumnsDefault["PurchaseDate"].selected = true;
    gsWLColumnsDefault["Qty"] = clone(gsWLColumnsAll["Qty"]);
    gsWLColumnsDefault["Qty"].selected = true;
    gsWLColumnsDefault["Price"] = clone(gsWLColumnsAll["Price"]);
    gsWLColumnsDefault["Price"].selected = true;
    gsWLColumnsDefault["ChgPercent"] = clone(gsWLColumnsAll["ChgPercent"]);
    gsWLColumnsDefault["ChgPercent"].selected = true;
    gsWLColumnsDefault["ChgDollar"] = clone(gsWLColumnsAll["ChgDollar"]);
    gsWLColumnsDefault["ChgDollar"].selected = true;
    gsWLColumnsDefault["Bid"] = clone(gsWLColumnsAll["Bid"]);
    gsWLColumnsDefault["Bid"].selected = true;
    gsWLColumnsDefault["Ask"] = clone(gsWLColumnsAll["Ask"]);
    gsWLColumnsDefault["Ask"].selected = true;
    gsWLColumnsDefault["DayGain"] = clone(gsWLColumnsAll["DayGain"]);
    gsWLColumnsDefault["DayGain"].selected = true;
    gsWLColumnsDefault["GainDollar"] = clone(gsWLColumnsAll["GainDollar"]);
    gsWLColumnsDefault["GainDollar"].selected = true;
    gsWLColumnsDefault["GainPercent"] = clone(gsWLColumnsAll["GainPercent"]);
    gsWLColumnsDefault["GainPercent"].selected = true;
    gsWLColumnsDefault["CostPerShare"] = clone(gsWLColumnsAll["CostPerShare"]);
    gsWLColumnsDefault["CostPerShare"].selected = true;
    gsWLColumnsDefault["GL"] = clone(gsWLColumnsAll["GL"]);
    gsWLColumnsDefault["GL"].selected = true;
    gsWLColumnsDefault["MktValue"] = clone(gsWLColumnsAll["MktValue"]);
    gsWLColumnsDefault["MktValue"].selected = true;
    gsWLColumnsDefault["High"] = clone(gsWLColumnsAll["High"]);
    gsWLColumnsDefault["High"].selected = false;
    gsWLColumnsDefault["Low"] = clone(gsWLColumnsAll["Low"]);
    gsWLColumnsDefault["Low"].selected = false;
    gsWLColumnsDefault["PE"] = clone(gsWLColumnsAll["PE"]);
    gsWLColumnsDefault["PE"].selected = false;
    gsWLColumnsDefault["OldGL"] = clone(gsWLColumnsAll["OldGL"]);
    gsWLColumnsDefault["OldGL"].selected = false;
    gsWLColumnsDefault["SymbolDescription"] = clone(gsWLColumnsAll["SymbolDescription"]);
    gsWLColumnsDefault["SymbolDescription"].selected = false;
    gsWLColumnsDefault["CatalystDate"] = clone(gsWLColumnsAll["CatalystDate"]);
    gsWLColumnsDefault["CatalystDate"].selected = false;
    gsWLColumnsDefault["DivPercent"] = clone(gsWLColumnsAll["DivPercent"]);
    gsWLColumnsDefault["DivPercent"].selected = false;
    gsWLColumnsDefault["DivDate"] = clone(gsWLColumnsAll["DivDate"]);
    gsWLColumnsDefault["DivDate"].selected = false;
    gsWLColumnsDefault["Amt"] = clone(gsWLColumnsAll["Amt"]);
    gsWLColumnsDefault["Amt"].selected = false;

    iOrder = 2;
    for (let key in gsWLColumnsDefault) {
        // check if the property/key is defined in the object itself, not in parent
        if (gsWLColumnsDefault.hasOwnProperty(key)) {
            gsWLColumnsDefault[key].sortorder = iOrder;
            iOrder = iOrder + 2;
        }
    }

    gsWLColumnsAccount["Symbol"] = clone(gsWLColumnsAll["Symbol"]);
    gsWLColumnsAccount["Qty"] = clone(gsWLColumnsAll["Qty"]);
    gsWLColumnsAccount["Qty"].selected = true;
    gsWLColumnsAccount["Price"] = clone(gsWLColumnsAll["Price"]);
    gsWLColumnsAccount["Price"].selected = true;
    gsWLColumnsAccount["ChgPercent"] = clone(gsWLColumnsAll["ChgPercent"]);
    gsWLColumnsAccount["ChgPercent"].selected = true;
    gsWLColumnsAccount["ChgDollar"] = clone(gsWLColumnsAll["ChgDollar"]);
    gsWLColumnsAccount["ChgDollar"].selected = true;
    gsWLColumnsAccount["Bid"] = clone(gsWLColumnsAll["Bid"]);
    gsWLColumnsAccount["Bid"].selected = true;
    gsWLColumnsAccount["Ask"] = clone(gsWLColumnsAll["Ask"]);
    gsWLColumnsAccount["Ask"].selected = true;
    gsWLColumnsAccount["DayGain"] = clone(gsWLColumnsAll["DayGain"]);
    gsWLColumnsAccount["DayGain"].selected = true;
    gsWLColumnsAccount["GainDollar"] = clone(gsWLColumnsAll["GainDollar"]);
    gsWLColumnsAccount["GainDollar"].selected = true;
    gsWLColumnsAccount["GainPercent"] = clone(gsWLColumnsAll["GainPercent"]);
    gsWLColumnsAccount["GainPercent"].selected = true;
    gsWLColumnsAccount["CostPerShare"] = clone(gsWLColumnsAll["CostPerShare"]);
    gsWLColumnsAccount["CostPerShare"].selected = true;
    gsWLColumnsAccount["MktValue"] = clone(gsWLColumnsAll["MktValue"]);
    gsWLColumnsAccount["MktValue"].selected = true;

    iOrder = 2;
    for (let key in gsWLColumnsAccount) {
        // check if the property/key is defined in the object itself, not in parent
        if (gsWLColumnsAccount.hasOwnProperty(key)) {
            gsWLColumnsAccount[key].sortorder = iOrder;
            iOrder = iOrder + 2;
        }
    }

    gsWLColumnsDiv["Symbol"] = clone(gsWLColumnsAll["Symbol"]);
    gsWLColumnsDiv["DivPercent"] = clone(gsWLColumnsAll["DivPercent"]);
    gsWLColumnsDiv["DivPercent"].selected = true;
    gsWLColumnsDiv["Amt"] = clone(gsWLColumnsAll["Amt"]);
    gsWLColumnsDiv["Amt"].selected = true;
    gsWLColumnsDiv["DivDate"] = clone(gsWLColumnsAll["DivDate"]);
    gsWLColumnsDiv["DivDate"].selected = true;
    gsWLColumnsDiv["Qty"] = clone(gsWLColumnsAll["Qty"]);
    gsWLColumnsDiv["Qty"].selected = true;
    gsWLColumnsDiv["Price"] = clone(gsWLColumnsAll["Price"]);
    gsWLColumnsDiv["Price"].selected = true;
    gsWLColumnsDiv["ChgPercent"] = clone(gsWLColumnsAll["ChgPercent"]);
    gsWLColumnsDiv["ChgPercent"].selected = true;
    gsWLColumnsDiv["ChgDollar"] = clone(gsWLColumnsAll["ChgDollar"]);
    gsWLColumnsDiv["ChgDollar"].selected = true;
    gsWLColumnsDiv["Bid"] = clone(gsWLColumnsAll["Bid"]);
    gsWLColumnsDiv["Bid"].selected = true;
    gsWLColumnsDiv["Ask"] = clone(gsWLColumnsAll["Ask"]);
    gsWLColumnsDiv["Ask"].selected = true;
    gsWLColumnsDiv["DayGain"] = clone(gsWLColumnsAll["DayGain"]);
    gsWLColumnsDiv["DayGain"].selected = true;
    gsWLColumnsDiv["GainDollar"] = clone(gsWLColumnsAll["GainDollar"]);
    gsWLColumnsDiv["GainDollar"].selected = true;
    gsWLColumnsDiv["GainPercent"] = clone(gsWLColumnsAll["GainPercent"]);
    gsWLColumnsDiv["GainPercent"].selected = true;
    gsWLColumnsDiv["CostPerShare"] = clone(gsWLColumnsAll["CostPerShare"]);
    gsWLColumnsDiv["CostPerShare"].selected = true;
    gsWLColumnsDiv["MktValue"] = clone(gsWLColumnsAll["MktValue"]);
    gsWLColumnsDiv["MktValue"].selected = true;
    gsWLColumnsDiv["PurchaseDate"] = clone(gsWLColumnsAll["PurchaseDate"]);
    gsWLColumnsDiv["PurchaseDate"].selected = true;
    gsWLColumnsDiv["SymbolDescription"] = clone(gsWLColumnsAll["SymbolDescription"]);
    gsWLColumnsDiv["SymbolDescription"].selected = false;
    gsWLColumnsDiv["High"] = clone(gsWLColumnsAll["High"]);
    gsWLColumnsDiv["High"].selected = false;
    gsWLColumnsDiv["Low"] = clone(gsWLColumnsAll["Low"]);
    gsWLColumnsDiv["Low"].selected = false;
    gsWLColumnsDiv["PE"] = clone(gsWLColumnsAll["PE"]);
    gsWLColumnsDiv["PE"].selected = false;
    gsWLColumnsDiv["GL"] = clone(gsWLColumnsAll["GL"]);
    gsWLColumnsDiv["GL"].selected = false;
    gsWLColumnsDiv["OldGL"] = clone(gsWLColumnsAll["OldGL"]);
    gsWLColumnsDiv["OldGL"].selected = false;

    iOrder = 2;
    for (let key in gsWLColumnsDiv) {
        // check if the property/key is defined in the object itself, not in parent
        if (gsWLColumnsDiv.hasOwnProperty(key)) {
            gsWLColumnsDiv[key].sortorder = iOrder;
            iOrder = iOrder + 2;
        }
    }


    gsWLColumnsShared["Symbol"] = clone(gsWLColumnsAll["Symbol"]);
    gsWLColumnsShared["SymbolDescription"] = clone(gsWLColumnsAll["SymbolDescription"]);
    gsWLColumnsShared["SymbolDescription"].selected = true;
    gsWLColumnsShared["Price"] = clone(gsWLColumnsAll["Price"]);
    gsWLColumnsShared["Price"].selected = true;
    gsWLColumnsShared["ChgPercent"] = clone(gsWLColumnsAll["ChgPercent"]);
    gsWLColumnsShared["ChgPercent"].selected = true;
    gsWLColumnsShared["ChgDollar"] = clone(gsWLColumnsAll["ChgDollar"]);
    gsWLColumnsShared["ChgDollar"].selected = true;
    gsWLColumnsShared["Bid"] = clone(gsWLColumnsAll["Bid"]);
    gsWLColumnsShared["Bid"].selected = true;
    gsWLColumnsShared["Ask"] = clone(gsWLColumnsAll["Ask"]);
    gsWLColumnsShared["Ask"].selected = true;

    iOrder = 2;
    for (let key in gsWLColumnsShared) {
        // check if the property/key is defined in the object itself, not in parent
        if (gsWLColumnsShared.hasOwnProperty(key)) {
            gsWLColumnsShared[key].sortorder = iOrder;
            iOrder = iOrder + 2;
        }
    }

    gsWLColumnsSharedCurrentTrades["Symbol"] = clone(gsWLColumnsAll["Symbol"]);
    gsWLColumnsSharedCurrentTrades["Symbol"].sortonthisfield = false;
    gsWLColumnsSharedCurrentTrades["SymbolDescription"] = clone(gsWLColumnsAll["SymbolDescription"]);
    gsWLColumnsSharedCurrentTrades["SymbolDescription"].selected = true;
    gsWLColumnsSharedCurrentTrades["CatalystDate"] = clone(gsWLColumnsAll["CatalystDate"]);
    gsWLColumnsSharedCurrentTrades["CatalystDate"].selected = true;
    gsWLColumnsSharedCurrentTrades["CatalystDate"].sortonthisfield = true;
    gsWLColumnsSharedCurrentTrades["CatalystDate"].sortascdesc = 0;
    gsWLColumnsSharedCurrentTrades["Price"] = clone(gsWLColumnsAll["Price"]);
    gsWLColumnsSharedCurrentTrades["Price"].selected = true;
    gsWLColumnsSharedCurrentTrades["ChgPercent"] = clone(gsWLColumnsAll["ChgPercent"]);
    gsWLColumnsSharedCurrentTrades["ChgPercent"].selected = true;
    gsWLColumnsSharedCurrentTrades["ChgDollar"] = clone(gsWLColumnsAll["ChgDollar"]);
    gsWLColumnsSharedCurrentTrades["ChgDollar"].selected = true;
    gsWLColumnsSharedCurrentTrades["Bid"] = clone(gsWLColumnsAll["Bid"]);
    gsWLColumnsSharedCurrentTrades["Bid"].selected = true;
    gsWLColumnsSharedCurrentTrades["Ask"] = clone(gsWLColumnsAll["Ask"]);
    gsWLColumnsSharedCurrentTrades["Ask"].selected = true;

    iOrder = 2;
    for (let key in gsWLColumnsSharedCurrentTrades) {
        // check if the property/key is defined in the object itself, not in parent
        if (gsWLColumnsSharedCurrentTrades.hasOwnProperty(key)) {
            gsWLColumnsSharedCurrentTrades[key].sortorder = iOrder;
            iOrder = iOrder + 2;
        }
    }

    gsWLColumnsCurrentTrades["Symbol"] = clone(gsWLColumnsAll["Symbol"]);
    gsWLColumnsCurrentTrades["Symbol"].sortonthisfield = false;
    gsWLColumnsCurrentTrades["SymbolDescription"] = clone(gsWLColumnsAll["SymbolDescription"]);
    gsWLColumnsCurrentTrades["SymbolDescription"].selected = true;
    gsWLColumnsCurrentTrades["CatalystDate"] = clone(gsWLColumnsAll["CatalystDate"]);
    gsWLColumnsCurrentTrades["CatalystDate"].selected = true;
    gsWLColumnsCurrentTrades["CatalystDate"].sortonthisfield = true;
    gsWLColumnsCurrentTrades["CatalystDate"].sortascdesc = 0;
    gsWLColumnsCurrentTrades["Qty"] = clone(gsWLColumnsAll["Qty"]);
    gsWLColumnsCurrentTrades["Qty"].selected = true;
    gsWLColumnsCurrentTrades["Price"] = clone(gsWLColumnsAll["Price"]);
    gsWLColumnsCurrentTrades["Price"].selected = true;
    gsWLColumnsCurrentTrades["ChgPercent"] = clone(gsWLColumnsAll["ChgPercent"]);
    gsWLColumnsCurrentTrades["ChgPercent"].selected = true;
    gsWLColumnsCurrentTrades["ChgDollar"] = clone(gsWLColumnsAll["ChgDollar"]);
    gsWLColumnsCurrentTrades["ChgDollar"].selected = true;
    gsWLColumnsCurrentTrades["Bid"] = clone(gsWLColumnsAll["Bid"]);
    gsWLColumnsCurrentTrades["Bid"].selected = true;
    gsWLColumnsCurrentTrades["Ask"] = clone(gsWLColumnsAll["Ask"]);
    gsWLColumnsCurrentTrades["Ask"].selected = true;
    gsWLColumnsCurrentTrades["DayGain"] = clone(gsWLColumnsAll["DayGain"]);
    gsWLColumnsCurrentTrades["DayGain"].selected = true;
    gsWLColumnsCurrentTrades["GainDollar"] = clone(gsWLColumnsAll["GainDollar"]);
    gsWLColumnsCurrentTrades["GainDollar"].selected = true;
    gsWLColumnsCurrentTrades["GainPercent"] = clone(gsWLColumnsAll["GainPercent"]);
    gsWLColumnsCurrentTrades["GainPercent"].selected = true;
    gsWLColumnsCurrentTrades["CostPerShare"] = clone(gsWLColumnsAll["CostPerShare"]);
    gsWLColumnsCurrentTrades["CostPerShare"].selected = true;
    gsWLColumnsCurrentTrades["GL"] = clone(gsWLColumnsAll["GL"]);
    gsWLColumnsCurrentTrades["GL"].selected = true;
    gsWLColumnsCurrentTrades["MktValue"] = clone(gsWLColumnsAll["MktValue"]);
    gsWLColumnsCurrentTrades["MktValue"].selected = true;
    gsWLColumnsCurrentTrades["High"] = clone(gsWLColumnsAll["High"]);
    gsWLColumnsCurrentTrades["High"].selected = false;
    gsWLColumnsCurrentTrades["Low"] = clone(gsWLColumnsAll["Low"]);
    gsWLColumnsCurrentTrades["Low"].selected = false;
    gsWLColumnsCurrentTrades["OldGL"] = clone(gsWLColumnsAll["OldGL"]);
    gsWLColumnsCurrentTrades["OldGL"].selected = false;
    gsWLColumnsCurrentTrades["PurchaseDate"] = clone(gsWLColumnsAll["PurchaseDate"]);
    gsWLColumnsCurrentTrades["PurchaseDate"].selected = false;
    gsWLColumnsCurrentTrades["DivPercent"] = clone(gsWLColumnsAll["DivPercent"]);
    gsWLColumnsCurrentTrades["DivPercent"].selected = false;
    gsWLColumnsCurrentTrades["DivDate"] = clone(gsWLColumnsAll["DivDate"]);
    gsWLColumnsCurrentTrades["DivDate"].selected = false;
    gsWLColumnsCurrentTrades["Amt"] = clone(gsWLColumnsAll["Amt"]);
    gsWLColumnsCurrentTrades["Amt"].selected = false;

    iOrder = 2;
    for (let key in gsWLColumnsCurrentTrades) {
        // check if the property/key is defined in the object itself, not in parent
        if (gsWLColumnsCurrentTrades.hasOwnProperty(key)) {
            gsWLColumnsCurrentTrades[key].sortorder = iOrder;
            iOrder = iOrder + 2;
        }
    }

}

function SetupWLColumnSelection(idxWL) {

    let s = SetupWLColumnSelectionHTML(idxWL, gWatchlists[idxWL].wlcolumnsselected);
    let iColNum = -2;
    let bFirstCol = true;
    let iTotalWidth = 0;
    for (let key in gWatchlists[idxWL].wlcolumnsselected) {
        if (gWatchlists[idxWL].wlcolumnsselected.hasOwnProperty(key)) {
            iColNum = iColNum + 2;
            gWatchlists[idxWL].wlcolumnsselectedtemp[key] = clone(gWatchlists[idxWL].wlcolumnsselected[key]);
            gWatchlists[idxWL].wlcolumnsselectedtemp[key].sortorder = iColNum;
            if (bFirstCol) {
                bFirstCol = false;
                iTotalWidth = iTotalWidth + 100 + gWatchlists[idxWL].wlcolumnsselected[key].width;
            } else {
                iTotalWidth = iTotalWidth + gWatchlists[idxWL].wlcolumnsselected[key].width;
            }
        }
    }

    document.getElementById("divWLSelectColumn").innerHTML = s;
    document.getElementById("divWLSelectColumn").style.width = (iTotalWidth + 50).toString() + "px";
}

function SetupWLColumnSelectionChangeOrder(idxWL) {

    let s = SetupWLColumnSelectionHTML(idxWL, gWatchlists[idxWL].wlcolumnsselectedtemp);
    document.getElementById("divWLSelectColumn").innerHTML = s;
}

function SetupWLColumnSelectionHTML(idxWL, wlcolumnsselected) {

    let sSelectedWidth = "70px";
    let sSortableWidth = "70px";
    let sSortOrderWidth = "100px";
    let sColumnName = "200px";

    let sLastWLName = gWatchlists[idxWL].name;
    let sLastWLAccountName = gWatchlists[idxWL].accountName;

    //let s = "<table id=\"tblWLColumnSelection\" style=\"table-layout:fixed;border-width:1px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
    let s = "<table id=\"tblWLColumnSelection\" style=\"width:100%;border-collapse:collapse;border: 0px solid black; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";

    //border-collapse:collapse; border: 0px solid black;background-color:" + gsWLTableBackgroundColor + "; width:100%;

    let iColCnt = 0;
    if (wlcolumnsselected != null) {
        for (let key in wlcolumnsselected) {
            if (wlcolumnsselected.hasOwnProperty(key)) {
                iColCnt++;
            }
        }
        let iColPosMax = ((iColCnt - 1) * 2) + 1;
        let iColPosMin = 1;
        let iColNum = -2;

        let sColBackgroundColor = "gsWLTableHeadingBackgroundColor"; //unselected

        let bFirstCol = true;
        s = s + "<tr>";
        for (let key in wlcolumnsselected) {
            if (wlcolumnsselected.hasOwnProperty(key)) {
                if (bFirstCol) {
                    bFirstCol = false;
                    s = s + "<td style=\"width:100px;text-align:left;vertical-align:top;border-width:0px;\">&nbsp;</td>";
                    s = s + "<td id=\"tdcolchg" + wlcolumnsselected[key].displayname + "\" style=\"background-color:" + sColBackgroundColor + "; width:" + wlcolumnsselected[key].width.toString() + "px;text-align:left;vertical-align:top;border-width:0px;\"><b><i>" + wlcolumnsselected[key].displayname + "</i></b></td>";
                } else {
                    if (wlcolumnsselected[key].selectedtomove) {
                        sColBackgroundColor = gsWLTableBackgroundColor;
                    } else {
                        sColBackgroundColor = gsWLTableHeadingBackgroundColor;
                    }
                    s = s + "<td id=\"tdcolchg" + wlcolumnsselected[key].displayname + "\" onclick=\"wlMarkSelectedColumnToMove(" + idxWL.toString() + ", '" + key + "')\" style=\"background-color:" + sColBackgroundColor + "; width:" + wlcolumnsselected[key].width.toString() + "px;text-align:left;vertical-align:top;border-width:0px;\"><b><i>" + wlcolumnsselected[key].displayname + "</i></b></td>";
                }
            }
        }
        s = s + "</tr>";

        bFirstCol = true;
        s = s + "<tr>";
        for (let key in wlcolumnsselected) {
            if (wlcolumnsselected.hasOwnProperty(key)) {
                if (bFirstCol) {
                    bFirstCol = false;
                    s = s + "<td style=\"width:100px;text-align:left;vertical-align:top;border-width:0px;\"><b>Selected</b></td>";
                }

                let sDisabled = "";
                if (key == gsSortOrderFields.Symbol) {
                    sDisabled = "disabled";
                }

                bSelected = wlcolumnsselected[key].selected;
                if (bSelected) {
                    s = s + "<td style=\"width:" + wlcolumnsselected[key].width.toString() + "px;text-align:left;vertical-align:top;border-width:0px;\">" +
                        "<input " + sDisabled + " checked type=\"checkbox\" value=\"\" onclick=\"wlMarkSelectedColumn(" + idxWL.toString() + ", '" + key + "')\">" +
                        "</td > ";
                } else {
                    s = s + "<td style=\"width:" + wlcolumnsselected[key].width.toString() + "px;text-align:left;vertical-align:top;border-width:0px;\">" +
                        "<input " + sDisabled + " type=\"checkbox\" value=\"\" onclick=\"wlMarkSelectedColumn(" + idxWL.toString() + ", '" + key + "')\">" +
                        "</td > ";
                }
            }
        }
        s = s + "</tr>";

        bFirstCol = true;
        s = s + "<tr>";
        for (let key in wlcolumnsselected) {
            if (wlcolumnsselected.hasOwnProperty(key)) {
                let sDisabled = "";
                if (bFirstCol) {
                    bFirstCol = false;
                    s = s + "<td style=\"width:100px;text-align:left;vertical-align:top;border-width:0px;\"><b>Sortable</b></td>";
                }

                if (key == gsSortOrderFields.Symbol) {
                    sDisabled = "disabled";
                }

                if (wlcolumnsselected[key].sortable) {
                    s = s + "<td style=\"width:" + wlcolumnsselected[key].width.toString() + "px;text-align:left;vertical-align:top;border-width:0px;\">" +
                        "<input " + sDisabled + "  id=\"chkwlcolumnsortable\" checked type=\"checkbox\" value=\"\" onclick=\"wlMarkSortableColumn(" + idxWL.toString() + ", '" + key + "')\">" +
                        "</td > ";
                } else {
                    s = s + "<td style=\"width:" + wlcolumnsselected[key].width.toString() + "px;text-align:left;vertical-align:top;border-width:0px;\">" +
                        "<input " + sDisabled + "  id=\"chkwlcolumnsortable\" type=\"checkbox\" value=\"\" onclick=\"wlMarkSortableColumn(" + idxWL.toString() + ", '" + key + "')\">" +
                        "</td > ";
                }
            }
        }
        s = s + "</tr>";

        //sort on this field
        bFirstCol = true;
        s = s + "<tr>";
        for (let key in wlcolumnsselected) {
            if (wlcolumnsselected.hasOwnProperty(key)) {
                let sDisabled = "";
                if (bFirstCol) {
                    bFirstCol = false;
                    s = s + "<td style=\"width:100px;text-align:left;vertical-align:top;border-width:0px;\"><b>Sort On This Column</b></td>";
                }

                if (wlcolumnsselected[key].sortable) {
                    sDisabled = "";
                } else {
                    sDisabled = "disabled";
                }

                if (wlcolumnsselected[key].sortonthisfield) {
                    s = s + "<td style=\"width:" + wlcolumnsselected[key].width.toString() + "px;text-align:left;vertical-align:top;border-width:0px;\">" +
                        "<input " + sDisabled + " id=\"rb" + key + "\" name=\"rbsortonthisfield\" checked type=\"radio\" >" +
                        "</td > ";
                } else {
                    s = s + "<td style=\"width:" + wlcolumnsselected[key].width.toString() + "px;text-align:left;vertical-align:top;border-width:0px;\">" +
                        "<input " + sDisabled + " id=\"rb" + key + "\" name=\"rbsortonthisfield\" type=\"radio\" >" +
                        "</td > ";
                }
            }
        }
        s = s + "</tr>";

        //sort asc desc
        bFirstCol = true;
        s = s + "<tr>";
        for (let key in wlcolumnsselected) {
            if (wlcolumnsselected.hasOwnProperty(key)) {
                let sDisabled = "";
                if (bFirstCol) {
                    bFirstCol = false;
                    s = s + "<td style=\"width:100px;text-align:left;vertical-align:top;border-width:0px;\"><b>Sort Asc/Desc</b></td>";
                }

                if (wlcolumnsselected[key].sortable) {
                    sDisabled = "";
                } else {
                    sDisabled = "disabled";
                }


                let sDownArrow = "&darr;";
                let sUpArrow = "&uarr;";

                if (wlcolumnsselected[key].sortascdesc == 0) {
                    s = s + "<td style=\"width:" + wlcolumnsselected[key].width.toString() + "px;text-align:left;vertical-align:top;border-width:0px;\">" +
                        "<div style=\"display:inline-table;\">" + 
                        "<input " + sDisabled + " id=\"rbasc" + key + "\" name=\"rbsortascdesc" + key + "\" checked type=\"radio\" >" +
                        "<span style=\"font-style:bold;vertical-align:top;\">" + sDownArrow + "</span><br/>" + "<input " + sDisabled + " id=\"rbdesc" + key + "\" name=\"rbsortascdesc" + key + "\" type=\"radio\" >" + "<span style=\"font-style:bold;vertical-align:top;\">" + sUpArrow + "</span>" +
                        "</div></td > ";
                } else {
                    s = s + "<td style=\"width:" + wlcolumnsselected[key].width.toString() + "px;text-align:left;vertical-align:top;border-width:0px;\">" +
                        "<div style=\"display:inline-table;\">" +
                        "<input " + sDisabled + " id=\"rbasc" + key + "\" name=\"rbsortascdesc" + key + "\" type=\"radio\" >" +
                        "<span style=\"font-style:bold;vertical-align:top;\">" + sDownArrow + "</span><br/>" + "<input " + sDisabled + " id=\"rbdesc" + key + "\" name=\"rbsortascdesc" + key + "\" checked type=\"radio\" >" + "<span style=\"font-style:bold;vertical-align:top;\">" + sUpArrow + "</span>" +
                        "</div></td > ";
                }
            }
        }
        s = s + "</tr>";

    }
    s = s + "</table>";

    s = s + "<br/><table id=\"tblWLColumnSelection\" style=\"width:300px;border-width:0px;\">";
    s = s + "<tr>";
    s = s + "<td style=\"vertical-align:top;border-width:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
        "<input style=\"border-radius:15px;\" type=\"button\" value=\"OK\" onclick=\"wlOKClickedColumnSelection(" + idxWL + ")\">" +
        "</td > ";
    s = s + "<td style=\"vertical-align:top;border-width:0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
        "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlCancelClickedColumnSelection(" + idxWL + ")\">" +
        "</td > ";

    s = s + "<td style=\"text-align:left;vertical-align:top;border-width:0px;\">";
    s = s + "<img title=\"Move the column to the left.\" width=\"20\" height=\"20\" style=\"vertical-align:middle\" src=\"arrow_left_icon.png\" onclick=\"wlChangeColumnOrder(1, " + idxWL.toString() + ")\" />";
    s = s + "&nbsp;&nbsp;&nbsp;<img title=\"Move the column to the right.\" width=\"20\" height=\"20\" style=\"vertical-align:middle\" src=\"arrow_right_icon.png\" onclick=\"wlChangeColumnOrder(2, " + idxWL.toString() + ")\" />";
    s = s + "</td > ";

    s = s + "</tr>";

    s = s + "</table>";
    return s;
}

function SetWait() {
    if (gbDoingStockPriceHistory) {
        document.body.style.cursor = "auto";

        document.pwdForm.txtSymbols.style.cursor = "auto";
        document.pwdForm.txtSymbols.disabled = false;

        document.pwdForm.btnGetTrades.style.cursor = "wait";
        document.pwdForm.btnGetTrades.disabled = true;

        document.pwdForm.btnGetStockPriceHistory.value = "Stop Price History";

        //document.pwdForm.btnGetStockPriceHistoryStart.style.cursor = "wait";
        //document.pwdForm.btnGetStockPriceHistoryStart.disabled = true;

        //document.pwdForm.btnGetStockPriceHistoryStop.style.cursor = "auto";
        //document.pwdForm.btnGetStockPriceHistoryStop.disabled = false;

        document.pwdForm.txtShortTime.style.cursor = "wait";
        document.pwdForm.txtShortTime.disabled = true;

        document.pwdForm.txtLongTime.style.cursor = "wait";
        document.pwdForm.txtLongTime.disabled = true;

        document.pwdForm.chkUseExtended.disabled = true;
        document.pwdForm.chkUseEnterToTogglePriceHistory.disabled = true;
        document.pwdForm.chkUseLastTradingDay.disabled = true;
        document.pwdForm.chkCollectDetail.disabled = true;

        document.pwdForm.txtStartDate.style.cursor = "wait";
        document.pwdForm.txtStartDate.disabled = true;

        document.pwdForm.txtEndDate.style.cursor = "wait";
        document.pwdForm.txtEndDate.disabled = true;

        document.pwdForm.btnWLSelect.style.cursor = "wait";
        document.pwdForm.btnWLSelect.disabled = true;
        document.pwdForm.btnWLReset.style.cursor = "wait";
        document.pwdForm.btnWLReset.disabled = true;
        document.pwdForm.btnWLImport.style.cursor = "wait";
        document.pwdForm.btnWLImport.disabled = true;
        document.pwdForm.btnSymSelect.style.cursor = "wait";
        document.pwdForm.btnSymSelect.disabled = true;
        document.pwdForm.btnSymFind.style.cursor = "wait";
        document.pwdForm.btnSymFind.disabled = true;

        document.getElementById("spanRunning").style.backgroundColor = "green";
        document.getElementById("spanRunning").style.Color = "white";
        document.getElementById("spanRunning").style.visibility = "visible";

    } else {
        document.body.style.cursor = "wait";
        document.pwdForm.txtSymbols.style.cursor = "wait";
        document.pwdForm.txtSymbols.disabled = true;

        if (!gbDoingGetTrades || gbDoingCreateOrders) {
            document.pwdForm.btnGetTrades.style.cursor = "wait";
            document.pwdForm.btnGetTrades.disabled = true;
        }

        document.pwdForm.btnGetStockPriceHistory.value = "Start Price History";
        document.pwdForm.btnGetStockPriceHistory.style.cursor = "wait";
        document.pwdForm.btnGetStockPriceHistory.disabled = true;

        //document.pwdForm.btnGetStockPriceHistoryStart.style.cursor = "wait";
        //document.pwdForm.btnGetStockPriceHistoryStart.disabled = true;

        //document.pwdForm.btnGetStockPriceHistoryStop.style.cursor = "wait";
        //document.pwdForm.btnGetStockPriceHistoryStop.disabled = true;

        document.pwdForm.txtShortTime.style.cursor = "wait";
        document.pwdForm.txtShortTime.disabled = true;

        document.pwdForm.txtLongTime.style.cursor = "wait";
        document.pwdForm.txtLongTime.disabled = true;

        document.pwdForm.chkUseExtended.disabled = true;
        document.pwdForm.chkUseEnterToTogglePriceHistory.disabled = true;
        document.pwdForm.chkUseLastTradingDay.disabled = true;
        document.pwdForm.chkCollectDetail.disabled = true;

        document.pwdForm.txtStartDate.style.cursor = "wait";
        document.pwdForm.txtStartDate.disabled = true;

        document.pwdForm.txtEndDate.style.cursor = "wait";
        document.pwdForm.txtEndDate.disabled = true;

        document.pwdForm.btnWLSelect.style.cursor = "wait";
        document.pwdForm.btnWLSelect.disabled = true;
        document.pwdForm.btnWLReset.style.cursor = "wait";
        document.pwdForm.btnWLReset.disabled = true;
        document.pwdForm.btnWLImport.style.cursor = "wait";
        document.pwdForm.btnWLImport.disabled = true;
        document.pwdForm.btnSymSelect.style.cursor = "wait";
        document.pwdForm.btnSymSelect.disabled = true;
        document.pwdForm.btnSymFind.style.cursor = "wait";
        document.pwdForm.btnSymFind.disabled = true;

        document.getElementById("spanRunning").style.backgroundColor = "green";
        document.getElementById("spanRunning").style.Color = "white";
        document.getElementById("spanRunning").style.visibility = "hidden";
    }
}

function SetWaitWL(idxWL) {
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    if ((document.getElementById("chkPlace" + sThisId) != null) && (!isUndefined(document.getElementById("chkPlace" + sThisId)))) {
        document.getElementById("chkPlace" + sThisId).disabled = true;
    }
    if ((document.getElementById("chkSave" + sThisId) != null) && (!isUndefined(document.getElementById("chkSave" + sThisId)))) {
        document.getElementById("chkSave" + sThisId).disabled = true;
    }
}

function ShowAutoUpdateDates(sAccountId, sSymbol, iStartDate, iUpdateDate, dAveragePrice, dQty, dPrice, dOldgl) {
    //let sSpanName = "SAU" + (giZIndex++).toString();
    //let sWidth = "300px";
    //let sThisDiv = "<div id=\"" + sSpanName + "\" style =\"width:" + sWidth + "; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
    //sThisDiv = sThisDiv + "<table style=\"width:" + sWidth + "; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
    //sThisDiv = sThisDiv + "<tr>";
    //sThisDiv = sThisDiv + "<th style=\"height:30px;text-align:right; vertical-align:middle; border-top-width:0px; border-bottom-width:0px; border-left-width:0px; border-right-width:0px; border-style:solid; border-spacing:0px; border-color: White\" onclick=\"wlRemoveDiv('" + sSpanName + "')\">&nbsp;&nbsp;&nbsp;&nbsp;X&nbsp;&nbsp;</th>";
    //sThisDiv = sThisDiv + "</tr>";
    let dGL = dAveragePrice + (dQty * dPrice);
    if (iUpdateDate == 0) {
        alert(sSymbol + " has not been automatically updated.");
    } else {
        let sMsg = sSymbol + " was updated using\n  start date: " + FormatDateWithTime(new Date(iStartDate), true, false) + "\n   end date: " + FormatDateWithTime(new Date(iUpdateDate), true, false) + 
            ".\nThe accumulated GL value is\n" + FormatDecimalNumber(dAveragePrice, 5, 2, "") + " + (" + FormatIntegerNumber(dQty, 3, "") + " * " + FormatDecimalNumber(dPrice, 5, 2, "") + ") = " + FormatDecimalNumber(dGL, 5, 2, "");
        //let sMsg = sSymbol + " was updated on " + FormatDateWithTime(new Date(iUpdateDate), true, false) + "\nusing " + FormatDateWithTime(new Date(iStartDate), true, false) + " as the start date" +
        //    ".\nThe accumulated GL value " + FormatDecimalNumber(dAveragePrice, 5, 2, "") + " + (" + FormatIntegerNumber(dQty, 3, "") + " * " + FormatDecimalNumber(dPrice, 5, 2, "") + ") = " + FormatDecimalNumber(dGL, 5, 2, "");
        if (dOldgl != 0) {
            sMsg = sMsg + "\nplus an OldGL value of " + FormatDecimalNumber(dOldgl, 5, 2, "") + " = " + FormatDecimalNumber(dGL + dOldgl, 5, 2, "") + ".";
        } else {
            sMsg = sMsg + ".";
        }
        alert(sMsg);
    }
}

function ShowAddPopup(watchlistId, sLastWLAccountId) {

    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        gbDoingCreateOrders = true;

        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {
            let dt = new Date();

            let sThisDiv = "";

            let sThisId = "";

            sThisIdCurrentDiv = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
            sThisId = "AP" + gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

            sThisDiv = sThisDiv + "<div style=\"width:600px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
            sThisDiv = sThisDiv + "<tr>";

            sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:550px; text-align:center; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
                "Add Symbol</th>";
            sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:50px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\"><span class=\"close-btn\">&times;</span>&nbsp;&nbsp;</th>";

            sThisDiv = sThisDiv + "</tr>";
            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<th colspan=\"2\" style=\"text-align:left; vertical-align:middle; border-top-width:0px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";


            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

            sThisDiv = sThisDiv + "<td colspan=\"2\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Symbol:";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "<input title=\"Symbol\" id=\"txtwlsymbol" + sThisId + "\" name=\"txtwlsymbol" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"\">";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Description&nbsp;(max " + gisymbolDescriptionMax.toString() + " chars):";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "<input title=\"Description (max " + gisymbolDescriptionMax.toString() + " chars)\" id=\"txtwldescription" + sThisId + "\" name=\"txtwldescription" + sThisId + "\" type=\"search\" style=\"width:200px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"\">";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Catalyst&nbsp;Date&nbsp;(yyyy-mm-dd):";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "<input title=\"Catalyst Date(yyyy-mm-dd)\" id=\"txtwlcatalyst" + sThisId + "\" name=\"txtwlcatalsyt" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + FormatCurrentDateForTD() + "\">";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Acquired&nbsp;Date&nbsp;(yyyy-mm-dd):";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "<input title=\"Acquired Date(yyyy-mm-dd)\" id=\"txtwlacquired" + sThisId + "\" name=\"txtwlacquired" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + FormatCurrentDateForTD() + "\">";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Old&nbsp;GL(xx.yy):";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "<input title=\"Old GL (xx.yy)\" id=\"txtwloldgl" + sThisId + "\" name=\"txtwloldgl" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"0\">";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "</tr>";
            sThisDiv = sThisDiv + "</table>";

            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:right; vertical-align:top;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"OK\" onclick=\"wlAddSymbol(" + idxWL.toString() + ",'" + sThisId + "') \">" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:left; vertical-align:top;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "</table></th></tr></table></div>";

            if (document.getElementById(sThisId) == null) {

                let iDetailTop = document.getElementById(sThisIdCurrentDiv).offsetTop + giPopupOffset - document.getElementById(sThisIdCurrentDiv).scrollTop;
                let iDetailLeft = (document.getElementById(sThisIdCurrentDiv).clientWidth / 2 - 300) + document.getElementById(sThisIdCurrentDiv).offsetLeft + 10;

                AddDiv(sThisId, sThisDiv, iDetailTop, iDetailLeft);
                if (document.getElementById(sThisId) != null) {
                    //do settimeout here
                    window.setTimeout("PutPopupOnTop('" + sThisId + "')", 100);
                }
            }
        } else {
            gbDoingCreateOrders = false;
        }
    }
}

function ShowChangePopup(watchlistId, sLastWLAccountId) {

    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        gbDoingCreateOrders = true;

        let aSelected = {
            "symbol": "",
            "acquireddate": "",
            "catalystdate": "",
            "description": "",
            "oldgl": 0
        };

        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {

            let iNumSelected = 0;
            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
                    iNumSelected++;
                    aSelected.symbol = gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                    aSelected.acquireddate = gWatchlists[idxWL].WLItems[idxWLItem].purchasedDate;
                    aSelected.catalystdate = gWatchlists[idxWL].WLItems[idxWLItem].catalystDate;
                    aSelected.description = gWatchlists[idxWL].WLItems[idxWLItem].symbolDescription;
                    aSelected.oldgl = gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.oldgl;
                }
            }

            if (iNumSelected == 0) {
                alert("Please select at least one symbol to change.");
                gbDoingCreateOrders = false;
                return;
            } else if (iNumSelected > 1) {
                gbDoingCreateOrders = false;
                ShowChangePopupSelection(watchlistId, sLastWLAccountId);
                return;
            }

            let sThisDiv = "";

            let sThisId = "";

            sThisIdCurrentDiv = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
            sThisId = "AP" + gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

            sThisDiv = sThisDiv + "<div style=\"width:600px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
            sThisDiv = sThisDiv + "<tr>";

            sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:550px; text-align:center; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
                "Changing Symbol (" + aSelected.symbol + ")</th>";
            sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:50px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\"><span class=\"close-btn\">&times;</span>&nbsp;&nbsp;</th>";

            sThisDiv = sThisDiv + "</tr>";
            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<th colspan=\"2\" style=\"text-align:left; vertical-align:middle; border-top-width:0px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";


            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

            sThisDiv = sThisDiv + "<td colspan=\"2\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Description&nbsp;(max " + gisymbolDescriptionMax.toString() + " chars):";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";

            if (iNumSelected == 1) {
                sThisDiv = sThisDiv + "<input title=\"Description (max " + gisymbolDescriptionMax.toString() + " chars)\" id=\"txtwldescription" + sThisId + "\" name=\"txtwldescription" + sThisId + "\" type=\"search\" style=\"width:200px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + aSelected.description + "\">";
            } else {
                sThisDiv = sThisDiv + "<input title=\"Description (max " + gisymbolDescriptionMax.toString() + " chars)\" id=\"txtwldescription" + sThisId + "\" name=\"txtwldescription" + sThisId + "\" type=\"search\" style=\"width:200px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"\">";
            }

            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Catalyst&nbsp;Date&nbsp;(yyyy-mm-dd):";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";

            if (iNumSelected == 1) {
                sThisDiv = sThisDiv + "<input title=\"Catalyst Date(yyyy-mm-dd)\" id=\"txtwlcatalyst" + sThisId + "\" name=\"txtwlcatalsyt" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + aSelected.catalystdate + "\">";
            } else {
                sThisDiv = sThisDiv + "<input title=\"Catalyst Date(yyyy-mm-dd)\" id=\"txtwlcatalyst" + sThisId + "\" name=\"txtwlcatalsyt" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + FormatCurrentDateForTD() + "\">";
            }

            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Acquired&nbsp;Date&nbsp;(yyyy-mm-dd):";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";

            if (iNumSelected == 1) {
                sThisDiv = sThisDiv + "<input title=\"Acquired Date(yyyy-mm-dd)\" id=\"txtwlacquired" + sThisId + "\" name=\"txtwlacquired" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + aSelected.acquireddate + "\">";
            } else {
                sThisDiv = sThisDiv + "<input title=\"Acquired Date(yyyy-mm-dd)\" id=\"txtwlacquired" + sThisId + "\" name=\"txtwlacquired" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + FormatCurrentDateForTD() + "\">";
            }

            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Old&nbsp;GL(xx.yy):";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";

            if (iNumSelected == 1) {
                sThisDiv = sThisDiv + "<input title=\"Old GL (xx.yy)\" id=\"txtwloldgl" + sThisId + "\" name=\"txtwloldgl" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + aSelected.oldgl + "\">";
            } else {
                sThisDiv = sThisDiv + "<input title=\"Old GL (xx.yy)\" id=\"txtwloldgl" + sThisId + "\" name=\"txtwloldgl" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"\">";
            }

            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "</tr>";
            sThisDiv = sThisDiv + "</table>";

            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:right; vertical-align:top;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"OK\" onclick=\"wlChangeSymbols(1, " + idxWL.toString() + ", '" + sThisId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:left; vertical-align:top;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "</table></th></tr></table></div>";

            if (document.getElementById(sThisId) == null) {

                let iDetailTop = document.getElementById(sThisIdCurrentDiv).offsetTop + giPopupOffset - document.getElementById(sThisIdCurrentDiv).scrollTop;
                let iDetailLeft = (document.getElementById(sThisIdCurrentDiv).clientWidth / 2 - 300) + document.getElementById(sThisIdCurrentDiv).offsetLeft + 10;

                AddDiv(sThisId, sThisDiv, iDetailTop, iDetailLeft);
                if (document.getElementById(sThisId) != null) {
                    //do settimeout here
                    window.setTimeout("PutPopupOnTop('" + sThisId + "')", 100);
                }
            }
        } else {
            gbDoingCreateOrders = false;
        }
    }
}

function ShowChangePopupSelection(watchlistId, sLastWLAccountId) {

    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        gbDoingCreateOrders = true;

        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {

            let sThisDiv = "";

            let sThisId = "";

            sThisIdCurrentDiv = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
            sThisId = "CPS" + gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

            sThisDiv = sThisDiv + "<div style=\"width:400px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
            sThisDiv = sThisDiv + "<tr>";

            sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:550px; text-align:center; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
                "Select What to Change</th>";
            sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:50px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\"><span class=\"close-btn\">&times;</span>&nbsp;&nbsp;</th>";

            sThisDiv = sThisDiv + "</tr>";
            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<th colspan=\"2\" style=\"text-align:left; vertical-align:middle; border-top-width:0px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";

            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"height: 30px; width:200px; text-align:center; vertical-align:middle;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Description\" onclick=\"ShowChangeSymbolFieldPopup(1, '" + watchlistId + "', '" + sLastWLAccountId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"height: 30px; width:200px; text-align:center; vertical-align:middle;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Catalyst Date\" onclick=\"ShowChangeSymbolFieldPopup(2, '" + watchlistId + "', '" + sLastWLAccountId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"height: 30px; width:200px; text-align:center; vertical-align:middle;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Acquired Date\" onclick=\"ShowChangeSymbolFieldPopup(3, '" + watchlistId + "', '" + sLastWLAccountId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";
            sThisDiv = sThisDiv + "</table>";

            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:left; vertical-align:top;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "</table></th></tr></table></div>";

            if (document.getElementById(sThisId) == null) {

                let iDetailTop = document.getElementById(sThisIdCurrentDiv).offsetTop + giPopupOffset - document.getElementById(sThisIdCurrentDiv).scrollTop;
                let iDetailLeft = (document.getElementById(sThisIdCurrentDiv).clientWidth / 2 - 200) + document.getElementById(sThisIdCurrentDiv).offsetLeft + 10;

                AddDiv(sThisId, sThisDiv, iDetailTop, iDetailLeft);
                if (document.getElementById(sThisId) != null) {
                    //do settimeout here
                    window.setTimeout("PutPopupOnTop('" + sThisId + "')", 100);
                }
            }
        } else {
            gbDoingCreateOrders = false;
        }
    }
}

function ShowChangeSymbolFieldPopup(iWhatToChange, watchlistId, sLastWLAccountId) {
    let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
    if (idxWL != -1) {
        let sThisDiv = "";

        let sThisId = "";

        sThisIdCurrentDiv = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
        sThisIdToRemove = "CPS" + gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
        sThisId = "CP" + iWhatToChange.toString() + gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

        wlDoRemoveDivPopupNoClear(sThisIdToRemove);

        sThisDiv = sThisDiv + "<div style=\"width:600px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
        sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
        sThisDiv = sThisDiv + "<tr>";

        let sOnClick = "";
        switch (iWhatToChange) {
            case 1: {
                sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:550px; text-align:center; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
                    "Change Description</th>";
                sOnClick = "wlChangeSymbols(4, " + idxWL.toString() + ", '" + sThisId + "')";
                break;
            }
            case 2: {
                sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:550px; text-align:center; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
                    "Change Catalyst Date</th>";
                sOnClick = "wlChangeSymbols(3, " + idxWL.toString() + ", '" + sThisId + "')";
                break;
            }
            case 3: {
                sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:550px; text-align:center; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
                    "Change Acquired Date</th>";
                sOnClick = "wlChangeSymbols(2, " + idxWL.toString() + ", '" + sThisId + "')";
                break;
            }
        }

        sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:50px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\"><span class=\"close-btn\">&times;</span>&nbsp;&nbsp;</th>";

        sThisDiv = sThisDiv + "</tr>";
        sThisDiv = sThisDiv + "<tr>";
        sThisDiv = sThisDiv + "<th colspan=\"2\" style=\"text-align:left; vertical-align:middle; border-top-width:0px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";


        sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

        sThisDiv = sThisDiv + "<td colspan=\"2\" style=\"border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "</tr>";

        if (iWhatToChange == 1) {
            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Description&nbsp;(max " + gisymbolDescriptionMax.toString() + " chars):";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "<input title=\"Description (max " + gisymbolDescriptionMax.toString() + " chars)\" id=\"txtwldescription" + sThisId + "\" name=\"txtwldescription" + sThisId + "\" type=\"search\" style=\"width:200px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"\">";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";
        }

        if (iWhatToChange == 2) {
            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Catalyst&nbsp;Date&nbsp;(yyyy-mm-dd):";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "<input title=\"Catalyst Date(yyyy-mm-dd)\" id=\"txtwlcatalyst" + sThisId + "\" name=\"txtwlcatalsyt" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + FormatCurrentDateForTD() + "\">";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";
        }

        if (iWhatToChange == 3) {
            sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
            sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "Acquired&nbsp;Date&nbsp;(yyyy-mm-dd):";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";
            sThisDiv = sThisDiv + "<input title=\"Acquired Date(yyyy-mm-dd)\" id=\"txtwlacquired" + sThisId + "\" name=\"txtwlacquired" + sThisId + "\" type=\"search\" style=\"width:95px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + FormatCurrentDateForTD() + "\">";
            sThisDiv = sThisDiv + "</td>";
            sThisDiv = sThisDiv + "</tr>";
        }


        sThisDiv = sThisDiv + "<tr>";
        sThisDiv = sThisDiv + "</tr>";
        sThisDiv = sThisDiv + "</table>";

        sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

        sThisDiv = sThisDiv + "<tr>";
        sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "</tr>";

        sThisDiv = sThisDiv + "<tr>";

        sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:right; vertical-align:top;border-style:none;\">" +
            "<input style=\"border-radius:15px;\" type=\"button\" value=\"OK\" onclick=\"" + sOnClick + "\">" +
            "</td > ";
        sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:right; vertical-align:top;border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:left; vertical-align:top;border-style:none;\">" +
            "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\">" +
            "</td > ";
        sThisDiv = sThisDiv + "</tr>";

        sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "</tr>";

        sThisDiv = sThisDiv + "</table></th></tr></table></div>";

        if (document.getElementById(sThisId) == null) {

            let iDetailTop = document.getElementById(sThisIdCurrentDiv).offsetTop + giPopupOffset - document.getElementById(sThisIdCurrentDiv).scrollTop;
            let iDetailLeft = (document.getElementById(sThisIdCurrentDiv).clientWidth / 2 - 300) + document.getElementById(sThisIdCurrentDiv).offsetLeft + 10;

            AddDiv(sThisId, sThisDiv, iDetailTop, iDetailLeft);
            if (document.getElementById(sThisId) != null) {
                //do settimeout here
                window.setTimeout("PutPopupOnTop('" + sThisId + "')", 100);
            }
        }
    } else {
        gbDoingCreateOrders = false;
    }
}

function ShowChangeWLSettingFieldPopup(iWhatToChange, idxWL, sThisIdToRemove) {
    let sThisDiv = "";

    let sThisId = "";

    sThisIdCurrentDiv = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    sThisId = "CWLS" + iWhatToChange.toString() + gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

    let swlname = gWatchlists[idxWL].name;

    wlDoRemoveDivPopupNoClear(sThisIdToRemove);

    sThisDiv = sThisDiv + "<div style=\"width:600px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
    sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
    sThisDiv = sThisDiv + "<tr>";

    let sOnClick = "";
    switch (iWhatToChange) {
        case 1: { //change wl name
            sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:550px; text-align:center; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
                "Change the Watchlist Name</th>";
            sOnClick = "wlChangeSetting(1, " + idxWL.toString() + ", '" + sThisId + "')";
            break;
        }
    }

    sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:50px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\"><span class=\"close-btn\">&times;</span>&nbsp;&nbsp;</th>";

    sThisDiv = sThisDiv + "</tr>";
    sThisDiv = sThisDiv + "<tr>";
    sThisDiv = sThisDiv + "<th colspan=\"2\" style=\"text-align:left; vertical-align:middle; border-top-width:0px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";


    sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

    sThisDiv = sThisDiv + "<td colspan=\"2\" style=\"border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "</tr>";

    if (iWhatToChange == 1) {
        sThisDiv = sThisDiv + "<tr style=\"height:30px;\">";
        sThisDiv = sThisDiv + "<td style=\"width:250px; text-align:right; vertical-align:middle; border-style:none;\" >";
        sThisDiv = sThisDiv + "Watchlist&nbsp;Name&nbsp;(max " + giwlnameMax.toString() + " chars):";
        sThisDiv = sThisDiv + "</td>";
        sThisDiv = sThisDiv + "<td style=\"width:350px; text-align:left; vertical-align:middle; border-style:none;\" >";
        sThisDiv = sThisDiv + "<input title=\"Watchlist Name (max " + giwlnameMax.toString() + " chars)\" id=\"txtwlname" + sThisId + "\" name=\"txtwlname" + sThisId + "\" type=\"search\" style=\"width:200px;font-family:Arial,Helvetica, sans-serif; font-size:10pt; \" value=\"" + swlname + "\">";
        sThisDiv = sThisDiv + "</td>";
        sThisDiv = sThisDiv + "</tr>";
    }

    sThisDiv = sThisDiv + "<tr>";
    sThisDiv = sThisDiv + "</tr>";
    sThisDiv = sThisDiv + "</table>";

    sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:600px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

    sThisDiv = sThisDiv + "<tr>";
    sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "</tr>";

    sThisDiv = sThisDiv + "<tr>";

    sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:right; vertical-align:top;border-style:none;\">" +
        "<input style=\"border-radius:15px;\" type=\"button\" value=\"OK\" onclick=\"" + sOnClick + "\">" +
        "</td > ";
    sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:right; vertical-align:top;border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:left; vertical-align:top;border-style:none;\">" +
        "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\">" +
        "</td > ";
    sThisDiv = sThisDiv + "</tr>";

    sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "</tr>";

    sThisDiv = sThisDiv + "</table></th></tr></table></div>";

    if (document.getElementById(sThisId) == null) {

        let iDetailTop = document.getElementById(sThisIdCurrentDiv).offsetTop + giPopupOffset - document.getElementById(sThisIdCurrentDiv).scrollTop;
        let iDetailLeft = (document.getElementById(sThisIdCurrentDiv).clientWidth / 2 - 300) + document.getElementById(sThisIdCurrentDiv).offsetLeft + 10;

        AddDiv(sThisId, sThisDiv, iDetailTop, iDetailLeft);
        if (document.getElementById(sThisId) != null) {
            //do settimeout here
            window.setTimeout("PutPopupOnTop('" + sThisId + "')", 100);
        }
    }
}

function ShowCopyPastePopupSelection(idxWL) {
    let sThisDiv = "";

    let sThisId = "";

    sThisIdCurrentDiv = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
    sThisId = "CPPS" + gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

    sThisDiv = sThisDiv + "<div style=\"width:400px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
    sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
    sThisDiv = sThisDiv + "<tr>";

    sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:550px; text-align:center; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
        "Copy or Paste</th>";
    sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:50px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\"><span class=\"close-btn\">&times;</span>&nbsp;&nbsp;</th>";

    sThisDiv = sThisDiv + "</tr>";
    sThisDiv = sThisDiv + "<tr>";
    sThisDiv = sThisDiv + "<th colspan=\"2\" style=\"text-align:left; vertical-align:middle; border-top-width:0px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";

    sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

    sThisDiv = sThisDiv + "<tr>";
    sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "</tr>";

    sThisDiv = sThisDiv + "<tr>";
    sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "<td style=\"height: 30px; width:200px; text-align:center; vertical-align:middle;border-style:none;\">" +
        "<input style=\"border-radius:15px;\" type=\"button\" value=\"Copy\" onclick=\"DoCopySymbols(2, " + idxWL.toString() + ", '" + sThisId + "')\">" +
        "</td > ";
    sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "</tr>";

    sThisDiv = sThisDiv + "<tr>";
    sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "<td style=\"height: 30px; width:200px; text-align:center; vertical-align:middle;border-style:none;\">" +
        "<input style=\"border-radius:15px;\" type=\"button\" value=\"Paste\" onclick=\"DoPasteSymbols(2, " + idxWL.toString() + ", '" + sThisId + "')\">" +
        "</td > ";
    sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "</tr>";

    sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "</tr>";
    sThisDiv = sThisDiv + "</table>";

    sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

    sThisDiv = sThisDiv + "<tr>";
    sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "</tr>";

    sThisDiv = sThisDiv + "<tr>";
    sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:left; vertical-align:top;border-style:none;\">" +
        "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\">" +
        "</td > ";
    sThisDiv = sThisDiv + "</tr>";

    sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
        "&nbsp;" +
        "</td > ";
    sThisDiv = sThisDiv + "</tr>";

    sThisDiv = sThisDiv + "</table></th></tr></table></div>";

    if (document.getElementById(sThisId) == null) {

        let iDetailTop = document.getElementById(sThisIdCurrentDiv).offsetTop + giPopupOffset - document.getElementById(sThisIdCurrentDiv).scrollTop;
        let iDetailLeft = (document.getElementById(sThisIdCurrentDiv).clientWidth / 2 - 200) + document.getElementById(sThisIdCurrentDiv).offsetLeft + 10;

        AddDiv(sThisId, sThisDiv, iDetailTop, iDetailLeft);
        if (document.getElementById(sThisId) != null) {
            //do settimeout here
            window.setTimeout("PutPopupOnTop('" + sThisId + "')", 100);
        }
    }
}

function ShowDeletePopupSelection(watchlistId, sLastWLAccountId) {
    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        gbDoingCreateOrders = true;

        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {
            let sThisDiv = "";
            let sThisId = "";

            sThisIdCurrentDiv = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
            sThisId = "DSDWPS" + gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

            sThisDiv = sThisDiv + "<div style=\"width:400px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
            sThisDiv = sThisDiv + "<tr>";

            sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:550px; text-align:center; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
                "Delete Symbols or Delete Watchlist</th>";
            sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:50px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\"><span class=\"close-btn\">&times;</span>&nbsp;&nbsp;</th>";

            sThisDiv = sThisDiv + "</tr>";
            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<th colspan=\"2\" style=\"text-align:left; vertical-align:middle; border-top-width:0px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";

            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"height: 30px; width:200px; text-align:center; vertical-align:middle;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Delete Symbols\" onclick=\"DoWLDeleteSymbols(1, " + idxWL.toString() + ", '" + sThisId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"height: 30px; width:200px; text-align:center; vertical-align:middle;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Delete Watchlist\" onclick=\"DoWLDeleteSymbols(2, " + idxWL.toString() + ", '" + sThisId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";
            sThisDiv = sThisDiv + "</table>";

            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:left; vertical-align:top;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "</table></th></tr></table></div>";

            if (document.getElementById(sThisId) == null) {

                let iDetailTop = document.getElementById(sThisIdCurrentDiv).offsetTop + giPopupOffset - document.getElementById(sThisIdCurrentDiv).scrollTop;
                let iDetailLeft = (document.getElementById(sThisIdCurrentDiv).clientWidth / 2 - 200) + document.getElementById(sThisIdCurrentDiv).offsetLeft + 10;

                AddDiv(sThisId, sThisDiv, iDetailTop, iDetailLeft);
                if (document.getElementById(sThisId) != null) {
                    //do settimeout here
                    window.setTimeout("PutPopupOnTop('" + sThisId + "')", 100);
                }
            }
        } else {
            gbDoingCreateOrders = false;
        }
    }
}

function ShowGLInitializePopupSelection(watchlistId, sLastWLAccountId) {
    let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
    if (idxWL != -1) {
        let sThisDiv = "";
        let sThisId = "";

        sThisIdCurrentDiv = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
        sThisId = "GLUPS" + gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

        sThisDiv = sThisDiv + "<div style=\"width:400px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
        sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
        sThisDiv = sThisDiv + "<tr>";

        sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:550px; text-align:center; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
            "Initialize the Selected Symbols or All Symbols</th>";
        sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:50px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\"><span class=\"close-btn\">&times;</span>&nbsp;&nbsp;</th>";

        sThisDiv = sThisDiv + "</tr>";
        sThisDiv = sThisDiv + "<tr>";
        sThisDiv = sThisDiv + "<th colspan=\"2\" style=\"text-align:left; vertical-align:middle; border-top-width:0px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";

        sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

        sThisDiv = sThisDiv + "<tr>";
        sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "</tr>";

        sThisDiv = sThisDiv + "<tr>";
        sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "<td style=\"height: 30px; width:200px; text-align:center; vertical-align:middle;border-style:none;\">" +
            "<input style=\"border-radius:15px;\" type=\"button\" value=\"Initialize Selected Symbols\" onclick=\"DoWLInitializeGLSymbols(1, " + idxWL.toString() + ", '" + sThisId + "')\">" +
            "</td > ";
        sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "</tr>";

        sThisDiv = sThisDiv + "<tr>";
        sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "<td style=\"height: 30px; width:200px; text-align:center; vertical-align:middle;border-style:none;\">" +
            "<input style=\"border-radius:15px;\" type=\"button\" value=\"Initialize All Symbols\" onclick=\"DoWLInitializeGLSymbols(2, " + idxWL.toString() + ", '" + sThisId + "')\">" +
            "</td > ";
        sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "</tr>";

        sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "</tr>";
        sThisDiv = sThisDiv + "</table>";

        sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

        sThisDiv = sThisDiv + "<tr>";
        sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "</tr>";

        sThisDiv = sThisDiv + "<tr>";
        sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:left; vertical-align:top;border-style:none;\">" +
            "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\">" +
            "</td > ";
        sThisDiv = sThisDiv + "</tr>";

        sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
            "&nbsp;" +
            "</td > ";
        sThisDiv = sThisDiv + "</tr>";

        sThisDiv = sThisDiv + "</table></th></tr></table></div>";

        if (document.getElementById(sThisId) == null) {

            let iDetailTop = document.getElementById(sThisIdCurrentDiv).offsetTop + giPopupOffset - document.getElementById(sThisIdCurrentDiv).scrollTop;
            let iDetailLeft = (document.getElementById(sThisIdCurrentDiv).clientWidth / 2 - 200) + document.getElementById(sThisIdCurrentDiv).offsetLeft + 10;

            AddDiv(sThisId, sThisDiv, iDetailTop, iDetailLeft);
            if (document.getElementById(sThisId) != null) {
                //do settimeout here
                window.setTimeout("PutPopupOnTop('" + sThisId + "')", 100);
            }
        }
    } else {
        gbDoingCreateOrders = false;
        DoGetTDData();
    }
}

function ShowIndexes(ev) {
    if (!gbDoingShowSection) {
        gbDoingShowSection = true;
        DisableAllShow();
        let bChecked = ev.srcElement.checked;
        setTimeout("ShowIndexesLater(true, " + bChecked + ")", 5);
    } else {
        document.getElementById("chkShowIndexes").checked = !document.getElementById("chkShowIndexes").checked;
    }
}

function ShowIndexesLater(bSetCookie, bChecked) {
    if (bSetCookie) {
        giSectionHeights.Indexes.lastselected = !giSectionHeights.Indexes.lastselected;
        if (giSectionHeights.Indexes.lastselected) {
            document.getElementById("divIndexDisplay").style.display = "block";
            MoveDivs(true, giSectionHeights.Indexes.height);
        } else {
            document.getElementById("divIndexDisplay").style.display = "none";
            MoveDivs(false, giSectionHeights.Indexes.height);
        }
        setCookie(gsSectionDisplayCookieName, SetCurrentCookieSections(), 30);
        document.getElementById("chkShowIndexes").checked = giSectionHeights.Indexes.lastselected;
        EnableAllShow();
    } else {
        if (bChecked) {
            document.getElementById("divIndexDisplay").style.display = "block";
            MoveDivs(true, giSectionHeights.Indexes.height);
        } else {
            document.getElementById("divIndexDisplay").style.display = "none";
            MoveDivs(false, giSectionHeights.Indexes.height);
        }
    }
    gbDoingShowSection = false;
}

function ShowIndexSelection(ev) {
    if (!gbDoingShowSection) {
        gbDoingShowSection = true;
        DisableAllShow();
        let bChecked = ev.srcElement.checked;
        setTimeout("ShowIndexSelectionLater(true, " + bChecked + ")", 5);
    } else {
        document.getElementById("chkShowIndexSelection").checked = !document.getElementById("chkShowIndexSelection").checked;
    }
}

function ShowIndexSelectionLater(bSetCookie, bChecked) {
    if (bSetCookie) {
        giSectionHeights.IndexSelection.lastselected = !giSectionHeights.IndexSelection.lastselected;
        if (giSectionHeights.IndexSelection.lastselected) {
            document.getElementById("tdIndexes").style.display = "block";
            MoveDivs(true, giSectionHeights.IndexSelection.height);
        } else {
            document.getElementById("tdIndexes").style.display = "none";
            MoveDivs(false, giSectionHeights.IndexSelection.height);
        }
        setCookie(gsSectionDisplayCookieName, SetCurrentCookieSections(), 30);
        document.getElementById("chkShowIndexSelection").checked = giSectionHeights.IndexSelection.lastselected;
        EnableAllShow();
    } else {
        if (bChecked) {
            document.getElementById("tdIndexes").style.display = "block";
            MoveDivs(true, giSectionHeights.IndexSelection.height);
        } else {
            document.getElementById("tdIndexes").style.display = "none";
            MoveDivs(false, giSectionHeights.IndexSelection.height);
        }
    }
    gbDoingShowSection = false;
}

function ShowPriceHistorySelection(ev) {
    if (!gbDoingShowSection) {
        gbDoingShowSection = true;
        DisableAllShow();
        let bChecked = ev.srcElement.checked;
        setTimeout("ShowPriceHistorySelectionLater(true, " + bChecked + ")", 5);
    } else {
        document.getElementById("chkShowPriceHistorySelection").checked = !document.getElementById("chkPriceHistorySelection").checked;
    }
}

function ShowPriceHistorySelectionLater(bSetCookie, bChecked) {
    if (bSetCookie) {
        giSectionHeights.PriceHistorySelection.lastselected = !giSectionHeights.PriceHistorySelection.lastselected;
        if (giSectionHeights.PriceHistorySelection.lastselected) {
            document.getElementById("divPriceHistorySelection").style.display = "block";
            MoveDivs(true, giSectionHeights.PriceHistorySelection.height);
        } else {
            document.getElementById("divPriceHistorySelection").style.display = "none";
            MoveDivs(false, giSectionHeights.PriceHistorySelection.height);
        }
        setCookie(gsSectionDisplayCookieName, SetCurrentCookieSections(), 30);
        document.getElementById("chkShowPriceHistorySelection").checked = giSectionHeights.PriceHistorySelection.lastselected;
        EnableAllShow();
    } else {
        if (bChecked) {
            document.getElementById("divPriceHistorySelection").style.display = "block";
            MoveDivs(true, giSectionHeights.PriceHistorySelection.height);
        } else {
            document.getElementById("divPriceHistorySelection").style.display = "none";
            MoveDivs(false, giSectionHeights.PriceHistorySelection.height);
        }
    }
    gbDoingShowSection = false;
}

function ShowProgress(bStart, bStop) {
    let elem = document.getElementById("myBar");
    if (giProgress >= 100) {
        elem.style.width = "100%";
    } else {
        elem.style.width = giProgress.toString() + "%";
    }
    if (bStart) {
        if (giProgressIntervalId != 0) {
            window.clearInterval(giProgressIntervalId);
        }
        giProgressIntervalId = window.setInterval("ShowProgress(false, false)", 50);
    } else if (bStop) {
        gbStopProgress = true;
        //if (giProgressIntervalId != 0) {
        //    window.clearInterval(giProgressIntervalId);
        //    giProgressIntervalId = 0;
        //}
        //elem.style.width = "0%";
    } else if (gbStopProgress) {
        if (giProgressIntervalId != 0) {
            window.clearInterval(giProgressIntervalId);
            giProgressIntervalId = 0;
        }
        gbStopProgress = false;
        elem.style.width = "0%";
    }
}

function ShowSettingsPopupSelection(watchlistId, sLastWLAccountId) {
    if (!gbDoingCreateOrders && !gbDoingGetTrades && !gbDoingGetTDData && !gbDoingStockPriceHistory) {
        gbDoingCreateOrders = true;

        let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
        if (idxWL != -1) {
            let sThisDiv = "";
            let sThisId = "";

            sThisIdCurrentDiv = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
            sThisId = "WLSET" + gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

            sThisDiv = sThisDiv + "<div style=\"width:400px; font-family:Arial, Helvetica, sans-serif; font-size:10pt;\">";
            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-width:1px; border-style:solid; border-spacing:1px; border-color:White; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";
            sThisDiv = sThisDiv + "<tr>";

            sThisDiv = sThisDiv + "<th style=\"height:24.5px; width:550px; text-align:center; vertical-align: middle; border-top-width:1px; border-bottom-width:1px; border-left-width:1px; border-right-width:0px; border-style:solid; border-spacing:1px; border-color:White\">" +
                "Watchlist Settings</th>";
            sThisDiv = sThisDiv + "<th title=\"Close\" style=\"width:50px; text-align:right; vertical-align:middle; border-top-width:1px; border-bottom-width:1px; border-left-width:0px; border-right-width:1px; border-style:solid; border-spacing:1px; border-color: White\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\"><span class=\"close-btn\">&times;</span>&nbsp;&nbsp;</th>";

            sThisDiv = sThisDiv + "</tr>";
            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<th colspan=\"2\" style=\"text-align:left; vertical-align:middle; border-top-width:0px; border-bottom-width:1px; border-left-width:1px; border-right-width:1px; border-style:solid;border-spacing:0px;border-color:White\" >";

            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"height: 30px; width:200px; text-align:center; vertical-align:middle;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Setup the Columns to Display\" onclick=\"DoWLSettings(1, " + idxWL.toString() + ", '" + sThisId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"height: 30px; width:200px; text-align:center; vertical-align:middle;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Change the Name of the Watchlist\" onclick=\"ShowChangeWLSettingFieldPopup(1, " + idxWL.toString() + ", '" + sThisId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";
            sThisDiv = sThisDiv + "</table>";

            sThisDiv = sThisDiv + "<table cellspacing=\"0\" cellpadding=\"0\" style=\"width:400px; background-color:" + gsWLTableHeadingBackgroundColor + "; border-style:none; font-family:Arial, Helvetica, sans-serif; font-size:10pt; \">";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<tr>";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:100px; text-align:right; vertical-align:top;border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "<td style=\"width:200px; text-align:left; vertical-align:top;border-style:none;\">" +
                "<input style=\"border-radius:15px;\" type=\"button\" value=\"Cancel\" onclick=\"wlDoRemoveDivPopup('" + sThisId + "')\">" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "<td colspan=\"3\" style=\"border-style:none;\">" +
                "&nbsp;" +
                "</td > ";
            sThisDiv = sThisDiv + "</tr>";

            sThisDiv = sThisDiv + "</table></th></tr></table></div>";

            if (document.getElementById(sThisId) == null) {

                let iDetailTop = document.getElementById(sThisIdCurrentDiv).offsetTop + giPopupOffset - document.getElementById(sThisIdCurrentDiv).scrollTop;
                let iDetailLeft = (document.getElementById(sThisIdCurrentDiv).clientWidth / 2 - 200) + document.getElementById(sThisIdCurrentDiv).offsetLeft + 10;

                AddDiv(sThisId, sThisDiv, iDetailTop, iDetailLeft);
                if (document.getElementById(sThisId) != null) {
                    //do settimeout here
                    window.setTimeout("PutPopupOnTop('" + sThisId + "')", 100);
                }
            }
        } else {
            gbDoingCreateOrders = false;
        }
    }
}

function showTDAPIError(sError, iTimeoutIn) {
    let iTimeout = 3000;
    if (!isUndefined(iTimeoutIn)) {
        iTimeout = iTimeoutIn;
    }
    document.getElementById("divTDAPIError").innerHTML = sError;
    if (document.getElementById("divTDAPIError").style.display == "none") {
        document.getElementById("divTDAPIError").style.display = "block";
        MoveDivs(true);
    }
    if (giAPIErrorTimeoutId != 0) {
        window.clearInterval(giAPIErrorTimeoutId);
    }
    giAPIErrorTimeoutId = window.setTimeout("hideTDAPIError()", iTimeout);

}

function ShowTradeHistorySelection(ev) {
    if (!gbDoingShowSection) {
        gbDoingShowSection = true;
        DisableAllShow();
        let bChecked = ev.srcElement.checked;
        setTimeout("ShowTradeHistorySelectionLater(true, " + bChecked + ")", 5);
    } else {
        document.getElementById("chkShowTradeHistorySelection").checked = !document.getElementById("chkTradeHistorySelection").checked;
    }
}

function ShowTradeHistorySelectionLater(bSetCookie, bChecked) {
    if (bSetCookie) {
        giSectionHeights.TradeHistorySelection.lastselected = !giSectionHeights.TradeHistorySelection.lastselected;
        if (giSectionHeights.TradeHistorySelection.lastselected) {
            document.getElementById("divTradeHistorySelection").style.display = "block";
            MoveDivs(true, giSectionHeights.TradeHistorySelection.height);
        } else {
            document.getElementById("divTradeHistorySelection").style.display = "none";
            MoveDivs(false, giSectionHeights.TradeHistorySelection.height);
        }
        setCookie(gsSectionDisplayCookieName, SetCurrentCookieSections(), 30);
        document.getElementById("chkShowTradeHistorySelection").checked = giSectionHeights.TradeHistorySelection.lastselected;
        EnableAllShow();
    } else {
        if (bChecked) {
            document.getElementById("divTradeHistorySelection").style.display = "block";
            MoveDivs(true, giSectionHeights.TradeHistorySelection.height);
        } else {
            document.getElementById("divTradeHistorySelection").style.display = "none";
            MoveDivs(false, giSectionHeights.TradeHistorySelection.height);
        }
    }
    gbDoingShowSection = false;
}

function sortByChgShortValue(a, b) {
    if ((a.shortPIP.high - a.shortPIP.low) < (b.shortPIP.high - b.shortPIP.low)) {
        return 1;
    }
    if ((a.shortPIP.high - a.shortPIP.low) > (b.shortPIP.high - b.shortPIP.low)) {
        return -1;
    }
    return 0;
}

function sortByDayGainPercent(a, b) {
    if (a.gainPercent < b.gainPercent) {
        return 1;
    }
    if (a.gainPercent > b.gainPercent) {
        return -1;
    }
    return 0;
}

function sortByHoldingGainPercent(a, b) {
    if (a.gainPercent < b.gainPercent) {
        return 1;
    }
    if (a.gainPercent > b.gainPercent) {
        return -1;
    }
    return 0;
}

function sortByPortfolioGain(a, b) {
    if (a.gain < b.gain) {
        return 1;
    }
    if (a.gain > b.gain) {
        return -1;
    }
    return 0;
}

function sortByPosAccountandSymbol(a, b) {
    let aName = a.symbol;
    let bName = b.symbol;
    let aAccountName = a.accountName;
    let bAccountName = b.accountName;
    let sX = "                                                  ";

    if (aName.length < 20) {
        aName = aName + sX.substr(0, 20 - aName.length);
    }
    if (bName.length < 20) {
        bName = bName + sX.substr(0, 20 - bName.length);
    }
    if (aAccountName.length < 40) {
        aAccountName = aAccountName + sX.substr(0, 40 - aAccountName.length);
    }
    if (bAccountName.length < 40) {
        bAccountName = bAccountName + sX.substr(0, 40 - bAccountName.length);
    }
    if ((aAccountName + aName) < (bAccountName + bName)) {
        return -1;    }
    if ((aAccountName + aName) > (bAccountName + bName)) {
        return 1;
    }
    return 0;
}

function sortByRank(a, b) {
    if (a.rank < b.rank) {
        return -1;
    }
    if (a.rank > b.rank) {
        return 1;
    }
    return 0;
}

function sortBySequenceId(a, b) {
    let aSequenceId = a.sequenceId;
    let bSequenceId = b.sequenceId;
    let aWLId = a.sWLId;
    let bWLId = b.sWLId;
    let sXId = "00000";
    let sX = "                                                  ";

    if (aSequenceId.length < 5) {
        aSequenceId = sXId.substr(0, 5 - aSequenceId.length) + aSequenceId;
    }
    if (bSequenceId.length < 5) {
        bSequenceId = sXId.substr(0, 5 - bSequenceId.length) + bSequenceId;
    }
    if (aWLId.length < 40) {
        aWLId = aWLId + sX.substr(0, 40 - aWLId.length);
    }
    if (bWLId.length < 40) {
        bWLId = bWLId + sX.substr(0, 40 - bWLId.length);
    }
    if ((aWLId + aSequenceId) < (bWLId + bSequenceId)) {
        return -1;
    }
    if ((aWLId + aSequenceId) > (bWLId + bSequenceId)) {
        return 1;
    }
    return 0;
}

function sortBySortorder(a, b) {
    let iReturn = 0;
    let aAmt = 0;
    let bAmt = 0;

    aAmt = a.sortorder;
    bAmt = b.sortorder;
    if (aAmt < bAmt) {
        iReturn = -1;
    }
    if (aAmt > bAmt) {
        iReturn = 1;
    }
    return iReturn;
}

function sortBySymbol(a, b) {
    let aSymbol = a.symbol;
    let bSymbol = b.symbol;
    let sX = "                                                  ";

    if (aSymbol.length < 20) {
        aSymbol = aSymbol + sX.substr(0, 20 - aSymbol.length);
    }
    if (bSymbol.length < 20) {
        bSymbol = bSymbol + sX.substr(0, 20 - bSymbol.length);
    }
    if (aSymbol < bSymbol) {
        return -1;
    }
    if (aSymbol > bSymbol) {
        return 1;
    }
    return 0;
}

function sortBySymbolAndAccountname(a, b) {
    let aSymbol = a.symbol;
    let bSymbol = b.symbol;
    let aAccountName = a.accountName;
    let bAccountName = b.accountName;
    let sX = "                                                  ";

    if (aSymbol.length < 20) {
        aSymbol = aSymbol + sX.substr(0, 20 - aSymbol.length);
    }
    if (bSymbol.length < 20) {
        bSymbol = bSymbol + sX.substr(0, 20 - bSymbol.length);
    }
    if (aAccountName.length < 40) {
        aAccountName = aAccountName + sX.substr(0, 40 - aAccountName.length);
    }
    if (bAccountName.length < 40) {
        bAccountName = bAccountName + sX.substr(0, 40 - bAccountName.length);
    }
    if ((aSymbol + aAccountName) < (bSymbol + bAccountName)) {
        return -1;
    }
    if ((aSymbol + aAccountName) > (bSymbol + bAccountName)) {
        return 1;
    }
    return 0;
}

function sortByWLAccountandWLName(a, b) {
    let aName = a.name;
    let bName = b.name;
    let aAccountName = a.accountName;
    let bAccountName = b.accountName;
    let sX = "                                                  ";

    if (aName.length < 20) {
        aName = aName + sX.substr(0, 20 - aName.length);
    }
    if (bName.length < 20) {
        bName = bName + sX.substr(0, 20 - bName.length);
    }
    if (aAccountName.length < 40) {
        aAccountName = aAccountName + sX.substr(0, 40 - aAccountName.length);
    }
    if (bAccountName.length < 40) {
        bAccountName = bAccountName + sX.substr(0, 40 - bAccountName.length);
    }
    if ((aAccountName + aName) < (bAccountName + bName)) {
        return 1;
//        return -1;
    }
    if ((aAccountName + aName) > (bAccountName + bName)) {
        return -1;
//        return 1;
    }
    return 0;
}

function sortWL(a, b) {
    let iReturn = 0;
    let aAmt = 0;
    let bAmt = 0;
    let aStr = "";
    let bStr = "";
    let bString = false;

    //let oWLDisplay = new WLDisplayed();
    let oWLItemDetail = new WLItemDetail();
    switch (a.sSortOrderFields) {
        case gsSortOrderFields.Amt:
            {
                aAmt = a.WLItemDetails[0].divAmount * a.WLItemDetails[0].shares;
                bAmt = b.WLItemDetails[0].divAmount * b.WLItemDetails[0].shares;
                break;
            }
        case gsSortOrderFields.Ask:
            {
                aAmt = a.WLItemDetails[0].askPrice;
                bAmt = b.WLItemDetails[0].askPrice;
                break;
            }
        case gsSortOrderFields.Bid:
            {
                aAmt = a.WLItemDetails[0].bidPrice;
                bAmt = b.WLItemDetails[0].bidPrice;
                break;
            }
        case gsSortOrderFields.CatalystDate:
            {
                let sX = "                                                  ";
                if (a.WLItemDetails[0].catalystDate.length < 20) {
                    aStr = a.WLItemDetails[0].catalystDate + sX.substr(0, 20 - a.WLItemDetails[0].catalystDate.length);
                }
                if (b.WLItemDetails[0].catalystDate.length < 20) {
                    bStr = b.WLItemDetails[0].catalystDate + sX.substr(0, 20 - b.WLItemDetails[0].catalystDate.length);
                }
                bString = true;
                break;
            }
        case gsSortOrderFields.ChgDollar:
            {
                aAmt = a.WLItemDetails[0].regularMarketNetChange;
                bAmt = b.WLItemDetails[0].regularMarketNetChange;
                break;
            }
        case gsSortOrderFields.ChgPercent:
            {
                aAmt = a.WLItemDetails[0].regularMarketPercentChangeInDouble;
                bAmt = b.WLItemDetails[0].regularMarketPercentChangeInDouble;
                break;
            }
        case gsSortOrderFields.CostPerShare:
            {
                aAmt = a.WLItemDetails[0].costPerShare;
                bAmt = b.WLItemDetails[0].costPerShare;
                break;
            }
        case gsSortOrderFields.DayGain:
            {
                aAmt = a.WLItemDetails[0].dayGain;
                bAmt = b.WLItemDetails[0].dayGain;
                break;
            }
        case gsSortOrderFields.DivDate:
            {
                aStr = a.WLItemDetails[0].divDate;
                bStr = b.WLItemDetails[0].divDate;
                bString = true;
                break;
            }
        case gsSortOrderFields.DivDollar:
            {
                aAmt = a.WLItemDetails[0].divAmount;
                bAmt = b.WLItemDetails[0].divAmount;
                break;
            }
        case gsSortOrderFields.DivPercent:
            {
                aAmt = a.WLItemDetails[0].divYield;
                bAmt = b.WLItemDetails[0].divYield;
                break;
            }
        case gsSortOrderFields.GainDollar:
            {
                aAmt = a.WLItemDetails[0].gain;
                bAmt = b.WLItemDetails[0].gain;
                break;
            }
        case gsSortOrderFields.GainPercent:
            {
                aAmt = a.WLItemDetails[0].gainPercent;
                bAmt = b.WLItemDetails[0].gainPercent;
                break;
            }
        case gsSortOrderFields.GL:
            {
                aAmt = a.WLItemDetails[0].averagePrice + (a.WLItemDetails[0].shares * a.WLItemDetails[0].lastPrice);
                bAmt = b.WLItemDetails[0].averagePrice + (b.WLItemDetails[0].shares * b.WLItemDetails[0].lastPrice);
                if (!isUndefined(gSymbolsGL[a.WLItemDetails[0].accountId + a.symbol])) {
                    aAmt = aAmt + a.WLItemDetails[0].oldgl;
                }
                if (!isUndefined(gSymbolsGL[b.WLItemDetails[0].accountId + b.symbol])) {
                    bAmt = bAmt + b.WLItemDetails[0].oldgl;
                }
                break;
            }
        case gsSortOrderFields.High:
            {
                aAmt = a.WLItemDetails[0].highPrice;
                bAmt = b.WLItemDetails[0].highPrice;
                break;
            }
        case gsSortOrderFields.Low:
            {
                aAmt = a.WLItemDetails[0].lowPrice;
                bAmt = b.WLItemDetails[0].lowPrice;
                break;
            }
        case gsSortOrderFields.MktValue:
            {
                aAmt = a.WLItemDetails[0].marketValue;
                bAmt = b.WLItemDetails[0].marketValue;
                break;
            }
        case gsSortOrderFields.OldGL:
            {
                aAmt = a.WLItemDetails[0].oldgl;
                bAmt = b.WLItemDetails[0].oldgl;
                break;
            }
        case gsSortOrderFields.PE:
            {
                aAmt = a.WLItemDetails[0].peRatio;
                bAmt = b.WLItemDetails[0].peRatio;
                break;
            }
        case gsSortOrderFields.Price:
            {
                aAmt = a.WLItemDetails[0].regularMarketLastPrice;
                bAmt = b.WLItemDetails[0].regularMarketLastPrice;
                break;
            }
        case gsSortOrderFields.PurchaseDate:
            {
                let sX = "                                                  ";
                if (a.WLItemDetails[0].purchasedDate.length < 20) {
                    aStr = a.WLItemDetails[0].purchasedDate + sX.substr(0, 20 - a.WLItemDetails[0].purchasedDate.length);
                }
                if (b.WLItemDetails[0].purchasedDate.length < 20) {
                    bStr = b.WLItemDetails[0].purchasedDate + sX.substr(0, 20 - b.WLItemDetails[0].purchasedDate.length);
                }
                bString = true;
                break;
            }
        case gsSortOrderFields.Qty:
            {
                aAmt = a.WLItemDetails[0].shares;
                bAmt = b.WLItemDetails[0].shares;
                break;
            }
        case gsSortOrderFields.Symbol:
            {
                let sX = "                                                  ";
                if (a.symbol.length < 20) {
                    aStr = a.symbol + sX.substr(0, 20 - a.symbol.length);
                }
                if (b.symbol.length < 20) {
                    bStr = b.symbol + sX.substr(0, 20 - b.symbol.length);
                }
                bString = true;
                break;
            }
        case gsSortOrderFields.SymbolDescription:
            {
                let sX = "                                                  ";
                if (a.symbolDescription.length < 50) {
                    aStr = a.symbolDescription + sX.substr(0, 50 - a.symbolDescription.length);
                }
                if (b.symbolDescription.length < 50) {
                    bStr = b.symbolDescription + sX.substr(0, 50 - b.symbolDescription.length);
                }
                bString = true;
                break;
            }
        default:
            {
                break;
            }
    }
    if (bString) {
        if (aStr < bStr) {
            iReturn = -1;
        }
        if (aStr > bStr) {
            iReturn = 1;
        }
    } else {
        if (aAmt < bAmt) {
            iReturn = -1;
        }
        if (aAmt > bAmt) {
            iReturn = 1;
        }
    }
    if (a.iSortOrderAscDesc != 0) {
        iReturn = iReturn * -1;
    }
    return iReturn;
}

function sortWLO(a, b) {
    let iReturn = 0;
    let aAmt = 0;
    let bAmt = 0;
    let aStr = "";
    let bStr = "";
    let bString = false;

    //let oWLItemDetail = new WLItemOrder();
    switch (a.sSortOrderFields) {
        case gsSortOrderFieldsO.Action:
            {
                let sX = "                                                  ";
                if (a.instruction.length < 20) {
                    aStr = a.instruction + sX.substr(0, 20 - a.instruction.length);
                }
                if (b.instruction.length < 20) {
                    bStr = b.instruction + sX.substr(0, 20 - b.instruction.length);
                }
                bString = true;
                break;
            }
        case gsSortOrderFieldsO.ActPrice:
            {
                aAmt = a.activationPrice;
                bAmt = b.activationPrice;
                break;
            }
        case gsSortOrderFieldsO.Price:
            {
                aAmt = a.price;
                bAmt = b.price;
                break;
            }
        case gsSortOrderFieldsO.Quantity:
            {
                aAmt = a.quantity;
                bAmt = b.quantity;
                break;
            }
        case gsSortOrderFieldsO.Reported:
            {
                let sX = "                                                  ";
                if (a.closeTime.length < 20) {
                    aStr = a.closeTime + sX.substr(0, 20 - a.closeTime.length);
                } else {
                    aStr = a.closeTime;
                }
                if (b.closeTime.length < 20) {
                    bStr = b.closeTime + sX.substr(0, 20 - b.closeTime.length);
                } else {
                    bStr = b.closeTime;
                }
                bString = true;
                break;
            }
        case gsSortOrderFieldsO.Status:
            {
                let sX = "                                                  ";
                if (a.status.length < 20) {
                    aStr = a.status + sX.substr(0, 20 - a.status.length);
                }
                if (b.status.length < 20) {
                    bStr = b.status + sX.substr(0, 20 - b.status.length);
                }
                bString = true;
                break;
            }
        case gsSortOrderFieldsO.Symbol:
            {
                let sX = "                                                  ";
                if (a.symbol.length < 20) {
                    aStr = a.symbol + sX.substr(0, 20 - a.symbol.length);
                }
                if (b.symbol.length < 20) {
                    bStr = b.symbol + sX.substr(0, 20 - b.symbol.length);
                }
                bString = true;
                break;
            }
        case gsSortOrderFieldsO.TimeEntered:
            {
                let sX = "                                                  ";
                if (a.enteredTime.length < 20) {
                    aStr = a.enteredTime + sX.substr(0, 20 - a.enteredTime.length);
                } else {
                    aStr = a.enteredTime;
                }
                if (b.enteredTime.length < 20) {
                    bStr = b.enteredTime + sX.substr(0, 20 - b.enteredTime.length);
                } else {
                    bStr = b.enteredTime;
                }
                bString = true;
                break;
            }
        case gsSortOrderFieldsO.TimeInForce:
            {
                let sX = "                                                  ";
                if (a.cancelTime.length < 20) {
                    aStr = a.cancelTime + sX.substr(0, 20 - a.cancelTime.length);
                } else {
                    aStr = a.cancelTime;
                }
                if (b.cancelTime.length < 20) {
                    bStr = b.cancelTime + sX.substr(0, 20 - b.cancelTime.length);
                } else {
                    bStr = b.cancelTime;
                }
                bString = true;
                break;
            }
        case gsSortOrderFieldsO.Type:
            {
                let sX = "                                                  ";
                if (a.orderType.length < 20) {
                    aStr = a.orderType + sX.substr(0, 20 - a.orderType.length);
                } else {
                    aStr = a.orderType;
                }
                if (b.orderType.length < 20) {
                    bStr = b.orderType + sX.substr(0, 20 - b.orderType.length);
                } else {
                    bStr = b.orderType;
                }
                bString = true;
                break;
            }
        default:
            {
                break;
            }
    }
    if (bString) {
        if (aStr < bStr) {
            iReturn = -1;
        }
        if (aStr > bStr) {
            iReturn = 1;
        }
    } else {
        if (aAmt < bAmt) {
            iReturn = -1;
        }
        if (aAmt > bAmt) {
            iReturn = 1;
        }
    }
    if (a.iSortOrderAscDesc != 0) {
        iReturn = iReturn * -1;
    }
    return iReturn;
}

function sortWLSO(a, b) {
    let iReturn = 0;
    let aAmt = 0;
    let bAmt = 0;
    let aStr = "";
    let bStr = "";
    let bString = false;

    //let oWLItemDetail = new WLItemSavedOrder();
    switch (a.sSortOrderFields) {
        case gsSortOrderFieldsSO.Action:
            {
                let sX = "                                                  ";
                if (a.instruction.length < 20) {
                    aStr = a.instruction + sX.substr(0, 20 - a.instruction.length);
                }
                if (b.instruction.length < 20) {
                    bStr = b.instruction + sX.substr(0, 20 - b.instruction.length);
                }
                bString = true;
                break;
            }
        case gsSortOrderFieldsSO.ActPrice:
            {
                aAmt = a.stopPriceOffset;
                bAmt = b.stopPriceOffset;
                break;
            }
        case gsSortOrderFieldsSO.Ask:
            {
                aAmt = a.askPrice;
                bAmt = b.askPrice;
                break;
            }
        case gsSortOrderFieldsSO.Bid:
            {
                aAmt = a.bidPrice;
                bAmt = b.bidPrice;
                break;
            }
        case gsSortOrderFieldsSO.Price:
            {
                aAmt = a.price;
                bAmt = b.price;
                break;
            }
        case gsSortOrderFieldsSO.Quantity:
            {
                aAmt = a.quantity;
                bAmt = b.quantity;
                break;
            }
        case gsSortOrderFieldsO.Symbol:
            {
                let sX = "                                                  ";
                if (a.symbol.length < 20) {
                    aStr = a.symbol + sX.substr(0, 20 - a.symbol.length);
                }
                if (b.symbol.length < 20) {
                    bStr = b.symbol + sX.substr(0, 20 - b.symbol.length);
                }
                bString = true;
                break;
            }
        case gsSortOrderFieldsSO.TimeEntered:
            {
                let sX = "                                                  ";
                if (a.savedTime.length < 20) {
                    aStr = a.savedTime + sX.substr(0, 20 - a.savedTime.length);
                } else {
                    aStr = a.savedTime;
                }
                if (b.savedTime.length < 20) {
                    bStr = b.savedTime + sX.substr(0, 20 - b.savedTime.length);
                } else {
                    bStr = b.savedTime;
                }
                bString = true;
                break;
            }
        case gsSortOrderFieldsSO.TimeInForce:
            {
                let sTmp = FormatDecimalNumber(a.price, 5, 2, "");
                let dPriceA = parseFloat(sTmp);
                let sTmpA = a.duration;
                if (sTmpA == "GOOD_TILL_CANCEL") {
                    sTmpA = "GTC";
                    if (dPriceA == 0.0) {
                        sTmpA = "GTC";
                    } else {
                        sTmpA = "GTC + ext.";
                    }
                } else {
                    sTmpA = sTmpA.toProperCase(true);
                }

                sTmp = FormatDecimalNumber(b.price, 5, 2, "");
                let dPriceB = parseFloat(sTmp);
                let sTmpB = b.duration;
                if (sTmpB == "GOOD_TILL_CANCEL") {
                    sTmpB = "GTC";
                    if (dPriceB == 0.0) {
                        sTmpB = "GTC";
                    } else {
                        sTmpB = "GTC + ext.";
                    }
                } else {
                    sTmpB = sTmpB.toProperCase(true);
                }

                let sX = "                                                  ";
                if (sTmpA.length < 20) {
                    aStr = sTmpA + sX.substr(0, 20 - sTmpA.length);
                } else {
                    aStr = sTmpA;
                }
                if (sTmpB.length < 20) {
                    bStr = sTmpB + sX.substr(0, 20 - sTmpB.length);
                } else {
                    bStr = sTmpB;
                }
                bString = true;
                break;
            }
        case gsSortOrderFieldsSO.Type:
            {
                let sX = "                                                  ";
                if (a.orderType.length < 20) {
                    aStr = a.orderType + sX.substr(0, 20 - a.orderType.length);
                } else {
                    aStr = a.orderType;
                }
                if (b.orderType.length < 20) {
                    bStr = b.orderType + sX.substr(0, 20 - b.orderType.length);
                } else {
                    bStr = b.orderType;
                }
                bString = true;
                break;
            }
        default:
            {
                break;
            }
    }
    if (bString) {
        if (aStr < bStr) {
            iReturn = -1;
        }
        if (aStr > bStr) {
            iReturn = 1;
        }
    } else {
        if (aAmt < bAmt) {
            iReturn = -1;
        }
        if (aAmt > bAmt) {
            iReturn = 1;
        }
    }
    if (a.iSortOrderAscDesc != 0) {
        iReturn = iReturn * -1;
    }
    return iReturn;
}

function UpdateOGLSymbol(sWhatToUpdate, sAccountIdIn, sSymbolIn, sSymbolDescIn, sOldGLIn) {
    /*sWhatToUpdate = 0 - just insert all and return symbolid, 1 - update/insert all fields, 2 - update/insert sym_description, 3 = update/insert oldgl */
    let sAccountId = sAccountIdIn;
    let sSymbol = sSymbolIn;
    let sSymbolDesc = Replace_XMLChar(sSymbolDescIn);
    let sOldGL = "";
    if (sOldGLIn == "") {
        sOldGL = FormatDecimalNumber(0, 3, 2, "");
    } else {
        sOldGL = FormatDecimalNumber(parseFloat(sOldGLIn), 3, 2, "");
    }
    let sAssetType = "EQUITY";
    if (!isUndefined(oMDQ[sSymbol])) {
        sAssetType = oMDQ[sSymbol].assetType;
    }

    //update/add the symbol 
    let s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "UpdateSymbol '" + sWhatToUpdate + "', '" + sSymbol + "', '" +
        sAccountId + "', '" + sSymbolDesc + "', '" +
        sAssetType + "', '" + sOldGL + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>True</returnsvalues>";
    s = s + "</command>";

    let sSymbolID = "";
    switch (PostWLHTTP(s, 1)) {
        case 0: //success
            {
                //should have new SymbolID in oCMTemp1
                if (oCMTemp1.length > 0) {
                    if (!isUndefined(oCMTemp1[0].symbolid)) {
                        sSymbolID = oCMTemp1[0].symbolid;
                    }
                }
                break;
            }
        default: //unknown error
            {
                break;
            }
    }
    return sSymbolID;
}

function UpdateSymbolsAfterGLUpdate(bFirstTime, iProgressIncrementIn, idxItemStart, idxWL, sSymbolsToChangeIn) {
    let iProgressIncrement = iProgressIncrementIn;

    let iRecsLimit = 4000;
    let sRecs = "";
    let sRecsSep = "";

    let aSymbolsToChange = sSymbolsToChangeIn.split("|");

    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = Math.floor(100 / (Math.floor(aSymbolsToChange.length / iRecsLimit) + 1));
        gsLastErrors.length = 0;
        gsAllSuccess.length = 0;
        ShowProgress(true, false);
    }

    //build array of records to insert
    //@p_symbol varchar(20),
    //@p_gl varchar(20),
    //@p_gllaststartdate varchar(20),
    //@p_gllastenddate varchar(20),
    sRecs = "";
    sRecsSep = "";
    for (let idxWLItem = idxItemStart; idxWLItem < aSymbolsToChange.length; idxWLItem++) {
        let sThisRec = aSymbolsToChange[idxWLItem];

        if ((sRecs + sThisRec + sRecsSep).length > iRecsLimit) {
            giProgress = giProgress + iProgressIncrement;
            if (UpdateWLDetailGLInfoRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
                if (gsLastError != "") {
                    gsLastErrors[gsLastErrors.length] = " Error updating symbols" + " -- " + gsLastError;
                } else {
                    gsLastErrors[gsLastErrors.length] = " Error updating symbols";
                }
            } else {
                gsAllSuccess[gsAllSuccess.length] = "Successfully updated symbols";
            }
            window.setTimeout("UpdateSymbolsAfterGLUpdate(false, " + iProgressIncrement.toString() + ", " + idxWLItem.toString() + ", " + idxWL.toString() + ", '" + sSymbolsToChangeIn + "')", 500);
            return;
        } else {
            sRecs = sRecs + sRecsSep + sThisRec;
            sRecsSep = "|";
        }
    }

    giProgress = giProgress + iProgressIncrement;
    if (UpdateWLDetailGLInfoRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
        if (gsLastError != "") {
            gsLastErrors[gsLastErrors.length] = " Error updating symbols" + " -- " + gsLastError;
        } else {
            gsLastErrors[gsLastErrors.length] = " Error updating symbols";
        }
    } else {
        gsAllSuccess[gsAllSuccess.length] = "Successfully updated symbols";
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
            gbDoResetWatchlists = true;
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    giProgress = 0;
    ShowProgress(false, true);
    gbDoingCreateOrders = false;
    DoGetTDData();
    GetTradesCanceled();
}

function UpdateSymbolsChangeAcquiredDate(bFirstTime, iProgressIncrementIn, idxItemStart, idxWL, sThisPopupId, sSymbolsToChangeIn) {
    let iProgressIncrement = iProgressIncrementIn;

    let iRecsLimit = 4000;
    let sRecs = "";
    let sRecsSep = "";

    let aSymbolsToChange = sSymbolsToChangeIn.split("|");

    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = Math.floor(100 / (Math.floor(aSymbolsToChange.length / iRecsLimit) + 1));
        gsLastErrors.length = 0;
        gsAllSuccess.length = 0;
        ShowProgress(true, false);
    }

    //build array of records to insert
    //@p_symbol varchar(20),
    //@p_gl varchar(20),
    //@p_gllaststartdate varchar(20),
    //@p_gllastenddate varchar(20),
    sRecs = "";
    sRecsSep = "";
    for (let idxWLItem = idxItemStart; idxWLItem < aSymbolsToChange.length; idxWLItem++) {
        let sThisRec = aSymbolsToChange[idxWLItem];

        if ((sRecs + sThisRec + sRecsSep).length > iRecsLimit) {
            giProgress = giProgress + iProgressIncrement;
            if (UpdateWLDetailAcquiredDateRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
                if (gsLastError != "") {
                    gsLastErrors[gsLastErrors.length] = " Error updating catalyst date" + " -- " + gsLastError;
                } else {
                    gsLastErrors[gsLastErrors.length] = " Error updating catalyst date";
                }
            } else {
                gsAllSuccess[gsAllSuccess.length] = "Successfully updated catalyst date";
            }
            window.setTimeout("UpdateSymbolsChangeAcquiredDate(false, " + iProgressIncrement.toString() + ", " + idxWLItem.toString() + ", " + idxWL.toString() + ", '" + sThisPopupId + "', '" + sSymbolsToChangeIn + "')", 500);
            return;
        } else {
            sRecs = sRecs + sRecsSep + sThisRec;
            sRecsSep = "|";
        }
    }

    giProgress = giProgress + iProgressIncrement;
    if (UpdateWLDetailAcquiredDateRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
        if (gsLastError != "") {
            gsLastErrors[gsLastErrors.length] = " Error updating catalyst date" + " -- " + gsLastError;
        } else {
            gsLastErrors[gsLastErrors.length] = " Error updating catalyst date";
        }
    } else {
        gsAllSuccess[gsAllSuccess.length] = "Successfully updated catalyst date";
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
            gbDoResetWatchlists = true;
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    giProgress = 0;
    ShowProgress(false, true);
    wlDoRemoveDivPopup(sThisPopupId);
}

function UpdateSymbolsChangeAll(idxWL, sThisPopupId, sSymbolToChangeIn, sAcquiredDateIn, sCatalystDateIn, sDescriptionIn, sOldGLIn) {
    //updating one symbol

    gsLastErrors.length = 0;
    gsAllSuccess.length = 0;

    if (UpdateWLSymbol(8, gWatchlists[idxWL].watchlistId, sAcquiredDateIn, sSymbolToChangeIn, sDescriptionIn, "", "", "", "", sOldGLIn, sCatalystDateIn) == "") {
        if (gsLastError != "") {
            gsLastErrors[gsLastErrors.length] = " Error updating symbol " + " -- " + gsLastError;
        } else {
            gsLastErrors[gsLastErrors.length] = " Error updating symbol ";
        }
    } else {
        gsAllSuccess[gsAllSuccess.length] = "Successfully updated symbol";
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
//            gbDoResetWatchlists = true;
            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
                    gWatchlists[idxWL].WLItems[idxWLItem].purchasedDate = sAcquiredDateIn;
                    gWatchlists[idxWL].WLItems[idxWLItem].catalystDate = sCatalystDateIn;
                    gWatchlists[idxWL].WLItems[idxWLItem].symbolDescription = sDescriptionIn;
                    gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.oldgl = parseFloat(sOldGLIn);
                    break;
                }
            }
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
            gbDoResetWatchlists = true;
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    wlDoRemoveDivPopup(sThisPopupId);
}

function UpdateSymbolsChangeCatalystDate(bFirstTime, iProgressIncrementIn, idxItemStart, idxWL, sThisPopupId, sSymbolsToChangeIn) {
    let iProgressIncrement = iProgressIncrementIn;

    let iRecsLimit = 4000;
    let sRecs = "";
    let sRecsSep = "";

    let aSymbolsToChange = sSymbolsToChangeIn.split("|");

    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = Math.floor(100 / (Math.floor(aSymbolsToChange.length / iRecsLimit) + 1));
        gsLastErrors.length = 0;
        gsAllSuccess.length = 0;
        ShowProgress(true, false);
    }

    //build array of records to insert
    //@p_symbol varchar(20),
    //@p_gl varchar(20),
    //@p_gllaststartdate varchar(20),
    //@p_gllastenddate varchar(20),
    sRecs = "";
    sRecsSep = "";
    for (let idxWLItem = idxItemStart; idxWLItem < aSymbolsToChange.length; idxWLItem++) {
        let sThisRec = aSymbolsToChange[idxWLItem];

        if ((sRecs + sThisRec + sRecsSep).length > iRecsLimit) {
            giProgress = giProgress + iProgressIncrement;
            if (UpdateWLDetailCatalystDateRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
                if (gsLastError != "") {
                    gsLastErrors[gsLastErrors.length] = " Error updating catalyst date" + " -- " + gsLastError;
                } else {
                    gsLastErrors[gsLastErrors.length] = " Error updating catalyst date";
                }
            } else {
                gsAllSuccess[gsAllSuccess.length] = "Successfully updated catalyst date";
            }
            window.setTimeout("UpdateSymbolsChangeCatalystDate(false, " + iProgressIncrement.toString() + ", " + idxWLItem.toString() + ", " + idxWL.toString() + ", '" + sThisPopupId + "', '" + sSymbolsToChangeIn + "')", 500);
            return;
        } else {
            sRecs = sRecs + sRecsSep + sThisRec;
            sRecsSep = "|";
        }
    }

    giProgress = giProgress + iProgressIncrement;
    if (UpdateWLDetailCatalystDateRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
        if (gsLastError != "") {
            gsLastErrors[gsLastErrors.length] = " Error updating catalyst date" + " -- " + gsLastError;
        } else {
            gsLastErrors[gsLastErrors.length] = " Error updating catalyst date";
        }
    } else {
        gsAllSuccess[gsAllSuccess.length] = "Successfully updated catalyst date";
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
            gbDoResetWatchlists = true;
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    giProgress = 0;
    ShowProgress(false, true);
    wlDoRemoveDivPopup(sThisPopupId);
}

function UpdateSymbolsChangeHidden(bFirstTime, iProgressIncrementIn, idxItemStart, idxWL, sSymbolsToChangeIn) {
    let iProgressIncrement = iProgressIncrementIn;

    let iRecsLimit = 4000;
    let sRecs = "";
    let sRecsSep = "";

    let aSymbolsToChange = sSymbolsToChangeIn.split("|");

    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = Math.floor(100 / (Math.floor(aSymbolsToChange.length / iRecsLimit) + 1));
        gsLastErrors.length = 0;
        gsAllSuccess.length = 0;
        ShowProgress(true, false);
    }

    //build array of records to insert
    //@p_symbol varchar(20),
    //@p_gl varchar(20),
    //@p_gllaststartdate varchar(20),
    //@p_gllastenddate varchar(20),
    sRecs = "";
    sRecsSep = "";
    for (let idxWLItem = idxItemStart; idxWLItem < aSymbolsToChange.length; idxWLItem++) {
        let sThisRec = aSymbolsToChange[idxWLItem];

        if ((sRecs + sThisRec + sRecsSep).length > iRecsLimit) {
            giProgress = giProgress + iProgressIncrement;
            if (UpdateWLDetailHiddenRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
                if (gsLastError != "") {
                    gsLastErrors[gsLastErrors.length] = " Error updating hidden" + " -- " + gsLastError;
                } else {
                    gsLastErrors[gsLastErrors.length] = " Error updating hidden";
                }
            } else {
                gsAllSuccess[gsAllSuccess.length] = "Successfully updated hidden";
            }
            window.setTimeout("UpdateSymbolsChangeHidden(false, " + iProgressIncrement.toString() + ", " + idxWLItem.toString() + ", " + idxWL.toString() + ", '" + sSymbolsToChangeIn + "')", 500);
            return;
        } else {
            sRecs = sRecs + sRecsSep + sThisRec;
            sRecsSep = "|";
        }
    }

    giProgress = giProgress + iProgressIncrement;
    if (UpdateWLDetailHiddenRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
        if (gsLastError != "") {
            gsLastErrors[gsLastErrors.length] = " Error updating hidden" + " -- " + gsLastError;
        } else {
            gsLastErrors[gsLastErrors.length] = " Error updating hidden";
        }
    } else {
        gsAllSuccess[gsAllSuccess.length] = "Successfully updated hidden";
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
            gbDoResetWatchlists = true;
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    giProgress = 0;
    ShowProgress(false, true);
    gbDoingCreateOrders = false;
    DoGetTDData();
}

function UpdateSymbolsChangeSymDescription(bFirstTime, iProgressIncrementIn, idxItemStart, idxWL, sThisPopupId, sSymbolsToChangeIn) {
    let iProgressIncrement = iProgressIncrementIn;

    let iRecsLimit = 4000;
    let sRecs = "";
    let sRecsSep = "";

    let aSymbolsToChange = sSymbolsToChangeIn.split("|");

    if (bFirstTime) {
        giProgress = 0;
        iProgressIncrement = Math.floor(100 / (Math.floor(aSymbolsToChange.length / iRecsLimit) + 1));
        gsLastErrors.length = 0;
        gsAllSuccess.length = 0;
        ShowProgress(true, false);
    }

    //build array of records to insert
    //@p_symbol varchar(20),
    //@p_gl varchar(20),
    //@p_gllaststartdate varchar(20),
    //@p_gllastenddate varchar(20),
    sRecs = "";
    sRecsSep = "";
    for (let idxWLItem = idxItemStart; idxWLItem < aSymbolsToChange.length; idxWLItem++) {
        let sThisRec = aSymbolsToChange[idxWLItem];

        if ((sRecs + sThisRec + sRecsSep).length > iRecsLimit) {
            giProgress = giProgress + iProgressIncrement;
            if (UpdateWLDetailSymDescriptionRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
                if (gsLastError != "") {
                    gsLastErrors[gsLastErrors.length] = " Error updating symbol description" + " -- " + gsLastError;
                } else {
                    gsLastErrors[gsLastErrors.length] = " Error updating symbol description";
                }
            } else {
                gsAllSuccess[gsAllSuccess.length] = "Successfully updated symbol description";
            }
            window.setTimeout("UpdateSymbolsChangeSymDescription(false, " + iProgressIncrement.toString() + ", " + idxWLItem.toString() + ", " + idxWL.toString() + ", '" + sThisPopupId + "', '" + sSymbolsToChangeIn + "')", 500);
            return;
        } else {
            sRecs = sRecs + sRecsSep + sThisRec;
            sRecsSep = "|";
        }
    }

    giProgress = giProgress + iProgressIncrement;
    if (UpdateWLDetailSymDescriptionRecs(gWatchlists[idxWL].watchlistId, sRecs) == "") {
        if (gsLastError != "") {
            gsLastErrors[gsLastErrors.length] = " Error updating symbol description" + " -- " + gsLastError;
        } else {
            gsLastErrors[gsLastErrors.length] = " Error updating symbol description";
        }
    } else {
        gsAllSuccess[gsAllSuccess.length] = "Successfully updated symbol description";
    }

    if (gsLastErrors.length == 0) {
        if (gsAllSuccess.length > 0) {
            gbDoResetWatchlists = true;
        }
    } else {
        let sMsg = "";
        if (gsAllSuccess.length > 0) {
            sMsg = gsAllSuccess.join("\n") & "\n" + gsLastErrors.join("\n");
            gbDoResetWatchlists = true;
        } else {
            sMsg = gsLastErrors.join("\n");
        }
        alert(sMsg);
    }
    giProgress = 0;
    ShowProgress(false, true);
    wlDoRemoveDivPopup(sThisPopupId);
}

function UpdateWLDetailAcquiredDateRecs(sWLID, sRecs) {

    //update/add the recs 
    s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "UpdateWLDetailAcquiredDateFromList '" + sWLID + "', '" + sRecs + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>True</returnsvalues>";
    s = s + "</command>";

    let swlidRet = "";
    switch (PostWLHTTP(s, 1)) {
        case 0: //success
            {
                //should have new SymbolID in oCMTemp1
                if (oCMTemp1.length > 0) {
                    if (!isUndefined(oCMTemp1[0].wlid)) {
                        swlidRet = oCMTemp1[0].wlid;
                    }
                }
                break;
            }
        default: //unknown error
            {
                break;
            }
    }
    return swlidRet;
}

function UpdateWLDetailCatalystDateRecs(sWLID, sRecs) {

    //update/add the recs 
    s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "UpdateWLDetailCatalystDateFromList '" + sWLID + "', '" + sRecs + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>True</returnsvalues>";
    s = s + "</command>";

    let swlidRet = "";
    switch (PostWLHTTP(s, 1)) {
        case 0: //success
            {
                //should have new SymbolID in oCMTemp1
                if (oCMTemp1.length > 0) {
                    if (!isUndefined(oCMTemp1[0].wlid)) {
                        swlidRet = oCMTemp1[0].wlid;
                    }
                }
                break;
            }
        default: //unknown error
            {
                break;
            }
    }
    return swlidRet;
}

function UpdateWLDetailGLInfoRecs(sWLID, sRecs) {

    //update/add the recs 
    s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "UpdateWLDetailGLInfoFromList '" + sWLID + "', '" + sRecs + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>True</returnsvalues>";
    s = s + "</command>";

    let swlidRet = "";
    switch (PostWLHTTP(s, 1)) {
        case 0: //success
            {
                //should have new SymbolID in oCMTemp1
                if (oCMTemp1.length > 0) {
                    if (!isUndefined(oCMTemp1[0].wlid)) {
                        swlidRet = oCMTemp1[0].wlid;
                    }
                }
                break;
            }
        default: //unknown error
            {
                break;
            }
    }
    return swlidRet;
}

function UpdateWLDetailHiddenRecs(sWLID, sRecs) {

    //update/add the recs 
    s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "UpdateWLDetailHiddenFromList '" + sWLID + "', '" + sRecs + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>True</returnsvalues>";
    s = s + "</command>";

    let swlidRet = "";
    switch (PostWLHTTP(s, 1)) {
        case 0: //success
            {
                //should have new SymbolID in oCMTemp1
                if (oCMTemp1.length > 0) {
                    if (!isUndefined(oCMTemp1[0].wlid)) {
                        swlidRet = oCMTemp1[0].wlid;
                    }
                }
                break;
            }
        default: //unknown error
            {
                break;
            }
    }
    return swlidRet;
}

function UpdateWLDetailSymDescriptionRecs(sWLID, sRecs) {

    //update/add the recs 
    s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "UpdateWLDetailSymDescriptionFromList '" + sWLID + "', '" + sRecs + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>True</returnsvalues>";
    s = s + "</command>";

    let swlidRet = "";
    switch (PostWLHTTP(s, 1)) {
        case 0: //success
            {
                //should have new SymbolID in oCMTemp1
                if (oCMTemp1.length > 0) {
                    if (!isUndefined(oCMTemp1[0].wlid)) {
                        swlidRet = oCMTemp1[0].wlid;
                    }
                }
                break;
            }
        default: //unknown error
            {
                break;
            }
    }
    return swlidRet;
}

function UpdateWLSymbol(sWhatToUpdate, sWLID, sPurchasedDate, sSymbol, sSymbolDesc, sGL, sLastStartDate, sLastEndDate, sHidden, sOldGL, sCatalystdateIn) {
    /*sWhatToUpdate = 0 - insert all and return wlid
     *                1 - update all fields and return wlid
     *                2 - update acquired date and return wlid
     *                3 = update laststartdate, lastenddate, gl and return wlid
     *                4 = update hidden and return wlid
     *          	  5 = update sym_description and return wlid
     *				  6 = update oldgl and return wlid 
     *				  7 = update catalystdate and return wlid 
     *                8 = update acquired date, catalyst date, description, oldgl  and return wlid */

    let sCatalystdate = "";
    if (!isUndefined(sCatalystdateIn)) {
        sCatalystdate = sCatalystdateIn;
    }

    let sAssetType = "EQUITY";
    if (!isUndefined(oMDQ[sSymbol])) {
        sAssetType = oMDQ[sSymbol].assetType;
    }

    //update/add the symbol 
    s = "<?xml version=\"1.0\"?>" + "\r\n";
    s = s + "<command><commandtext>";
    s = s + "UpdateWLDetail '" + sWhatToUpdate + "', '" + sWLID + "', '" + sPurchasedDate + "', '" + sSymbol + "', '" +
        sSymbolDesc + "', '" + sAssetType + "', '" +
        sGL + "', '" + sLastStartDate + "', '" +
        sLastEndDate + "', '" + sHidden + "', '" + sOldGL + "', '" + sCatalystdate + "'";
    s = s + "</commandtext>";
    s = s + "<returnsvalues>True</returnsvalues>";
    s = s + "</command>";

    let swlidRet = "";
    switch (PostWLHTTP(s, 1)) {
        case 0: //success
            {
                //should have new SymbolID in oCMTemp1
                if (oCMTemp1.length > 0) {
                    if (!isUndefined(oCMTemp1[0].wlid)) {
                        swlidRet = oCMTemp1[0].wlid;
                    }
                }
                break;
            }
        default: //unknown error
            {
                break;
            }
    }
    return swlidRet;
}

function UseEnterToTogglePriceHistory(ev) {
    if (ev.srcElement.checked) {
        gbUseEnterToTogglePriceHistory = true;
    } else {
        gbUseEnterToTogglePriceHistory = false;
    }
}

function UseExtendedChanged(ev) {
    if (ev.srcElement.checked) {
        gbUseExtended = true;
    } else {
        gbUseExtended = false;
    }
}

function UseLastTradingDayChanged(ev) {
    //debugger
    if (ev.srcElement.checked) {
        gbUseLastTradingDay = true;
    } else {
        gbUseLastTradingDay = false;
    }
}

function ValidateTDDate(sStartDate, bShowErrorMsg) {
    let s = "";
    let vTmp;
    let bOk = false;

    try {
        vTmp = sStartDate.split("-")
        if (vTmp.length != 3) {
            if (bShowErrorMsg) {
                alert("Invalid TD date. Please enter a date in the following format: yyyy-mm-dd");
            }
            return bOk;
        }
        else {
            if (vTmp[0].toString().length != 4) {
                if (bShowErrorMsg) {
                    alert("Invalid TD date. Please enter a date in the following format: yyyy-mm-dd");
                }
                return bOk;
            }

            if (vTmp[1].toString().length != 2) {
                if (bShowErrorMsg) {
                    alert("Invalid TD date. Please enter a date in the following format: yyyy-mm-dd");
                }
                return bOk;
            }

            if (vTmp[2].toString().length != 2) {
                if (bShowErrorMsg) {
                    alert("Invalid TD date. Please enter a date in the following format: yyyy-mm-dd");
                }
                return bOk;
            }

        }
        s = vTmp[1] + "/" + vTmp[2] + "/" + vTmp[0]; //changed 11/29/20 fro 2-1-0 to 1-2-0


        // Validates that the input string is a valid date formatted as "mm/dd/yyyy"
        // First check for the pattern
        if (!/^\d{1,2}\/\d{1,2}\/\d{4}$/.test(s)) {
            bOk = false;
        } else {
            // Parse the date parts to integers
            let parts = s.split("/");
            let day = parseInt(parts[1], 10);
            let month = parseInt(parts[0], 10);
            let year = parseInt(parts[2], 10);

            // Check the ranges of month and year
            if (year < 1000 || year > 3000 || month == 0 || month > 12) {
                bOk = false;
            } else {
                let monthLength = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

                // Adjust for leap years
                if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0))
                    monthLength[1] = 29;

                // Check the range of the day
                bOk = day > 0 && day <= monthLength[month - 1];
            }
        }
        if (!bOk) {
            if (bShowErrorMsg) {
                alert("Invalid TD date. Please enter a date in the following format: yyyy-mm-dd");
            }
        }
    }
    catch (eDate) {
        if (bShowErrorMsg) {
            alert("Invalid TD date. Please enter a date in the following format: yyyy-mm-dd");
        }
        return bOk;
    }
    return bOk;
}


function window_onLoad() {
    PageLoad();
}

function wlAddDiv(sSpanId, sDiv, iWLDragXoffsetLeftIn, iWLDragXoffsetRightIn) {
    let iWLDragXoffsetLeft = lengthsWL.WLDragXoffsetLeft;
    let iWLDragXoffsetRight = lengthsWL.WLDragXoffsetRight;
    if ((!isUndefined(iWLDragXoffsetLeftIn)) && (!isUndefined(iWLDragXoffsetRightIn))) {
        iWLDragXoffsetLeft = iWLDragXoffsetLeftIn;
        iWLDragXoffsetRight = iWLDragXoffsetRightIn;
    }

    let iPwdFormHeight = document.getElementById("pwdForm").clientHeight + 30;

    giZIndex++;
    let x = document.createElement("SPAN");                     // Create a <span> element
    x.id = sSpanId;
    //x.style.left = "800px";
    //x.style.top = "40px";
    x.style.left = "10px";
    x.style.top = iPwdFormHeight.toString() + "px";
    x.style.fontFamily = "Arial, Helvetica, sans-serif";
    x.style.fontSize = "10pt";
    x.style.position = "absolute";
    x.style.zIndex = giZIndex.toString();
    x.WLDragXoffsetLeft = iWLDragXoffsetLeft;
    x.WLDragXoffsetRight = iWLDragXoffsetRight;
    x.onclick = function () {
        if (!gbDoingCreateOrders) {
            giZIndex++;
            if ((document.getElementById(sSpanId) != null) && (!isUndefined(document.getElementById(sSpanId)))) {
                document.getElementById(sSpanId).style.zIndex = giZIndex.toString();
            }
        }
    };
    x.innerHTML = sDiv;

    document.body.appendChild(x);
    wlSetupDragDiv(sSpanId);
}


function wlAskShowAllAccountsForEachSymbol() {
    gbWLShowAllAccountsForSymbol = false;
    //        gbWLShowAllAccountsForSymbol = confirm("Show all of the  accounts for each symbol?");
}


function wlAddSymbol(idxWL, sThisPopupId) {

    let sAccountId = gWatchlists[idxWL].accountId;
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

    let stxtwlopen = "";
    let stxtwlacquired = "";
    let stxtwlcatalyst = "";
    let stxtwldescription = "";
    let stxtwloldgl = "";
    let sSymbolsToLookup = "";
    let sSymbolsToLookupSep = "";

    if (!((document.getElementById("txtwlsymbol" + sThisPopupId) == null) || (isUndefined(document.getElementById("txtwlsymbol" + sThisPopupId))))) {
        stxtwlopen = TrimLikeVB(document.getElementById("txtwlsymbol" + sThisPopupId).value);
    }
    if (!((document.getElementById("txtwlacquired" + sThisPopupId) == null) || (isUndefined(document.getElementById("txtwlacquired" + sThisPopupId))))) {
        stxtwlacquired = TrimLikeVB(document.getElementById("txtwlacquired" + sThisPopupId).value);
    }
    if (!((document.getElementById("txtwlcatalyst" + sThisPopupId) == null) || (isUndefined(document.getElementById("txtwlcatalyst" + sThisPopupId))))) {
        stxtwlcatalyst = TrimLikeVB(document.getElementById("txtwlcatalyst" + sThisPopupId).value);
    }
    if (!((document.getElementById("txtwldescription" + sThisPopupId) == null) || (isUndefined(document.getElementById("txtwldescription" + sThisPopupId))))) {
        stxtwldescription = TrimLikeVB(document.getElementById("txtwldescription" + sThisPopupId).value);
    }
    if (!((document.getElementById("txtwloldgl" + sThisPopupId) == null) || (isUndefined(document.getElementById("txtwloldgl" + sThisPopupId))))) {
        stxtwloldgl = TrimLikeVB(document.getElementById("txtwloldgl" + sThisPopupId).value);
    }

    if (stxtwlcatalyst != "") {
        if (!ValidateTDDate(stxtwlcatalyst, false)) {
            alert("Please enter a catalyst date as yyyy-mm-dd.");
            return;
        }
    }

    if (stxtwlacquired != "") {
        if (!ValidateTDDate(stxtwlacquired, false)) {
            alert("Please enter an acquired date as yyyy-mm-dd.");
            return;
        }
    }

    if (stxtwldescription.length > gisymbolDescriptionMax) {
        alert("Please enter a description less than " + (gisymbolDescriptionMax + 1).toString() + " characters long.");
        return;
    }

    let dSelectNum = 0;
    if (stxtwloldgl == "") {
        dSelectNum = 0;
    } else {
        dSelectNum = parseFloat(stxtwloldgl);
        if (isNaN(dSelectNum)) {
            alert("Please enter a valid OldGL dollar amount as xx.yy or -xx.yy");
            return;
        }
    }

    let sOldGL = FormatDecimalNumber(dSelectNum, 5, 2, "");

    if ((stxtwlopen != "") && (stxtwlacquired != "")) { //use acquired date as the starting date for GL info

        let sSymbolsAlreadyOpen = "";
        let sSymbolsAlreadyOpenSep = "";

        let sSymbolsToLookupTmp = GetUniqueListOfSymbols(stxtwlopen);
        let vTmp = sSymbolsToLookupTmp.split(",");

        sSymbolsToLookup = vTmp[0];

        let sConfirmMsg = "";
        //check to see if the new symbol exists in any watchlist in all accounts linked to the logged in account
        let oPositions = new Array();
        //get account position info if it exists
        for (let idxAccount = 0; idxAccount < gAccounts.length; idxAccount++) {
            if (gAccounts[idxAccount].positions.length > 0) {
                for (let idxPositions = 0; idxPositions < gAccounts[idxAccount].positions.length; idxPositions++) {
                    if (gAccounts[idxAccount].positions[idxPositions].symbol == sSymbolsToLookup) {
                        let oPosition = new Position();
                        oPosition = gAccounts[idxAccount].positions[idxPositions];
                        oPosition.accountId = gAccounts[idxAccount].accountId;
                        oPosition.accountName = gAccounts[idxAccount].accountName;
                        oPosition.symbol = "";
                        oPositions[oPositions.length] = oPosition;
                        break;
                    }
                }
            }
        }
        for (idxTmp = 0; idxTmp < gWatchlists.length; idxTmp++) {
            if ((gWatchlists[idxTmp].name != gsAccountSavedOrders) &&
                (gWatchlists[idxTmp].name != gsAccountWLSummary) &&
                (gWatchlists[idxTmp].name.substr(0, gsAccountOldGLBase.length) != gsAccountOldGLBase) &&
                (gWatchlists[idxTmp].accountId != gWatchlists[idxTmp].watchlistId)) {
                for (let idxWLItem = 0; idxWLItem < gWatchlists[idxTmp].WLItems.length; idxWLItem++) {
                    if (sSymbolsToLookup == gWatchlists[idxTmp].WLItems[idxWLItem].symbol.toUpperCase()) {
                        if (oPositions.length > 0) {
                            let idxSym = -1;
                            let bNeedToAddPos = true;
                            for (let idxPos = 0; idxPos < oPositions.length; idxPos++) {
                                if (oPositions[idxPos].accountId == gWatchlists[idxTmp].accountId) {
                                    idxSym = idxPos;
                                    if (oPositions[idxPos].symbol == "") {
                                        bNeedToAddPos = false;
                                        oPositions[idxPos].symbol = gWatchlists[idxTmp].name;
                                        break;
                                    }
                                }
                            }
                            if ((bNeedToAddPos) && (idxSym != -1)) {
                                let oPosition = new Position();
                                oPosition.longQuantity = oPositions[idxSym].longQuantity;
                                oPosition.accountId = oPositions[idxSym].accountId;
                                oPosition.accountName = oPositions[idxSym].accountName;
                                oPosition.symbol = gWatchlists[idxTmp].name;
                                oPositions[oPositions.length] = oPosition;
                            } else if (bNeedToAddPos) {
                                //no positions - so add one for the account containing the watchlist
                                let oPosition = new Position();
                                oPosition.accountId = gWatchlists[idxTmp].accountId;
                                oPosition.accountName = gWatchlists[idxTmp].accountName;
                                oPosition.symbol = gWatchlists[idxTmp].name;
                                oPositions[oPositions.length] = oPosition;
                            }
                        } else {
                            //no positions - so add one for the account containing the watchlist
                            let oPosition = new Position();
                            oPosition.accountId = gWatchlists[idxTmp].accountId;
                            oPosition.accountName = gWatchlists[idxTmp].accountName;
                            oPosition.symbol = gWatchlists[idxTmp].name;
                            oPositions[oPositions.length] = oPosition;
                        }
                        break;
                    }
                }
            }
        }
        if (oPositions.length > 0) {
            oPositions.sort(sortByPosAccountandSymbol);
            let sLastAccountName = "";
            for (let idxPos = 0; idxPos < oPositions.length; idxPos++) {
                let oPosition = oPositions[idxPos];
                let sWatchlistname = oPosition.symbol;
                if (sWatchlistname == "") {
                    sWatchlistname = "No watchlists";
                }
                if (sLastAccountName == "") {
                    sLastAccountName = oPosition.accountName;
                    sConfirmMsg = sSymbolsToLookup + " is contained in\n" + sLastAccountName + " (" + oPosition.longQuantity.toString() + ")\n   " + sWatchlistname + "\n";
                } else {
                    if (oPosition.accountName == sLastAccountName) {
                        sConfirmMsg = sConfirmMsg + "   " + sWatchlistname + "\n";
                    } else {
                        sLastAccountName = oPosition.accountName;
                        sConfirmMsg = sConfirmMsg + sLastAccountName + " (" + oPosition.longQuantity.toString() + ")\n   " + sWatchlistname + "\n";
                    }
                }
            }
        }
        if (sConfirmMsg != "") {
            if (!AreYouSure(sConfirmMsg + "\n")) {
                return;
            }
        }

        sConfirmMsg = "";
        let iNumAlreadyOpened = 0;
        sSymbolsToLookup = "";
        sSymbolsToLookupSep = "";
        //check to see if already in watchlist
        let bFound = false;
        for (let idxvTmp = 0; idxvTmp < vTmp.length; idxvTmp++) {
            bFound = false;
            for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                if (vTmp[idxvTmp] == gWatchlists[idxWL].WLItems[idxWLItem].symbol) {
                    bFound = true;
                    sSymbolsAlreadyOpen = sSymbolsAlreadyOpen + sSymbolsAlreadyOpenSep + vTmp[idxvTmp];
                    sSymbolsAlreadyOpenSep = ", ";
                    iNumAlreadyOpened++;
                    break;
                }
            }
            if (!bFound) {
                sSymbolsToLookup = sSymbolsToLookup + sSymbolsToLookupSep + vTmp[idxvTmp];
                sSymbolsToLookupSep = ",";
            }
        }

        if (sSymbolsAlreadyOpen != "") {
            if (iNumAlreadyOpened == 1) {
                sConfirmMsg = sSymbolsAlreadyOpen + " already exists."
            } else {
                sConfirmMsg = sSymbolsAlreadyOpen + " already exist."
            }
        }
        if (sSymbolsToLookup != "") {
            if (sConfirmMsg != "") {
                sConfirmMsg = sConfirmMsg + gsCRLF + "Adding " + sSymbolsToLookup.toUpperCase() + " with an acquired date of " + stxtwlacquired + ". ";
            } else {
                sConfirmMsg = "Adding " + sSymbolsToLookup.toUpperCase() + " with an acquired date of " + stxtwlacquired + ". ";
            }
            if (AreYouSure(sConfirmMsg)) {
                //need to get the start and end dates with time
                //get the highest last update date
                let iEndDate = 0;
                for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                    if (gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate > iEndDate) {
                        iEndDate = gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate;
                    }
                }
                if (iEndDate == 0) {
                    iEndDate = gWatchlists[idxWL].wllastupdatedate;
                }
                let aStartDate = stxtwlacquired.split("-");
                let iStartDate = (new Date(parseInt(aStartDate[0]), parseInt(aStartDate[1] - 1), parseInt(aStartDate[2]))).getTime();
                //if the highest last update date is less than the acquired date then set the start date to the highest last update date 
                if (iEndDate < iStartDate) {
                    iStartDate = iEndDate;
                }
                window.setTimeout("GetTradesAutoBase(true, " + iStartDate + ", " + idxWL + ", false, '" + sSymbolsToLookup.toUpperCase() + "', " + iEndDate + ", '" + stxtwlacquired + "', false, '" + sThisPopupId + "', '" + stxtwlcatalyst + "', '" + stxtwldescription + "', '" + sOldGL + "', false)", 10);
            } else {
                return;
            }
        } else {
            if (sConfirmMsg != "") {
                sConfirmMsg = sConfirmMsg + gsCRLF + "No symbols will be added.";
            } else {
                sConfirmMsg = "No symbols will be added.";
            }
            alert(sConfirmMsg);
            return;
        }

    } else if ((stxtwlopen != "") && (stxtwlacquired == "")) { //case 2
        let sSymbolsAlreadyOpen = "";
        let sSymbolsAlreadyOpenSep = "";
        let sSymbolsToLookupTmp = GetUniqueListOfSymbols(stxtwlopen);
        let vTmp = sSymbolsToLookupTmp.split(",");
        if (vTmp.length > 0) {
            if (vTmp.length > 1) {
                alert("Please enter only one symbol to add.");
                return;
            }

            sSymbolsToLookup = vTmp[0];

            let sConfirmMsg = "";
            //check to see if the new symbol exists in any watchlist in all accounts linked to the logged in account
            let oPositions = new Array();
            //get account position info if it exists
            for (let idxAccount = 0; idxAccount < gAccounts.length; idxAccount++) {
                if (gAccounts[idxAccount].positions.length > 0) {
                    for (let idxPositions = 0; idxPositions < gAccounts[idxAccount].positions.length; idxPositions++) {
                        if (gAccounts[idxAccount].positions[idxPositions].symbol == sSymbolsToLookup) {
                            let oPosition = new Position();
                            oPosition = gAccounts[idxAccount].positions[idxPositions];
                            oPosition.accountId = gAccounts[idxAccount].accountId;
                            oPosition.accountName = gAccounts[idxAccount].accountName;
                            oPosition.symbol = "";
                            oPositions[oPositions.length] = oPosition;
                            break;
                        }
                    }
                }
            }
            for (idxTmp = 0; idxTmp < gWatchlists.length; idxTmp++) {
                if ((gWatchlists[idxTmp].name != gsAccountSavedOrders) &&
                    (gWatchlists[idxTmp].name != gsAccountWLSummary) &&
                    (gWatchlists[idxTmp].name.substr(0, gsAccountOldGLBase.length) != gsAccountOldGLBase) &&
                    (gWatchlists[idxTmp].accountId != gWatchlists[idxTmp].watchlistId)) {
                    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxTmp].WLItems.length; idxWLItem++) {
                        if (sSymbolsToLookup == gWatchlists[idxTmp].WLItems[idxWLItem].symbol.toUpperCase()) {
                            if (oPositions.length > 0) {
                                let idxSym = -1;
                                let bNeedToAddPos = true;
                                for (let idxPos = 0; idxPos < oPositions.length; idxPos++) {
                                    if (oPositions[idxPos].accountId == gWatchlists[idxTmp].accountId) {
                                        idxSym = idxPos;
                                        if (oPositions[idxPos].symbol == "") {
                                            bNeedToAddPos = false;
                                            oPositions[idxPos].symbol = gWatchlists[idxTmp].name;
                                            break;
                                        }
                                    }
                                }
                                if ((bNeedToAddPos) && (idxSym != -1)) {
                                    let oPosition = new Position();
                                    oPosition.longQuantity = oPositions[idxSym].longQuantity;
                                    oPosition.accountId = oPositions[idxSym].accountId;
                                    oPosition.accountName = oPositions[idxSym].accountName;
                                    oPosition.symbol = gWatchlists[idxTmp].name;
                                    oPositions[oPositions.length] = oPosition;
                                } else if (bNeedToAddPos) {
                                    //no positions - so add one for the account containing the watchlist
                                    let oPosition = new Position();
                                    oPosition.accountId = gWatchlists[idxTmp].accountId;
                                    oPosition.accountName = gWatchlists[idxTmp].accountName;
                                    oPosition.symbol = gWatchlists[idxTmp].name;
                                    oPositions[oPositions.length] = oPosition;
                                }
                            } else {
                                //no positions - so add one for the account containing the watchlist
                                let oPosition = new Position();
                                oPosition.accountId = gWatchlists[idxTmp].accountId;
                                oPosition.accountName = gWatchlists[idxTmp].accountName;
                                oPosition.symbol = gWatchlists[idxTmp].name;
                                oPositions[oPositions.length] = oPosition;
                            }
                            break;
                        }
                    }
                }
            }
            if (oPositions.length > 0) {
                oPositions.sort(sortByPosAccountandSymbol);
                let sLastAccountName = "";
                for (let idxPos = 0; idxPos < oPositions.length; idxPos++) {
                    let oPosition = oPositions[idxPos];
                    let sWatchlistname = oPosition.symbol;
                    if (sWatchlistname == "") {
                        sWatchlistname = "No watchlists";
                    }
                    if (sLastAccountName == "") {
                        sLastAccountName = oPosition.accountName;
                        sConfirmMsg = sSymbolsToLookup + " is contained in\n" + sLastAccountName + " (" + oPosition.longQuantity.toString() + ")\n   " + sWatchlistname + "\n";
                    } else {
                        if (oPosition.accountName == sLastAccountName) {
                            sConfirmMsg = sConfirmMsg + "   " + sWatchlistname + "\n";
                        } else {
                            sLastAccountName = oPosition.accountName;
                            sConfirmMsg = sConfirmMsg + sLastAccountName + " (" + oPosition.longQuantity.toString() + ")\n   " + sWatchlistname + "\n";
                        }
                    }
                }
            }
            if (sConfirmMsg != "") {
                if (!AreYouSure(sConfirmMsg + "\n")) {
                    return;
                }
            }

            sConfirmMsg = "";

            let iNumAlreadyOpened = 0;
            sSymbolsToLookup = "";
            sSymbolsToLookupSep = "";
            //check to see if already in watchlist
            let bFound = false;
            for (let idxvTmp = 0; idxvTmp < vTmp.length; idxvTmp++) {
                bFound = false;
                for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                    if (vTmp[idxvTmp] == gWatchlists[idxWL].WLItems[idxWLItem].symbol) {
                        bFound = true;
                        sSymbolsAlreadyOpen = sSymbolsAlreadyOpen + sSymbolsAlreadyOpenSep + vTmp[idxvTmp];
                        sSymbolsAlreadyOpenSep = ", ";
                        iNumAlreadyOpened++;
                        break;
                    }
                }
                if (!bFound) {
                    sSymbolsToLookup = sSymbolsToLookup + sSymbolsToLookupSep + vTmp[idxvTmp];
                    sSymbolsToLookupSep = ",";
                }
            }

            if (sSymbolsAlreadyOpen != "") {
                if (iNumAlreadyOpened == 1) {
                    sConfirmMsg = sSymbolsAlreadyOpen + " already exists."
                } else {
                    sConfirmMsg = sSymbolsAlreadyOpen + " already exist."
                }
            }
            if (sSymbolsToLookup != "") {
                if (sConfirmMsg != "") {
                    sConfirmMsg = sConfirmMsg + gsCRLF + "Adding " + sSymbolsToLookup.toUpperCase() + " with no acquired date. ";
                } else {
                    sConfirmMsg = "Adding " + sSymbolsToLookup.toUpperCase() + " with no acquired date. ";
                }
                if (AreYouSure(sConfirmMsg)) {
                    //need to get the start and end dates with time
                    //get the highest last update date
                    let iEndDate = new Date().getTime();
                    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                        if (gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate > iEndDate) {
                            iEndDate = gWatchlists[idxWL].WLItems[idxWLItem].priceInfo.GLUpdateDate;
                        }
                    }
                    let iStartDate = iEndDate;
                    //alert("about to call GenerateWLOpenSymbolOrders");
                    //return;
                    window.setTimeout("GenerateWLOpenSymbolOrders('" + sAccountId + "', " + idxWL + ", '" + sThisPopupId + "', '" + sSymbolsToLookup.toUpperCase() + "', '" + stxtwlacquired + "', '0', " + iStartDate + ", " + iEndDate + ", '" + stxtwldescription + "', '" + sOldGL + "', '" + stxtwlcatalyst + "')", 10);
                } else {
                    return;
                }
            } else {
                if (sConfirmMsg != "") {
                    sConfirmMsg = sConfirmMsg + gsCRLF + "No symbols will be added.";
                } else {
                    sConfirmMsg = "No symbols will be added.";
                }
                alert(sConfirmMsg);
                return;
            }
        } else {
            alert("Please enter a symbol to add.");
            return;
        }
    } else if ((stxtwlopen == "") && (stxtwlacquired != "")) { 
        alert("Please enter a symbol to add.")
        return;
    } else { 
        alert("Please enter a symbol to add.")
        return;
    }
}

function wlCancelClicked() {
    document.getElementById("wlForm").style.display = "none";
    document.getElementById("pwdForm").style.display = "block";
    document.getElementById("MainForm").style.display = "block";
    wlShowAllWatchlists();

    for (let idx = 0; idx < gWatchlists.length; idx++) {
        if (gbDoingSymbolsSelect) {
            gWatchlists[idx].bSelectedSymbolsTemp = gWatchlists[idx].bSelectedSymbols;
        } else {
            gWatchlists[idx].bSelectedTemp = gWatchlists[idx].bSelected;
        }
    }
    gbDoingSymbolsSelect = false;
    SetupWatchlists(false);
}

function wlCancelClickedColumnSelection(idxWL) {
    document.getElementById("wlFormColumn").style.display = "none";
    document.getElementById("pwdForm").style.display = "block";
    document.getElementById("MainForm").style.display = "block";

    gWatchlists[idxWL].wlcolumnsselectedtemp = [];

    wlShowAllWatchlists();
    gbDoingCreateOrders = false;
    DoGetTDData();
}

function wlChangeColumnOrder(iLeftRight, idxWL) {
    //iLeftRight - 1 left, 2 - right
    let key = "";
    let iColCnt = 0;
    for (let localkey in gWatchlists[idxWL].wlcolumnsselectedtemp) {
        if (gWatchlists[idxWL].wlcolumnsselectedtemp.hasOwnProperty(localkey)) {
            iColCnt++;
            if (!isUndefined(gWatchlists[idxWL].wlcolumnsselectedtemp[localkey].selectedtomove)) {
                if (gWatchlists[idxWL].wlcolumnsselectedtemp[localkey].selectedtomove) {
                    key = localkey;
                }
            }
        }
    }

    if (key != "") {
        let iChange = 0;
        switch (iLeftRight) {
            case 1: //moving left
                {
                    if (gWatchlists[idxWL].wlcolumnsselectedtemp[key].sortorder > 2) {
                        iChange = -3;
                    }
                    break;
                }
            case 2: //moving right
                {
                    if (gWatchlists[idxWL].wlcolumnsselectedtemp[key].sortorder < iColCnt * 2) {
                        iChange = 3;
                    }
                    break;
                }
        }

        gWatchlists[idxWL].wlcolumnsselectedtemp[key].sortorder = gWatchlists[idxWL].wlcolumnsselectedtemp[key].sortorder + iChange;

        WLSortColumns(1, gWatchlists[idxWL]);
        window.setTimeout("SetupWLColumnSelectionChangeOrder(" + idxWL.toString() + ")", 10);
    }
}

function wlChangeOrder(idxWL, sSortOrder) {
    if (!gbDoingGetTDData) {
        if (giGetTDDataTimeoutId != 0) {
            window.clearTimeout(giGetTDDataTimeoutId);
            giGetTDDataTimeoutId = 0;

            if (gWatchlists[idxWL].sSortOrderFields == sSortOrder) {
                if (gWatchlists[idxWL].iSortOrderAscDesc == 0) {
                    gWatchlists[idxWL].iSortOrderAscDesc = 1;
                } else {
                    gWatchlists[idxWL].iSortOrderAscDesc = 0;
                }
            } else {
                switch (sSortOrder) {
                    case gsSortOrderFields.Amt:
                    case gsSortOrderFields.Ask:
                    case gsSortOrderFields.Bid:
                    case gsSortOrderFields.ChgDollar:
                    case gsSortOrderFields.ChgPercent:
                    case gsSortOrderFields.CostPerShare:
                    case gsSortOrderFields.DayGain:
                    case gsSortOrderFields.DivDollar:
                    case gsSortOrderFields.DivPercent:
                    case gsSortOrderFields.GainDollar:
                    case gsSortOrderFields.GainPercent:
                    case gsSortOrderFields.High:
                    case gsSortOrderFields.MktValue:
                    case gsSortOrderFields.PE:
                    case gsSortOrderFields.Price:
                    case gsSortOrderFields.Qty:
                    case gsSortOrderFields.OldGL:
                        {
                            gWatchlists[idxWL].iSortOrderAscDesc = 1;
                            break;
                        }
                    case gsSortOrderFields.DivDate:
                    case gsSortOrderFields.Low:
                    case gsSortOrderFields.PurchaseDate:
                    case gsSortOrderFields.CatalystDate:
                    case gsSortOrderFields.Symbol:
                        {
                            gWatchlists[idxWL].iSortOrderAscDesc = 0;
                            break;
                        }
                    default:
                        {
                            gWatchlists[idxWL].iSortOrderAscDesc = 0;
                            break;
                        }
                }
                gWatchlists[idxWL].sSortOrderFields = sSortOrder;
            }

            giGetTDDataTimeoutId = window.setTimeout("GetTDData(false)", 10);
        }
    } else {
        window.setTimeout("wlChangeOrder(" + idxWL.toString() + ",'" + sSortOrder + "')", 100);
    }
}

function wlChangeOrderO(idxWL, sSortOrder) {
    if (!gbDoingGetTDData) {
        if (giGetTDDataTimeoutId != 0) {
            window.clearTimeout(giGetTDDataTimeoutId);
            giGetTDDataTimeoutId = 0;

            if (gWatchlists[idxWL].sSortOrderFields == sSortOrder) {
                if (gWatchlists[idxWL].iSortOrderAscDesc == 0) {
                    gWatchlists[idxWL].iSortOrderAscDesc = 1;
                } else {
                    gWatchlists[idxWL].iSortOrderAscDesc = 0;
                }
            } else {
                switch (sSortOrder) {
                    case gsSortOrderFieldsO.ActPrice:
                    case gsSortOrderFieldsO.Price:
                    case gsSortOrderFieldsO.Quantity:
                    case gsSortOrderFieldsO.Reported:
                    case gsSortOrderFieldsO.TimeInForce:
                        {
                            gWatchlists[idxWL].iSortOrderAscDesc = 1;
                            break;
                        }
                    case gsSortOrderFieldsO.Action:
                    case gsSortOrderFieldsO.Status:
                    case gsSortOrderFieldsO.Symbol:
                    case gsSortOrderFieldsO.Type:
                        {
                            gWatchlists[idxWL].iSortOrderAscDesc = 0;
                            break;
                        }
                    default:
                        {
                            gWatchlists[idxWL].iSortOrderAscDesc = 0;
                            break;
                        }
                }
                gWatchlists[idxWL].sSortOrderFields = sSortOrder;
            }
            if (gWatchlists[idxWL].WLItems.length > 0) {
                for (let idx = 0; idx < gWatchlists[idxWL].WLItems.length; idx++) {
                    gWatchlists[idxWL].WLItems[idx].sSortOrderFields = gWatchlists[idxWL].sSortOrderFields;
                    gWatchlists[idxWL].WLItems[idx].iSortOrderAscDesc = gWatchlists[idxWL].iSortOrderAscDesc;
                }
            }

            giGetTDDataTimeoutId = window.setTimeout("GetTDData(false)", 10);
        }
    } else {
        window.setTimeout("wlChangeOrderO(" + idxWL.toString() + ",'" + sSortOrder + "')", 100);
    }
}

function wlChangeOrderSO(idxWL, sSortOrder) {
    if (!gbDoingGetTDData) {
        if (giGetTDDataTimeoutId != 0) {
            window.clearTimeout(giGetTDDataTimeoutId);
            giGetTDDataTimeoutId = 0;

            if (gWatchlists[idxWL].sSortOrderFields == sSortOrder) {
                if (gWatchlists[idxWL].iSortOrderAscDesc == 0) {
                    gWatchlists[idxWL].iSortOrderAscDesc = 1;
                } else {
                    gWatchlists[idxWL].iSortOrderAscDesc = 0;
                }
            } else {
                switch (sSortOrder) {
                    case gsSortOrderFieldsSO.ActPrice:
                    case gsSortOrderFieldsSO.Price:
                    case gsSortOrderFieldsSO.Ask:
                    case gsSortOrderFieldsSO.Bid:
                    case gsSortOrderFieldsSO.Quantity:
                    case gsSortOrderFieldsSO.TimeInForce:
                        {
                            gWatchlists[idxWL].iSortOrderAscDesc = 1;
                            break;
                        }
                    case gsSortOrderFieldsSO.Action:
                    case gsSortOrderFieldsSO.Symbol:
                    case gsSortOrderFieldsSO.Type:
                        {
                            gWatchlists[idxWL].iSortOrderAscDesc = 0;
                            break;
                        }
                    default:
                        {
                            gWatchlists[idxWL].iSortOrderAscDesc = 0;
                            break;
                        }
                }
                gWatchlists[idxWL].sSortOrderFields = sSortOrder;
            }
            if (gWatchlists[idxWL].WLItems.length > 0) {
                for (let idx = 0; idx < gWatchlists[idxWL].WLItems.length; idx++) {
                    gWatchlists[idxWL].WLItems[idx].sSortOrderFields = gWatchlists[idxWL].sSortOrderFields;
                    gWatchlists[idxWL].WLItems[idx].iSortOrderAscDesc = gWatchlists[idxWL].iSortOrderAscDesc;
                }
            }

            giGetTDDataTimeoutId = window.setTimeout("GetTDData(false)", 10);
        }
    } else {
        window.setTimeout("wlChangeOrderSO(" + idxWL.toString() + ",'" + sSortOrder + "')", 100);
    }
}

function wlChangeSetting(iWhatToDo, idxWL, sThisPopupId) {
    //iWhatToDo == 1 - update watchlist name

    let sAccountId = gWatchlists[idxWL].accountId;
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

    let stxtwlname = "";

    if (!((document.getElementById("txtwlname" + sThisPopupId) == null) || (isUndefined(document.getElementById("txtwlname" + sThisPopupId))))) {
        stxtwlname = TrimLikeVB(document.getElementById("txtwlname" + sThisPopupId).value);
    }

    if (stxtwlname == "") {
        alert("Please enter a watchlist name.");
        return;
    }

    switch (iWhatToDo) {
        case 1: {//update wl name
            let sConfirmMsg = "";
            sConfirmMsg = "Changing the watchlist name to  " + stxtwlname + ". ";
            if (AreYouSure(sConfirmMsg)) {
                window.setTimeout("ChangeWLName(" + idxWL + ", '" + stxtwlname + "')", 10);
                wlDoRemoveDivPopupNoClear(sThisPopupId);
            } else {
                return;
            }
            break;
        }
    }
}

function wlChangeSymbols(iWhatToDo, idxWL, sThisPopupId) {
    //iWhatToDo == 1 - update one symbol
    //             2 - update acquired date in one or many
    //             3 - update catalyst date in one or many
    //             4 - update description in one or many

    let sAccountId = gWatchlists[idxWL].accountId;
    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

    let stxtwlacquired = "";
    let stxtwlcatalyst = "";
    let stxtwldescription = "";
    let stxtwloldgl = "";

    let sSymbolsToLookup = "";
    let sSymbolsToLookupSep = "";
    let iNumSelected = 0;
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
            iNumSelected++;
            sSymbolsToLookup = sSymbolsToLookup + sSymbolsToLookupSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
            sSymbolsToLookupSep = ", ";
        }
    }

    if (!((document.getElementById("txtwlacquired" + sThisPopupId) == null) || (isUndefined(document.getElementById("txtwlacquired" + sThisPopupId))))) {
        stxtwlacquired = TrimLikeVB(document.getElementById("txtwlacquired" + sThisPopupId).value);
    }
    if (!((document.getElementById("txtwlcatalyst" + sThisPopupId) == null) || (isUndefined(document.getElementById("txtwlcatalyst" + sThisPopupId))))) {
        stxtwlcatalyst = TrimLikeVB(document.getElementById("txtwlcatalyst" + sThisPopupId).value);
    }
    if (!((document.getElementById("txtwldescription" + sThisPopupId) == null) || (isUndefined(document.getElementById("txtwldescription" + sThisPopupId))))) {
        stxtwldescription = TrimLikeVB(document.getElementById("txtwldescription" + sThisPopupId).value);
    }
    if (!((document.getElementById("txtwloldgl" + sThisPopupId) == null) || (isUndefined(document.getElementById("txtwloldgl" + sThisPopupId))))) {
        stxtwloldgl = TrimLikeVB(document.getElementById("txtwloldgl" + sThisPopupId).value);
    }

    if (stxtwlcatalyst != "") {
        if (!ValidateTDDate(stxtwlcatalyst, false)) {
            alert("Please enter a catalyst date as yyyy-mm-dd.");
            return;
        }
    }

    if (stxtwlacquired != "") {
        if (!ValidateTDDate(stxtwlacquired, false)) {
            alert("Please enter an acquired date as yyyy-mm-dd.");
            return;
        }
    }

    if (stxtwldescription.length > gisymbolDescriptionMax) {
        alert("Please enter a description less than " + (gisymbolDescriptionMax + 1).toString() + " characters long.");
        return;
    }

    let dSelectNum = 0;
    if (stxtwloldgl == "") {
        dSelectNum = 0;
    } else {
        dSelectNum = parseFloat(stxtwloldgl);
        if (isNaN(dSelectNum)) {
            alert("Please enter a valid OldGL dollar amount as xx.yy or -xx.yy");
            return;
        }
    }

    let sOldGL = FormatDecimalNumber(dSelectNum, 5, 2, "");

    switch (iWhatToDo) {
        case 1: {//update one symbol
            let sConfirmMsg = "";
            sConfirmMsg = "Changing all fields for " + sSymbolsToLookup.toUpperCase() + ". ";
            if (AreYouSure(sConfirmMsg)) {
                window.setTimeout("GenerateWLOpenSymbolOrdersChangeAll(" + idxWL + ", '" + sThisPopupId + "', '" + stxtwlacquired + "', '" + stxtwlcatalyst + "', '" + stxtwldescription + "', '" + sOldGL + "')", 10);
            } else {
                return;
            }
            break;
        }
        case 2: {//update acquired date in one or many
            let sConfirmMsg = "";
            if (stxtwlcatalyst == "") {
                sConfirmMsg = "Clearing the Acquired Date for " + sSymbolsToLookup.toUpperCase() + ". ";
            } else {
                sConfirmMsg = "Changing the Acquired Date for " + sSymbolsToLookup.toUpperCase() + ". ";
            }
            if (AreYouSure(sConfirmMsg)) {
                window.setTimeout("GenerateWLOpenSymbolOrdersChangeAcquiredDate(" + idxWL + ", '" + sThisPopupId + "', '" + stxtwlacquired + "')", 10);
            } else {
                return;
            }
            break;
        }
        case 3: {//update catalyst date in one or many
            let sConfirmMsg = "";
            if (stxtwlcatalyst == "") {
                sConfirmMsg = "Clearing the Catalyst Date for " + sSymbolsToLookup.toUpperCase() + ". ";
            } else {
                sConfirmMsg = "Changing the Catalyst Date for " + sSymbolsToLookup.toUpperCase() + ". ";
            }
            if (AreYouSure(sConfirmMsg)) {
                window.setTimeout("GenerateWLOpenSymbolOrdersChangeCatalystDate(" + idxWL + ", '" + sThisPopupId + "', '" + stxtwlcatalyst + "')", 10);
            } else {
                return;
            }
            break;
        }
        case 4: {//update description in one or many
            let sConfirmMsg = "";
            if (stxtwlcatalyst == "") {
                sConfirmMsg = "Clearing the Description for " + sSymbolsToLookup.toUpperCase() + ". ";
            } else {
                sConfirmMsg = "Changing the Description for " + sSymbolsToLookup.toUpperCase() + ". ";
            }
            if (AreYouSure(sConfirmMsg)) {
                window.setTimeout("GenerateWLOpenSymbolOrdersChangeDescription(" + idxWL + ", '" + sThisPopupId + "', '" + stxtwldescription + "')", 10);
            } else {
                return;
            }
            break;
        }
    }
}

function wlDoCancelPopup() {
    document.getElementById("optWL").value = "";
    wlWatchlistSelected();
}

function wlDoMaximizeRestore(sLastWLAccountId, watchlistId) {
    let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
    if (idxWL != -1) {
        if (gWatchlists[idxWL].WLItems.length > 0) {
            let sThisId = gWatchlists[idxWL].watchlistId + sLastWLAccountId;
            if (gWatchlists[idxWL].WLItems.length > giLineLimit) {
                gWatchlists[idxWL].bShowMaximized = !gWatchlists[idxWL].bShowMaximized;
            } else {
                gWatchlists[idxWL].bShowMaximized = true;
            }

            if (gWatchlists[idxWL].bShowMaximized) {
                document.getElementById("divtableTitle" + sThisId).style.overflowY = "hidden";
                document.getElementById("divtableInside" + sThisId).style.overflowY = "hidden";
                document.getElementById("divtableInside" + sThisId).style.height = "";
                document.getElementById("spanMaxRestore" + sThisId).src = gsRestoreWindowImg;
                if (!isUndefined(document.getElementById("spanMaxRestore" + sThisId).title)) {
                    document.getElementById("spanMaxRestore" + sThisId).title = "Restore";
                }
            } else {
                document.getElementById("divtableInside" + sThisId).style.height = gsTableHeightWithScrollbar;
                document.getElementById("divtableInside" + sThisId).style.overflowY = "scroll";
                document.getElementById("divtableTitle" + sThisId).style.height = gsTableHeightWithScrollbarTitle;
                document.getElementById("divtableTitle" + sThisId).style.overflowY = "scroll";
                document.getElementById("spanMaxRestore" + sThisId).src = gsMaximizeWindowImg;
                if (!isUndefined(document.getElementById("spanMaxRestore" + sThisId).title)) {
                    document.getElementById("spanMaxRestore" + sThisId).title = "Maximize";
                }
            }
        }
    }
}

function wlDoMaximizeRestoreTblSymbols(sDivId) {
    let x = document.getElementById(sDivId);
    if (!isUndefined(x)) {
        if (!isUndefined(document.getElementById(sDivId + "Img"))) {
            if (isUndefined(x.isMaximized)) {
                x.isMaximized = true;
            } else {
                x.isMaximized = !x.isMaximized;
            }
            if (x.isMaximized) {
                document.getElementById(sDivId).style.height = "";
                document.getElementById(sDivId).style.overflowY = "hidden";
                document.getElementById(sDivId + "Img").src = gsRestoreWindowImg;
            } else {
                document.getElementById(sDivId).style.height = "400px";
                document.getElementById(sDivId).style.overflowY = "auto";
                document.getElementById(sDivId + "Img").src = gsMaximizeWindowImg;
            }
        }
    }
}

function wlDoRemoveDiv(watchlistId, sLastWLAccountId) {
    let idxWL = wlGetIdxWL(watchlistId, sLastWLAccountId);
    if ((idxWL != -1) && (!gbDoingCreateOrders)) {
        if (gWatchlists[idxWL].spanName != "") {
            wlRemoveDiv(gWatchlists[idxWL].spanName);
            gWatchlists[idxWL].spanName = "";
            gWatchlists[idxWL].bSelected = false;
            gWatchlists[idxWL].bSelectedTemp = false;
            gWatchlists[idxWL].bSelectedOGL = false;
            gWatchlists[idxWL].bSelectedOGLTemp = false;
            gWatchlists[idxWL].bSelectedO = false;
            gWatchlists[idxWL].bSelectedOTemp = false;
            gWatchlists[idxWL].bSelectedSO = false;
            gWatchlists[idxWL].bSelectedSOTemp = false;
            gWatchlists[idxWL].bSelectedWLSummary = false;
            gWatchlists[idxWL].bSelectedWLSummaryTemp = false;

            for (let idxItem = 0; idxItem < gWatchlists[idxWL].WLItems.length; idxItem++) {
                gWatchlists[idxWL].WLItems[idxItem].bSelectedForOrder = false;
                gWatchlists[idxWL].WLItems[idxItem].bCheckboxEnabled = true;
            }
        }
    }
}

function wlDoRemoveDivOldGL(sAccountId) {
    let idxWL = -1;
    for (let idx = 0; idx < gWatchlists.length; idx++) {
        if ((gWatchlists[idx].name == gsAccountOldGL) && (gWatchlists[idx].accountId == sAccountId)) {
            idxWL = idx;
            break;
        }
    }
    if (idxWL != -1) {
        wlDoRemoveDiv(gWatchlists[idxWL].watchlistId, sAccountId);
    }
}

function wlDoRemoveDivPopup(sDivId) {
    window.setTimeout ("wlRemoveDiv('" + sDivId + "')", 10);
}

function wlDoRemoveDivPopupNoClear(sDivId) {
    window.setTimeout("wlRemoveDivNoClear('" + sDivId + "')", 10);
}

function wlDoSetShowingSelectWatchlists() {
    gbShowingSelectWatchlists = true;
}

function wlGetIdxWL(watchlistId, sLastWLAccountId) {
    if (gWatchlists.length > 0) {
        for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
            if ((gWatchlists[idxWL].watchlistId == watchlistId) && ((gWatchlists[idxWL].accountId == sLastWLAccountId))) {
                return idxWL;
            }
        }
    }
    return -1;
}

function wlHideAllWatchlists() {
    if (gWatchlists.length > 0) {
        for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
            if (gWatchlists[idxWL].spanName != "") {
                if (gWatchlists[idxWL].bSelected) {
                    document.getElementById(gWatchlists[idxWL].spanName).style.display = "none";
                }
            }
        }
    }
}

function WLInitializeGLSymbols(iSelectedOrAll, idxWL) {
    //iSelectedOrAll = 1 - only selected, 2 - all initialize, 3 - all update
    let sSymbolsToLookup = "";
    let sSymbolsToLookupSep = "";
    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
        if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
            sSymbolsToLookup = sSymbolsToLookup + sSymbolsToLookupSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
            sSymbolsToLookupSep = ", ";
        }
    }

    let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

    let sDollars = TrimLikeVB(document.getElementById("txtwlclose" + sThisId).value);

    let dtEndDate = new Date();
    let iEndDate = dtEndDate.getTime();
    let sEndDate = FormatDateForTD(dtEndDate);
    let sCurrentDate = sEndDate;

    if (iSelectedOrAll != 3) {
        //treat as date
        if (ValidateTDDate(sDollars, false)) {
            if (sDollars > sEndDate) {
                alert("Invalid initialization start date. Please enter a start date less than or equal to " + sEndDate + ".");
                gbDoingCreateOrders = false;
                DoGetTDData();
                return;
            }
            if (sEndDate > sCurrentDate) {
                alert("Invalid initialization end date. Please enter an end date less than or equal to " + sCurrentDate + ".");
                gbDoingCreateOrders = false;
                DoGetTDData();
                return;
            }
            let bInitAll = iSelectedOrAll == 2 ? true : false;
            if (bInitAll) {
                let sConfirmMsg = "";
                sConfirmMsg = "Initializing the G/L for all of the symbols in the watchlist using " + sDollars + " as the start date and " + sEndDate + " as the end date. ";
                if (AreYouSure(sConfirmMsg)) {
                    //get the trade info for the selected symbols
                    let aStartDate = sDollars.split("-");
                    let iStartDate = (new Date(parseInt(aStartDate[0]), parseInt(aStartDate[1] - 1), parseInt(aStartDate[2]))).getTime();

                    gWatchlists[idxWL].defaultUpdateGLDate = sDollars;

                    window.setTimeout("GetTradesAutoBase(true, " + iStartDate + ", " + idxWL + ", true, '', " + iEndDate + ", '', true, '', '', '', '', true)", 10);
                } else {
                    gbDoingCreateOrders = false;
                    DoGetTDData();
                    return;
                }
            } else { //only initialize the GL for the selected symbols
                //use the entered date as the start date and the highest update date as the end date
                //get the highest last update date
                let iHighestUpdateDate = 0;
                iHighestUpdateDate = GetHighestUpdateDate(idxWL, true);
                if (iHighestUpdateDate == -1) {
                    //what does this mean
                    gbDoingCreateOrders = false;
                    DoGetTDData();
                    return;
                }

                let sHighestUpdateDate = FormatDateForTD(new Date(iHighestUpdateDate));

                if (sDollars > sHighestUpdateDate) {
                    sDollars = sHighestUpdateDate;
                }
                let sConfirmMsg = "";
                sConfirmMsg = "Initializing the G/L for " + sSymbolsToLookup.toUpperCase() + " using " + sDollars + " as the start date and " + sHighestUpdateDate + " as the end date. ";
                if (AreYouSure(sConfirmMsg)) {
                    //get the trade info for the selected symbols

                    sSymbolsToLookup = "";
                    sSymbolsToLookupSep = "";
                    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                        if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
                            sSymbolsToLookup = sSymbolsToLookup + sSymbolsToLookupSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                            sSymbolsToLookupSep = ",";
                        }
                    }

                    let aStartDate = sDollars.split("-");
                    let iStartDate = (new Date(parseInt(aStartDate[0]), parseInt(aStartDate[1] - 1), parseInt(aStartDate[2]))).getTime();

                    gWatchlists[idxWL].defaultUpdateGLDate = sDollars;

                    window.setTimeout("GetTradesAutoBase(true, " + iStartDate + ", " + idxWL + ", true, '" + sSymbolsToLookup.toUpperCase() + "', " + iHighestUpdateDate + ", '', false, '', '', '', '', true)", 10);
                } else {
                    gbDoingCreateOrders = false;
                    DoGetTDData();
                    return;
                }
            }
        } else {
            alert("Please enter an initialization start date as yyyy-mm-dd.")
            gbDoingCreateOrders = false;
            DoGetTDData();
            return;
        }
    } else { //update all
        //updating G/L for each symbol in the watchlist using the latest update date found in the watchlist
        let sConfirmMsg = "";
        sConfirmMsg = "Updating the G/L for all of the symbols in the watchlist. ";
        if (AreYouSure(sConfirmMsg)) {
            //get the highest last update date
            let iHighestUpdateDate = 0;
            iHighestUpdateDate = GetHighestUpdateDate(idxWL, true);
            if (iHighestUpdateDate == -1) {
                gbDoingCreateOrders = false;
                DoGetTDData();
                return;
            }

            //get the trade info for the selected symbols
            window.setTimeout("GetTradesAutoBase(true, " + iHighestUpdateDate + ", " + idxWL + ", false, '', " + iEndDate + ", '', false, '', '', '', '', true)", 10);
        } else {
            gbDoingCreateOrders = false;
            DoGetTDData();
            return;
        }
    }
}

function wlMarkSelected(idxWL) {
    if (gbDoingSymbolsSelect) {
        gWatchlists[idxWL].bSelectedTempSymbols = !gWatchlists[idxWL].bSelectedTempSymbols;
    } else {
        if (idxWL < 0) { //adding new watchlist
            if (isUndefined(gNewWLAccounts[(-1 * idxWL).toString])) {
                gNewWLAccounts[(-1 * idxWL).toString] = {"selected":true}
            } else {
                gNewWLAccounts[(-1 * idxWL).toString].selected = !gNewWLAccounts[(-1 * idxWL).toString].selected;
            }
        } else {
            if (gWatchlists[idxWL].name == gsAccountWLSummary) {
                gWatchlists[idxWL].bSelectedWLSummaryTemp = !gWatchlists[idxWL].bSelectedWLSummaryTemp;
            } else if (gWatchlists[idxWL].name == gsAccountOldGL) {
                gWatchlists[idxWL].bSelectedOGLTemp = !gWatchlists[idxWL].bSelectedOGLTemp;
            } else if (gWatchlists[idxWL].name == gsAccountOrders) {
                gWatchlists[idxWL].bSelectedOTemp = !gWatchlists[idxWL].bSelectedOTemp;
            } else if (gWatchlists[idxWL].name == gsAccountSavedOrders) {
                gWatchlists[idxWL].bSelectedSOTemp = !gWatchlists[idxWL].bSelectedSOTemp;
            } else {
                gWatchlists[idxWL].bSelectedTemp = !gWatchlists[idxWL].bSelectedTemp;
            }
        }
    }
}

function wlMarkSelectedColumn(idxWL, key) {
    gWatchlists[idxWL].wlcolumnsselectedtemp[key].selected = !gWatchlists[idxWL].wlcolumnsselectedtemp[key].selected;
}

function wlMarkSelectedColumnToMove(idxWL, key) {
    if (isUndefined(gWatchlists[idxWL].wlcolumnsselectedtemp[key].selectedtomove)) {
        gWatchlists[idxWL].wlcolumnsselectedtemp[key].selectedtomove = true;
    } else {
        gWatchlists[idxWL].wlcolumnsselectedtemp[key].selectedtomove = !gWatchlists[idxWL].wlcolumnsselectedtemp[key].selectedtomove;
    }
    let sThisTDId = "";
    //var gsWLTableHeadingBackgroundColor = "#99CCFF";
    //var gsWLTableBackgroundColor = "#e8f4ff";
    for (let localkey in gWatchlists[idxWL].wlcolumnsselectedtemp) {
        if (gWatchlists[idxWL].wlcolumnsselectedtemp.hasOwnProperty(localkey)) {
            if (!isUndefined(gWatchlists[idxWL].wlcolumnsselectedtemp[localkey].selectedtomove)) {
                if ((localkey != key) && (localkey != gsSortOrderFields.Symbol)) {
                    gWatchlists[idxWL].wlcolumnsselectedtemp[localkey].selectedtomove = false;
                    sThisTDId = "tdcolchg" + gWatchlists[idxWL].wlcolumnsselectedtemp[localkey].displayname;
                    document.getElementById(sThisTDId).style.backgroundColor = gsWLTableHeadingBackgroundColor;
                }
            }
        }
    }
    sThisTDId = "tdcolchg" + gWatchlists[idxWL].wlcolumnsselectedtemp[key].displayname;
    if (gWatchlists[idxWL].wlcolumnsselectedtemp[key].selectedtomove) {
        //change its backcolor to selected 
        if ((!isUndefined(document.getElementById(sThisTDId))) && (document.getElementById(sThisTDId) != null)) {
            document.getElementById(sThisTDId).style.backgroundColor = gsWLTableBackgroundColor;
        }
    } else {
        //change its backcolor to not selected 
        if ((!isUndefined(document.getElementById(sThisTDId))) && (document.getElementById(sThisTDId) != null)) {
            document.getElementById(sThisTDId).style.backgroundColor = gsWLTableHeadingBackgroundColor;
        }
    }
}

function wlMarkSortableColumn(idxWL, key) {
    gWatchlists[idxWL].wlcolumnsselectedtemp[key].sortable = !gWatchlists[idxWL].wlcolumnsselectedtemp[key].sortable;
    if (!isUndefined(document.getElementById("rb" + key))) {
        if (!gWatchlists[idxWL].wlcolumnsselectedtemp[key].sortable) {
            //disable sort on this field and set the Symbol field as sort on this field if this field was selected
            document.getElementById("rb" + key).disabled = true;
            document.getElementById("rbasc" + key).disabled = true;
            document.getElementById("rbdesc" + key).disabled = true;
            if (document.getElementById("rb" + key).checked) {
                if (!isUndefined(document.getElementById("rb" + gsSortOrderFields.Symbol))) {
                    document.getElementById("rb" + gsSortOrderFields.Symbol).checked = true;
                }
            }
        } else {
            document.getElementById("rb" + key).disabled = false;
            document.getElementById("rbasc" + key).disabled = false;
            document.getElementById("rbdesc" + key).disabled = false;
        }
    }
}

function wlMarkSelectedItem(idxWL, idxWLItem) {
    if (idxWLItem == -1) { //top of column checked to select or deselect everything
        if (!gbDoingGetTDData) {
            if (giGetTDDataTimeoutId != 0) {
                window.clearTimeout(giGetTDDataTimeoutId);
                giGetTDDataTimeoutId = 0;
                let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
                let bChecked = false;
                if (document.getElementById("chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + "000").checked) {
                    bChecked = true;
                }

                let iNumSelected = 0;
                for (let idxItem = 0; idxItem < gWatchlists[idxWL].WLItems.length; idxItem++) {
                    if ((gWatchlists[idxWL].WLItems[idxItem].bCheckboxEnabled) &&
                        (!gWatchlists[idxWL].WLItems[idxItem].bHidden)) {
                        gWatchlists[idxWL].WLItems[idxItem].bSelectedForOrder = bChecked;
                        if (bChecked) {
                            iNumSelected++;
                        }
                    }
                }
                if (iNumSelected == 0) {
                    document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "&nbsp;";
                } else {
                    document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "(" + FormatIntegerNumber(iNumSelected, 3, "") + ")&nbsp;&nbsp;";
                }

                giGetTDDataTimeoutId = window.setTimeout("GetTDData(false)", 10);

            } else {
                window.setTimeout("wlMarkSelectedItem(" + idxWL.toString() + "," + idxWLItem.toString() + ")", 100);
            }
        } else {
            window.setTimeout("wlMarkSelectedItem(" + idxWL.toString() + "," + idxWLItem.toString() + ")", 100);
        }

    } else {
        if (!gbDoingGetTDData) {
            if (giGetTDDataTimeoutId != 0) {
                window.clearTimeout(giGetTDDataTimeoutId);
                giGetTDDataTimeoutId = 0;
                let sThisId = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;

                gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder = !gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder;
                let sThisTRId = "TR" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + FormatIntegerNumber(idxWLItem, 3, "0");
                if (gWatchlists[idxWL].WLItems[idxWLItem].bSelectedForOrder) {
                    //was set to checked

                    if ((!isUndefined(document.getElementById(sThisTRId))) && (document.getElementById(sThisTRId) != null)) {
                        document.getElementById(sThisTRId).style.backgroundColor = gsWLTableSelectedRowBackgroundColor;
                    }

                    // check to see if everything has been selected
                    let bAllChecked = true;
                    let iNumSelected = 0;
                    for (let idxItem = 0; idxItem < gWatchlists[idxWL].WLItems.length; idxItem++) {
                        if ((gWatchlists[idxWL].WLItems[idxItem].bCheckboxEnabled) &&
                            (!gWatchlists[idxWL].WLItems[idxItem].bHidden)) {
                            if (!gWatchlists[idxWL].WLItems[idxItem].bSelectedForOrder) {
                                bAllChecked = false;
                            } else {
                                iNumSelected++;
                            }
                        }
                    }
                    if ((bAllChecked) && (iNumSelected != 0)) {
                        document.getElementById("chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + "000").checked = true;
                    }
                    if (iNumSelected == 0) {
                        document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "&nbsp;";
                    } else {
                        document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "(" + FormatIntegerNumber(iNumSelected, 3, "") + ")&nbsp;&nbsp;";
                    }

                } else {
                    //was set to unchecked
                    if ((!isUndefined(document.getElementById(sThisTRId))) && (document.getElementById(sThisTRId) != null)) {
                        if ((idxWLItem % 2) == 0) {
                            document.getElementById(sThisTRId).style.backgroundColor = gsWLTableEvenRowBackgroundColor;
                        } else {
                            document.getElementById(sThisTRId).style.backgroundColor = gsWLTableOddRowBackgroundColor;
                        }
                    }
                    //set the top checkbox to unchecked
                    document.getElementById("chkWLItem" + sThisId + FormatIntegerNumber(idxWL, 3, "0") + "000").checked = false;
                    let iNumSelected = 0;
                    for (let idxItem = 0; idxItem < gWatchlists[idxWL].WLItems.length; idxItem++) {
                        if ((gWatchlists[idxWL].WLItems[idxItem].bCheckboxEnabled) &&
                            (!gWatchlists[idxWL].WLItems[idxItem].bHidden)) {
                            if (gWatchlists[idxWL].WLItems[idxItem].bSelectedForOrder) {
                                iNumSelected++;
                            }
                        }
                    }
                    if (iNumSelected == 0) {
                        document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "&nbsp;";
                    } else {
                        document.getElementById("spanWLNumChecked" + sThisId).innerHTML = "(" + FormatIntegerNumber(iNumSelected, 3, "") + ")&nbsp;&nbsp;";
                    }
                }

                giGetTDDataTimeoutId = window.setTimeout("GetTDData(false)", 10);

            } else {
                window.setTimeout("wlMarkSelectedItem(" + idxWL.toString() + "," + idxWLItem.toString() + ")", 100);
            }
        } else {
            window.setTimeout("wlMarkSelectedItem(" + idxWL.toString() + "," + idxWLItem.toString() + ")", 100);
        }
    }
}

function wlOKClicked() {
    if (!gbDoingSymbolsSelect) {
        wlAskShowAllAccountsForEachSymbol();
    }
    if (gbUsingCell) {
        document.getElementById("wlForm").style.display = "none";
        document.getElementById("pwdForm").style.display = "block";
        document.getElementById("MainForm").style.display = "block";
        for (let idx = 0; idx < gWatchlists.length; idx++) {
            if (gbDoingSymbolsSelect) {
                gWatchlists[idx].bSelectedSymbols = gWatchlists[idx].bSelectedTempSymbols;
            } else if (gWatchlists[idx].name == gsAccountWLSummary) {
                gWatchlists[idx].bSelectedWLSummary = gWatchlists[idx].bSelectedWLSummaryTemp;
                gWatchlists[idx].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
                if (gWatchlists[idx].bSelectedWLSummary) {
                    if (gWatchlists[idx].spanName == "") {
                        gWatchlists[idx].spanName = gWatchlists[idx].watchlistId + gWatchlists[idx].accountId;
                        wlAddDiv(gWatchlists[idx].spanName, "");
                    }
                } else {
                    if (gWatchlists[idx].spanName != "") {
                        wlRemoveDiv(gWatchlists[idx].spanName);
                        gWatchlists[idx].spanName = "";
                    }
                }
            } else if (gWatchlists[idx].name == gsAccountOrders) {
                gWatchlists[idx].bSelectedO = gWatchlists[idx].bSelectedOTemp;
                gWatchlists[idx].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
                if (gWatchlists[idx].bSelectedO) {
                    if (gWatchlists[idx].spanName == "") {
                        gWatchlists[idx].spanName = gWatchlists[idx].watchlistId + gWatchlists[idx].accountId;
                        wlAddDiv(gWatchlists[idx].spanName, "");
                    }
                } else {
                    if (gWatchlists[idx].spanName != "") {
                        wlRemoveDiv(gWatchlists[idx].spanName);
                        gWatchlists[idx].spanName = "";
                    }
                }

            } else if (gWatchlists[idx].name == gsAccountSavedOrders) {
                gWatchlists[idx].bSelectedSO = gWatchlists[idx].bSelectedSOTemp;
                gWatchlists[idx].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
                if (gWatchlists[idx].bSelectedSO) {
                    if (gWatchlists[idx].spanName == "") {
                        gWatchlists[idx].spanName = gWatchlists[idx].watchlistId + gWatchlists[idx].accountId;
                        wlAddDiv(gWatchlists[idx].spanName, "");
                    }
                } else {
                    if (gWatchlists[idx].spanName != "") {
                        wlRemoveDiv(gWatchlists[idx].spanName);
                        gWatchlists[idx].spanName = "";
                    }
                }

            } else {
                gWatchlists[idx].bSelected = gWatchlists[idx].bSelectedTemp;
                gWatchlists[idx].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
                if (gWatchlists[idx].bSelected) {
                    if (gWatchlists[idx].spanName == "") {
                        gWatchlists[idx].spanName = gWatchlists[idx].watchlistId + gWatchlists[idx].accountId;
                        wlAddDiv(gWatchlists[idx].spanName, "");
                    }
                } else {
                    if (gWatchlists[idx].spanName != "") {
                        wlRemoveDiv(gWatchlists[idx].spanName);
                        gWatchlists[idx].spanName = "";
                    }
                }

            }
        }
        wlShowAllWatchlists();

        if (gbDoingSymbolsSelect) {
            let sSymbols = "";
            let sSep = "";
            for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
                if (gWatchlists[idxWL].bSelectedSymbols) {
                    for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
                        if (gWatchlists[idxWL].WLItems[idxWLItem].bSelected) {
                            sSymbols = sSymbols + sSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                            sSep = ",";
                        }
                    }
                    gWatchlists[idxWL].bSelectedSymbols = false;
                    gWatchlists[idxWL].bSelectedTempSymbols = false;
                }
            }
            if (TrimLikeVB(document.getElementById("txtSymbols").value) != "") {
                if (sSymbols != "") {
                    sSymbols = TrimLikeVB(document.getElementById("txtSymbols").value) + "," + sSymbols;
                } else {
                    sSymbols = TrimLikeVB(document.getElementById("txtSymbols").value);
                }
            }
            sSymbols = GetUniqueListOfSymbols(sSymbols);
            document.getElementById("txtSymbols").value = sSymbols;

            gbDoingSymbolsSelect = false;
        } else {
            DoGetTDData();
        }

    } else {
        //should never get here because the button will not be displayed
    }


}

function wlOKClickedColumnSelection(idxWL) {

    document.getElementById("wlFormColumn").style.display = "none";
    document.getElementById("wlForm").style.display = "none";
    document.getElementById("pwdForm").style.display = "block";
    document.getElementById("MainForm").style.display = "block";

    gWatchlists[idxWL].wlcolumnsselected = [];

    //clear old sortonthisfield values and set all of the asc desc values
    for (let key in gWatchlists[idxWL].wlcolumnsselectedtemp) {
        // check if the property/key is defined in the object itself, not in parent
        if (gWatchlists[idxWL].wlcolumnsselectedtemp.hasOwnProperty(key)) {
            gWatchlists[idxWL].wlcolumnsselectedtemp[key].sortonthisfield = false;
            if (document.getElementById("rbasc" + key).checked) {
                gWatchlists[idxWL].wlcolumnsselectedtemp[key].sortascdesc = 0;
            } else {
                gWatchlists[idxWL].wlcolumnsselectedtemp[key].sortascdesc = 1;
            }
        }
    }

    //find the column selected to sort on 
    var x = document.getElementsByName("rbsortonthisfield");
    for (let idx = 0; idx < x.length; idx++) {
        if (x[idx].checked) {
            let sTmp = x[idx].id;
            let sKey = sTmp.substr(2);
            gWatchlists[idxWL].wlcolumnsselectedtemp[sKey].sortonthisfield = true;
            break;
        }
    }

    for (let key in gWatchlists[idxWL].wlcolumnsselectedtemp) {
        // check if the property/key is defined in the object itself, not in parent
        if (gWatchlists[idxWL].wlcolumnsselectedtemp.hasOwnProperty(key)) {
            gWatchlists[idxWL].wlcolumnsselected[key] = clone(gWatchlists[idxWL].wlcolumnsselectedtemp[key]);
        }
    }
    window.setTimeout("ChangeColumnsSelected(" + idxWL + ")", 10);

    wlShowAllWatchlists();
    gbDoingCreateOrders = false;
    DoGetTDData();

}

function wlRemoveDiv(sDivId) {
    try {
        gbDoingCreateOrders = false;
        let item = document.getElementById(sDivId);
        item.parentNode.removeChild(item);
    } catch (e) {

    }
}

function wlRemoveDivNoClear(sDivId) {
    try {
        let item = document.getElementById(sDivId);
        item.parentNode.removeChild(item);
    } catch (e) {

    }
}

function wlResetDragAllWatchlists() {
    if (gWatchlists.length > 0) {
        for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
            if (gWatchlists[idxWL].spanName != "") {
                if ((gWatchlists[idxWL].bSelected) || (gWatchlists[idxWL].bSelectedO) || (gWatchlists[idxWL].bSelectedSO) || (gWatchlists[idxWL].bSelectedWLSummary) || (gWatchlists[idxWL].bSelectedOGL)) {
                    if (!isUndefined(document.getElementById(gWatchlists[idxWL].spanName))) {
                        let x = document.getElementById(gWatchlists[idxWL].spanName);
                        x.isDown = false;
                        let sSpanId = gWatchlists[idxWL].spanName;
                        wlSetupDragDiv(gWatchlists[idxWL].spanName);
                        x.onclick = function () {
                            giZIndex++;
                            if ((document.getElementById(sSpanId) != null) && (!isUndefined(document.getElementById(sSpanId)))) {
                                document.getElementById(sSpanId).style.zIndex = giZIndex.toString();
                            }
                        };
                    }
                }
            }
        }
    }
}

function wlResetIsDownAllWatchlists() {
    if (gWatchlists.length > 0) {
        for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
            if (gWatchlists[idxWL].spanName != "") {
                if ((gWatchlists[idxWL].bSelected) || (gWatchlists[idxWL].bSelectedO) || (gWatchlists[idxWL].bSelectedSO) || (gWatchlists[idxWL].bSelectedWLSummary) || (gWatchlists[idxWL].bSelectedOGL)) {
                    if (!isUndefined(document.getElementById(gWatchlists[idxWL].spanName))) {
                        let x = document.getElementById(gWatchlists[idxWL].spanName);
                        x.isDown = false;
                    }
                }
            }
        }
    }
}

function wlSelectedCell(idxWL, sAccountName) {

    if (idxWL < 0) { //adding new watchlist into account (-1 * idxWL)
        let sReturn = AddWL((-1 * idxWL).toString(), sAccountName);
        if (sReturn == "") {
            document.getElementById("wlForm").style.display = "none";
            document.getElementById("pwdForm").style.display = "block";
            document.getElementById("MainForm").style.display = "block";

            gbDoingCreateOrders = false;
            gbDoResetWatchlists = true;
            wlShowAllWatchlists();
            DoGetTDData();

        } else {
            alert(sReturn);
        }
    } else { //show selected watchlist
        document.getElementById("wlForm").style.display = "none";
        document.getElementById("pwdForm").style.display = "block";
        document.getElementById("MainForm").style.display = "block";

        if (gWatchlists[idxWL].name == gsAccountWLSummary) {
            gWatchlists[idxWL].bSelectedWLSummary = true;
            gWatchlists[idxWL].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
            if (gWatchlists[idxWL].spanName == "") {
                gWatchlists[idxWL].spanName = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
                wlAddDiv(gWatchlists[idxWL].spanName, "");
            }
        } else if (gWatchlists[idxWL].name == gsAccountOrders) {
            gWatchlists[idxWL].bSelectedO = true;
            gWatchlists[idxWL].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
            if (gWatchlists[idxWL].spanName == "") {
                gWatchlists[idxWL].spanName = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
                wlAddDiv(gWatchlists[idxWL].spanName, "");
            }
        } else if (gWatchlists[idxWL].name == gsAccountSavedOrders) {
            gWatchlists[idxWL].bSelectedSO = true;
            gWatchlists[idxWL].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
            if (gWatchlists[idxWL].spanName == "") {
                gWatchlists[idxWL].spanName = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
                wlAddDiv(gWatchlists[idxWL].spanName, "");
            }
        } else {
            gWatchlists[idxWL].bSelected = true;
            gWatchlists[idxWL].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
            if (gWatchlists[idxWL].spanName == "") {
                gWatchlists[idxWL].spanName = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
                wlAddDiv(gWatchlists[idxWL].spanName, "");
            }
        }

        gbDoingCreateOrders = false;
        wlShowAllWatchlists();

        DoGetTDData();
    }
}

function wlSetupDragDiv(sSpanId) {
    if (gbUsingCell) {
        drag_div(sSpanId);
    } else {
        drag_divWL(sSpanId);
    }
}

function wlShowAllWatchlists() {
    if (gWatchlists.length > 0) {
        for (let idxWL = 0; idxWL < gWatchlists.length; idxWL++) {
            if (gWatchlists[idxWL].spanName != "") {
                if ((gWatchlists[idxWL].bSelected) || (gWatchlists[idxWL].bSelectedO) || (gWatchlists[idxWL].bSelectedSO) || (gWatchlists[idxWL].bSelectedWLSummary) || (gWatchlists[idxWL].bSelectedOGL)) {
//                if ((gWatchlists[idxWL].bSelected) || (gWatchlists[idxWL].bSelectedO) || (gWatchlists[idxWL].bSelectedSO)) {
                    document.getElementById(gWatchlists[idxWL].spanName).style.display = "block";
                }
            }
        }
    }
}

function wlShowSymbols(idxWL) {
    //alert("selected index = " + idxWL.toString());
}

function WLSortColumns(iMainTemp, oWL) {
    //iMainTemp  - 0 = Main, 1 = temp
    let arr = [];
    let wlcolumnsselected = [];
    if (iMainTemp == 0) {
        wlcolumnsselected = clone(oWL.wlcolumnsselected);
    } else {
        wlcolumnsselected = clone(oWL.wlcolumnsselectedtemp);
    }
    for (let key in wlcolumnsselected) {
        if (wlcolumnsselected.hasOwnProperty(key)) {
            arr.push(wlcolumnsselected[key]);
        }
    }
    arr.sort(sortBySortorder);
    if (iMainTemp == 0) {
        oWL.wlcolumnsselected = [];
        for (let idx = 0; idx < arr.length; idx++) {
            oWL.wlcolumnsselected[arr[idx].name] = clone(arr[idx]);
            oWL.wlcolumnsselected[arr[idx].name].sortorder = idx * 2;
        }
    } else {
        oWL.wlcolumnsselectedtemp = [];
        for (let idx = 0; idx < arr.length; idx++) {
            oWL.wlcolumnsselectedtemp[arr[idx].name] = clone(arr[idx]);
            oWL.wlcolumnsselectedtemp[arr[idx].name].sortorder = idx * 2;
        }
    }

}

function wlWatchlistSelected() {

    let x = document.getElementById("optWL").value;
    let idxWL = -1;

    //alert("x = " + x + ", selectedIndex = " + document.getElementById("optWL").selectedIndex );

    if (x != "") {
        if (x != "") {
            idxWL = parseInt(x);
            if (!gbDoingSymbolsSelect) {
                if ((idxWL < 0) && (idxWL != -1)) {
                    //get the account name to add to
                    let iAccountId = (-1 * idxWL).toString();
                    let sAccountName = "";
                    for (let idxAccount = 0; idxAccount < gAccounts.length; idxAccount++) {
                        if (gAccounts[idxAccount].accountId == iAccountId) {
                            sAccountName = gAccounts[idxAccount].accountName;
                            break;
                        }
                    }
                    if (sAccountName != "") {
                        let sReturn = AddWL(iAccountId, sAccountName);
                        if (sReturn == "") {
                            gbDoResetWatchlists = true;
                        } else {
                            alert(sReturn);
                        }
                    }
                } else {
                    wlAskShowAllAccountsForEachSymbol();
                    if (gWatchlists[idxWL].name == gsAccountWLSummary) {
                        gWatchlists[idxWL].bSelectedWLSummary = true;
                        gWatchlists[idxWL].bSelectedWLSummaryTemp = true;
                        gWatchlists[idxWL].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
                    } else if (gWatchlists[idxWL].name == gsAccountOrders) {
                        gWatchlists[idxWL].bSelectedO = true;
                        gWatchlists[idxWL].bSelectedTempO = true;
                        gWatchlists[idxWL].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
                    } else if (gWatchlists[idxWL].name == gsAccountSavedOrders) {
                        gWatchlists[idxWL].bSelectedSO = true;
                        gWatchlists[idxWL].bSelectedTempSO = true;
                        gWatchlists[idxWL].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
                    } else {
                        gWatchlists[idxWL].bSelected = true;
                        gWatchlists[idxWL].bSelectedTemp = true;
                        gWatchlists[idxWL].bShowAllAccountsForEachSymbol = gbWLShowAllAccountsForSymbol;
                    }
                    if (gWatchlists[idxWL].spanName == "") {
                        gWatchlists[idxWL].spanName = gWatchlists[idxWL].watchlistId + gWatchlists[idxWL].accountId;
                        wlAddDiv(gWatchlists[idxWL].spanName, "");
                        //    if (gWatchlists[idxWL].name == gsAccountOldGL) {
                        //        wlAddDiv(gWatchlists[idxWL].spanName, "", lengthsWLOGL.WLDragXoffsetLeft, lengthsWLOGL.WLDragXoffsetRight);
                        //    } else {
                        //    }
                    }
                }
            }
        }

        document.getElementById("optWL").value = "";
        document.getElementById("optWL").style.visibility = "hidden";
        document.getElementById("spanWLSelectWatchlists").style.top = "-1000px";
        document.getElementById("spanWLSelectWatchlists").style.left = "-1000px";
        if (gbDoingSymbolsSelect) {
            document.pwdForm.btnSymSelect.style.visibility = "visible";
            document.pwdForm.btnSymFind.style.visibility = "visible";
        } else {
            document.pwdForm.btnWLSelect.style.visibility = "visible";
        }
    } else {
        document.getElementById("optWL").value = "";
        document.getElementById("optWL").style.visibility = "hidden";
        document.getElementById("spanWLSelectWatchlists").style.top = "-1000px";
        document.getElementById("spanWLSelectWatchlists").style.left = "-1000px";

        if (gbDoingSymbolsSelect) {
            document.pwdForm.btnSymSelect.style.visibility = "visible";
            document.pwdForm.btnSymFind.style.visibility = "visible";
        } else {
            document.pwdForm.btnWLSelect.style.visibility = "visible";
        }
        gbDoingSymbolsSelect = false;
    }

    if ((gbDoingSymbolsSelect) && (idxWL != -1)) {
        let sSymbols = "";
        let sSep = "";
        for (let idxWLItem = 0; idxWLItem < gWatchlists[idxWL].WLItems.length; idxWLItem++) {
            if (gWatchlists[idxWL].WLItems[idxWLItem].bSelected) {
                sSymbols = sSymbols + sSep + gWatchlists[idxWL].WLItems[idxWLItem].symbol;
                sSep = ",";
            }
        }
        if (TrimLikeVB(document.getElementById("txtSymbols").value) != "") {
            if (sSymbols != "") {
                sSymbols = TrimLikeVB(document.getElementById("txtSymbols").value) + "," + sSymbols;
            } else {
                sSymbols = TrimLikeVB(document.getElementById("txtSymbols").value);
            }
        }
        sSymbols = GetUniqueListOfSymbols(sSymbols);
        document.getElementById("txtSymbols").value = sSymbols;

        gbDoingSymbolsSelect = false;
    } else {
        DoGetTDData();
    }
    gbShowingSelectWatchlists = false;
}
